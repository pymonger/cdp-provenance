/**
 * generated by http://RDFReactor.semweb4j.org ($Id: CodeGenerator.java 1765 2010-02-11 09:51:13Z max.at.xam.de $) on 10/2/12 2:28 PM
 */
package gov.nasa.jpl.cdp.provenance.prov;

import org.ontoware.aifbcommons.collection.ClosableIterator;
import org.ontoware.rdf2go.exception.ModelRuntimeException;
import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.BlankNode;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdfreactor.runtime.Base;
import org.ontoware.rdfreactor.runtime.ReactorResult;

/**
 * This class manages access to these properties:
 * <ul>
 *   <li> AtLocation </li>
 *   <li> HadActivity </li>
 *   <li> HadRole </li>
 *   <li> WasInfluencedBy </li>
 * </ul>
 *
 * This class was generated by <a href="http://RDFReactor.semweb4j.org">RDFReactor</a> on 10/2/12 2:28 PM
 */
public class A_1 extends Thing {

    /** blank://1 */
	@SuppressWarnings("hiding")
	public static final URI RDFS_CLASS = new URIImpl("blank://1", false);

    /** http://www.w3.org/ns/prov#atLocation */
	public static final URI ATLOCATION = new URIImpl("http://www.w3.org/ns/prov#atLocation",false);

    /** http://www.w3.org/ns/prov#hadActivity */
	public static final URI HADACTIVITY = new URIImpl("http://www.w3.org/ns/prov#hadActivity",false);

    /** http://www.w3.org/ns/prov#hadRole */
	public static final URI HADROLE = new URIImpl("http://www.w3.org/ns/prov#hadRole",false);

    /** http://www.w3.org/ns/prov#wasInfluencedBy */
	public static final URI WASINFLUENCEDBY = new URIImpl("http://www.w3.org/ns/prov#wasInfluencedBy",false);

    /** 
     * All property-URIs with this class as domain.
     * All properties of all super-classes are also available. 
     */
	@SuppressWarnings("hiding")
    public static final URI[] MANAGED_URIS = {
      new URIImpl("http://www.w3.org/ns/prov#atLocation",false),
      new URIImpl("http://www.w3.org/ns/prov#hadActivity",false),
      new URIImpl("http://www.w3.org/ns/prov#hadRole",false),
      new URIImpl("http://www.w3.org/ns/prov#wasInfluencedBy",false) 
    };


	// protected constructors needed for inheritance
	
	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.semweb4j.org
	 * @param classURI URI of RDFS class
	 * @param instanceIdentifier Resource that identifies this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c1] 
	 */
	protected A_1 ( Model model, URI classURI, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, classURI, instanceIdentifier, write);
	}

	// public constructors

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param instanceIdentifier an RDF2Go Resource identifying this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c2] 
	 */
	public A_1 ( Model model, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, RDFS_CLASS, instanceIdentifier, write);
	}


	/**
	 * Returns a Java wrapper over an RDF object, identified by a URI, given as a String.
	 * Creating two wrappers for the same URI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uriString a URI given as a String
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 * @throws ModelRuntimeException if URI syntax is wrong
	 *
	 * [Generated from RDFReactor template rule #c7] 
	 */
	public A_1 ( Model model, String uriString, boolean write) throws ModelRuntimeException {
		super(model, RDFS_CLASS, new URIImpl(uriString,false), write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by a blank node.
	 * Creating two wrappers for the same blank node is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param bnode BlankNode of this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c8] 
	 */
	public A_1 ( Model model, BlankNode bnode, boolean write ) {
		super(model, RDFS_CLASS, bnode, write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by 
	 * a randomly generated URI.
	 * Creating two wrappers results in different URIs.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c9] 
	 */
	public A_1 ( Model model, boolean write ) {
		super(model, RDFS_CLASS, model.newRandomUniqueURI(), write);
	}

    ///////////////////////////////////////////////////////////////////
    // typing

	/**
	 * Return an existing instance of this class in the model. No statements are written.
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return an instance of A_1  or null if none existst
	 *
	 * [Generated from RDFReactor template rule #class0] 
	 */
	public static A_1  getInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getInstance(model, instanceResource, A_1.class);
	}

	/**
	 * Create a new instance of this class in the model. 
	 * That is, create the statement (instanceResource, RDF.type, blank://1).
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class1] 
	 */
	public static void createInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.createInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return true if instanceResource is an instance of this class in the model
	 *
	 * [Generated from RDFReactor template rule #class2] 
	 */
	public static boolean hasInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.hasInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as RDF resources
	 *
	 * [Generated from RDFReactor template rule #class3] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInstances(Model model) {
		return Base.getAllInstances(model, RDFS_CLASS, org.ontoware.rdf2go.model.node.Resource.class);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as a ReactorResult,
	 * which can conveniently be converted to iterator, list or array.
	 *
	 * [Generated from RDFReactor template rule #class3-as] 
	 */
	public static ReactorResult<? extends A_1> getAllInstances_as(Model model) {
		return Base.getAllInstances_as(model, RDFS_CLASS, A_1.class );
	}

    /**
	 * Remove rdf:type A_1 from this instance. Other triples are not affected.
	 * To delete more, use deleteAllProperties
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class4] 
	 */
	public static void deleteInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * Delete all (this, *, *), i.e. including rdf:type
	 * @param model an RDF2Go model
	 * @param resource
	 */
	public static void deleteAllProperties(Model model,	org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteAllProperties(model, instanceResource);
	}

    ///////////////////////////////////////////////////////////////////
    // property access methods

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'WasInfluencedBy' to this A_1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllWasInfluencedBy_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, A_1.WASINFLUENCEDBY, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'WasInfluencedBy' to this A_1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllWasInfluencedBy_Inverse() {
		return Base.getAll_Inverse(this.model, A_1.WASINFLUENCEDBY, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'WasInfluencedBy' to this A_1 instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllWasInfluencedBy_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, A_1.WASINFLUENCEDBY, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}



    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@d8d990 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasAtLocation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, ATLOCATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@d8d990 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasAtLocation() {
		return Base.has(this.model, this.getResource(), ATLOCATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@d8d990 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasAtLocation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, ATLOCATION, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@d8d990 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasAtLocation( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), ATLOCATION, value);
	}

     /**
     * Get all values of property AtLocation as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllAtLocation_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, ATLOCATION);
	}
	
    /**
     * Get all values of property AtLocation as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllAtLocation_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ATLOCATION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property AtLocation as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllAtLocation_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), ATLOCATION);
	}

    /**
     * Get all values of property AtLocation as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllAtLocation_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), ATLOCATION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property AtLocation     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Location> getAllAtLocation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, ATLOCATION, Location.class);
	}
	
    /**
     * Get all values of property AtLocation as a ReactorResult of Location 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Location> getAllAtLocation_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ATLOCATION, Location.class);
	}

    /**
     * Get all values of property AtLocation     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Location> getAllAtLocation() {
		return Base.getAll(this.model, this.getResource(), ATLOCATION, Location.class);
	}

    /**
     * Get all values of property AtLocation as a ReactorResult of Location 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Location> getAllAtLocation_as() {
		return Base.getAll_as(this.model, this.getResource(), ATLOCATION, Location.class);
	}
 
    /**
     * Adds a value to property AtLocation as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addAtLocation( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, ATLOCATION, value);
	}
	
    /**
     * Adds a value to property AtLocation as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addAtLocation( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), ATLOCATION, value);
	}
    /**
     * Adds a value to property AtLocation from an instance of Location 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addAtLocation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Location value) {
		Base.add(model, instanceResource, ATLOCATION, value);
	}
	
    /**
     * Adds a value to property AtLocation from an instance of Location 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addAtLocation(Location value) {
		Base.add(this.model, this.getResource(), ATLOCATION, value);
	}
  

    /**
     * Sets a value of property AtLocation from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setAtLocation( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, ATLOCATION, value);
	}
	
    /**
     * Sets a value of property AtLocation from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setAtLocation( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), ATLOCATION, value);
	}
    /**
     * Sets a value of property AtLocation from an instance of Location 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setAtLocation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Location value) {
		Base.set(model, instanceResource, ATLOCATION, value);
	}
	
    /**
     * Sets a value of property AtLocation from an instance of Location 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setAtLocation(Location value) {
		Base.set(this.model, this.getResource(), ATLOCATION, value);
	}
  


    /**
     * Removes a value of property AtLocation as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeAtLocation( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, ATLOCATION, value);
	}
	
    /**
     * Removes a value of property AtLocation as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeAtLocation( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), ATLOCATION, value);
	}
    /**
     * Removes a value of property AtLocation given as an instance of Location 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeAtLocation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Location value) {
		Base.remove(model, instanceResource, ATLOCATION, value);
	}
	
    /**
     * Removes a value of property AtLocation given as an instance of Location 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeAtLocation(Location value) {
		Base.remove(this.model, this.getResource(), ATLOCATION, value);
	}
  
    /**
     * Removes all values of property AtLocation     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllAtLocation( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, ATLOCATION);
	}
	
    /**
     * Removes all values of property AtLocation	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllAtLocation() {
		Base.removeAll(this.model, this.getResource(), ATLOCATION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@161fb38 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasHadActivity(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, HADACTIVITY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@161fb38 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasHadActivity() {
		return Base.has(this.model, this.getResource(), HADACTIVITY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@161fb38 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasHadActivity(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, HADACTIVITY, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@161fb38 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasHadActivity( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), HADACTIVITY, value);
	}

     /**
     * Get all values of property HadActivity as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllHadActivity_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, HADACTIVITY);
	}
	
    /**
     * Get all values of property HadActivity as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllHadActivity_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, HADACTIVITY, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property HadActivity as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllHadActivity_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), HADACTIVITY);
	}

    /**
     * Get all values of property HadActivity as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllHadActivity_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), HADACTIVITY, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property HadActivity     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Activity> getAllHadActivity(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, HADACTIVITY, Activity.class);
	}
	
    /**
     * Get all values of property HadActivity as a ReactorResult of Activity 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Activity> getAllHadActivity_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, HADACTIVITY, Activity.class);
	}

    /**
     * Get all values of property HadActivity     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Activity> getAllHadActivity() {
		return Base.getAll(this.model, this.getResource(), HADACTIVITY, Activity.class);
	}

    /**
     * Get all values of property HadActivity as a ReactorResult of Activity 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Activity> getAllHadActivity_as() {
		return Base.getAll_as(this.model, this.getResource(), HADACTIVITY, Activity.class);
	}
 
    /**
     * Adds a value to property HadActivity as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addHadActivity( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, HADACTIVITY, value);
	}
	
    /**
     * Adds a value to property HadActivity as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addHadActivity( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), HADACTIVITY, value);
	}
    /**
     * Adds a value to property HadActivity from an instance of Activity 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addHadActivity(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Activity value) {
		Base.add(model, instanceResource, HADACTIVITY, value);
	}
	
    /**
     * Adds a value to property HadActivity from an instance of Activity 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addHadActivity(Activity value) {
		Base.add(this.model, this.getResource(), HADACTIVITY, value);
	}
  

    /**
     * Sets a value of property HadActivity from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setHadActivity( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, HADACTIVITY, value);
	}
	
    /**
     * Sets a value of property HadActivity from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setHadActivity( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), HADACTIVITY, value);
	}
    /**
     * Sets a value of property HadActivity from an instance of Activity 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setHadActivity(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Activity value) {
		Base.set(model, instanceResource, HADACTIVITY, value);
	}
	
    /**
     * Sets a value of property HadActivity from an instance of Activity 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setHadActivity(Activity value) {
		Base.set(this.model, this.getResource(), HADACTIVITY, value);
	}
  


    /**
     * Removes a value of property HadActivity as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeHadActivity( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, HADACTIVITY, value);
	}
	
    /**
     * Removes a value of property HadActivity as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeHadActivity( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), HADACTIVITY, value);
	}
    /**
     * Removes a value of property HadActivity given as an instance of Activity 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeHadActivity(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Activity value) {
		Base.remove(model, instanceResource, HADACTIVITY, value);
	}
	
    /**
     * Removes a value of property HadActivity given as an instance of Activity 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeHadActivity(Activity value) {
		Base.remove(this.model, this.getResource(), HADACTIVITY, value);
	}
  
    /**
     * Removes all values of property HadActivity     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllHadActivity( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, HADACTIVITY);
	}
	
    /**
     * Removes all values of property HadActivity	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllHadActivity() {
		Base.removeAll(this.model, this.getResource(), HADACTIVITY);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@e8162b has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasHadRole(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, HADROLE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@e8162b has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasHadRole() {
		return Base.has(this.model, this.getResource(), HADROLE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@e8162b has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasHadRole(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, HADROLE, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@e8162b has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasHadRole( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), HADROLE, value);
	}

     /**
     * Get all values of property HadRole as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllHadRole_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, HADROLE);
	}
	
    /**
     * Get all values of property HadRole as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllHadRole_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, HADROLE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property HadRole as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllHadRole_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), HADROLE);
	}

    /**
     * Get all values of property HadRole as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllHadRole_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), HADROLE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property HadRole     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Role> getAllHadRole(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, HADROLE, Role.class);
	}
	
    /**
     * Get all values of property HadRole as a ReactorResult of Role 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Role> getAllHadRole_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, HADROLE, Role.class);
	}

    /**
     * Get all values of property HadRole     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Role> getAllHadRole() {
		return Base.getAll(this.model, this.getResource(), HADROLE, Role.class);
	}

    /**
     * Get all values of property HadRole as a ReactorResult of Role 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Role> getAllHadRole_as() {
		return Base.getAll_as(this.model, this.getResource(), HADROLE, Role.class);
	}
 
    /**
     * Adds a value to property HadRole as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addHadRole( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, HADROLE, value);
	}
	
    /**
     * Adds a value to property HadRole as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addHadRole( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), HADROLE, value);
	}
    /**
     * Adds a value to property HadRole from an instance of Role 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addHadRole(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Role value) {
		Base.add(model, instanceResource, HADROLE, value);
	}
	
    /**
     * Adds a value to property HadRole from an instance of Role 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addHadRole(Role value) {
		Base.add(this.model, this.getResource(), HADROLE, value);
	}
  

    /**
     * Sets a value of property HadRole from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setHadRole( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, HADROLE, value);
	}
	
    /**
     * Sets a value of property HadRole from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setHadRole( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), HADROLE, value);
	}
    /**
     * Sets a value of property HadRole from an instance of Role 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setHadRole(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Role value) {
		Base.set(model, instanceResource, HADROLE, value);
	}
	
    /**
     * Sets a value of property HadRole from an instance of Role 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setHadRole(Role value) {
		Base.set(this.model, this.getResource(), HADROLE, value);
	}
  


    /**
     * Removes a value of property HadRole as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeHadRole( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, HADROLE, value);
	}
	
    /**
     * Removes a value of property HadRole as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeHadRole( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), HADROLE, value);
	}
    /**
     * Removes a value of property HadRole given as an instance of Role 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeHadRole(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Role value) {
		Base.remove(model, instanceResource, HADROLE, value);
	}
	
    /**
     * Removes a value of property HadRole given as an instance of Role 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeHadRole(Role value) {
		Base.remove(this.model, this.getResource(), HADROLE, value);
	}
  
    /**
     * Removes all values of property HadRole     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllHadRole( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, HADROLE);
	}
	
    /**
     * Removes all values of property HadRole	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllHadRole() {
		Base.removeAll(this.model, this.getResource(), HADROLE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4dd493 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasWasInfluencedBy(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, WASINFLUENCEDBY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4dd493 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasWasInfluencedBy() {
		return Base.has(this.model, this.getResource(), WASINFLUENCEDBY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4dd493 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasWasInfluencedBy(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, WASINFLUENCEDBY, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4dd493 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasWasInfluencedBy( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), WASINFLUENCEDBY, value);
	}

     /**
     * Get all values of property WasInfluencedBy as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllWasInfluencedBy_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, WASINFLUENCEDBY);
	}
	
    /**
     * Get all values of property WasInfluencedBy as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllWasInfluencedBy_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, WASINFLUENCEDBY, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property WasInfluencedBy as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllWasInfluencedBy_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), WASINFLUENCEDBY);
	}

    /**
     * Get all values of property WasInfluencedBy as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllWasInfluencedBy_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), WASINFLUENCEDBY, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property WasInfluencedBy     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<A_1> getAllWasInfluencedBy(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, WASINFLUENCEDBY, A_1.class);
	}
	
    /**
     * Get all values of property WasInfluencedBy as a ReactorResult of A_1 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<A_1> getAllWasInfluencedBy_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, WASINFLUENCEDBY, A_1.class);
	}

    /**
     * Get all values of property WasInfluencedBy     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<A_1> getAllWasInfluencedBy() {
		return Base.getAll(this.model, this.getResource(), WASINFLUENCEDBY, A_1.class);
	}

    /**
     * Get all values of property WasInfluencedBy as a ReactorResult of A_1 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<A_1> getAllWasInfluencedBy_as() {
		return Base.getAll_as(this.model, this.getResource(), WASINFLUENCEDBY, A_1.class);
	}
 
    /**
     * Adds a value to property WasInfluencedBy as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addWasInfluencedBy( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, WASINFLUENCEDBY, value);
	}
	
    /**
     * Adds a value to property WasInfluencedBy as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addWasInfluencedBy( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), WASINFLUENCEDBY, value);
	}
    /**
     * Adds a value to property WasInfluencedBy from an instance of A_1 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addWasInfluencedBy(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, A_1 value) {
		Base.add(model, instanceResource, WASINFLUENCEDBY, value);
	}
	
    /**
     * Adds a value to property WasInfluencedBy from an instance of A_1 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addWasInfluencedBy(A_1 value) {
		Base.add(this.model, this.getResource(), WASINFLUENCEDBY, value);
	}
  

    /**
     * Sets a value of property WasInfluencedBy from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setWasInfluencedBy( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, WASINFLUENCEDBY, value);
	}
	
    /**
     * Sets a value of property WasInfluencedBy from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setWasInfluencedBy( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), WASINFLUENCEDBY, value);
	}
    /**
     * Sets a value of property WasInfluencedBy from an instance of A_1 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setWasInfluencedBy(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, A_1 value) {
		Base.set(model, instanceResource, WASINFLUENCEDBY, value);
	}
	
    /**
     * Sets a value of property WasInfluencedBy from an instance of A_1 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setWasInfluencedBy(A_1 value) {
		Base.set(this.model, this.getResource(), WASINFLUENCEDBY, value);
	}
  


    /**
     * Removes a value of property WasInfluencedBy as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeWasInfluencedBy( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, WASINFLUENCEDBY, value);
	}
	
    /**
     * Removes a value of property WasInfluencedBy as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeWasInfluencedBy( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), WASINFLUENCEDBY, value);
	}
    /**
     * Removes a value of property WasInfluencedBy given as an instance of A_1 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeWasInfluencedBy(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, A_1 value) {
		Base.remove(model, instanceResource, WASINFLUENCEDBY, value);
	}
	
    /**
     * Removes a value of property WasInfluencedBy given as an instance of A_1 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeWasInfluencedBy(A_1 value) {
		Base.remove(this.model, this.getResource(), WASINFLUENCEDBY, value);
	}
  
    /**
     * Removes all values of property WasInfluencedBy     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllWasInfluencedBy( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, WASINFLUENCEDBY);
	}
	
    /**
     * Removes all values of property WasInfluencedBy	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllWasInfluencedBy() {
		Base.removeAll(this.model, this.getResource(), WASINFLUENCEDBY);
	}
 }