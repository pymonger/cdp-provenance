/**
 * generated by http://RDFReactor.semweb4j.org ($Id: CodeGenerator.java 1765 2010-02-11 09:51:13Z max.at.xam.de $) on 10/2/12 2:28 PM
 */
package gov.nasa.jpl.cdp.provenance.prov;

import org.ontoware.aifbcommons.collection.ClosableIterator;
import org.ontoware.rdf2go.exception.ModelRuntimeException;
import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.BlankNode;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdfreactor.runtime.Base;
import org.ontoware.rdfreactor.runtime.ReactorResult;

/**
 * This class manages access to these properties:
 * <ul>
 *   <li> AlternateOf </li>
 *   <li> AsInBundle </li>
 *   <li> GeneratedAtTime </li>
 *   <li> HadPrimarySource </li>
 *   <li> InvalidatedAtTime </li>
 *   <li> MentionOf </li>
 *   <li> QualifiedAttribution </li>
 *   <li> QualifiedDerivation </li>
 *   <li> QualifiedGeneration </li>
 *   <li> QualifiedInfluence </li>
 *   <li> QualifiedInvalidation </li>
 *   <li> QualifiedQuotation </li>
 *   <li> QualifiedRevision </li>
 *   <li> QualifiedSource </li>
 *   <li> SpecializationOf </li>
 *   <li> Value </li>
 *   <li> WasAttributedTo </li>
 *   <li> WasDerivedFrom </li>
 *   <li> WasGeneratedBy </li>
 *   <li> WasInvalidatedBy </li>
 *   <li> WasQuotedFrom </li>
 *   <li> WasRevisionOf </li>
 * </ul>
 *
 * This class was generated by <a href="http://RDFReactor.semweb4j.org">RDFReactor</a> on 10/2/12 2:28 PM
 */
public class Entity extends A_1 {

    /** http://www.w3.org/ns/prov#Entity */
	@SuppressWarnings("hiding")
	public static final URI RDFS_CLASS = new URIImpl("http://www.w3.org/ns/prov#Entity", false);

    /** http://www.w3.org/ns/prov#alternateOf */
	public static final URI ALTERNATEOF = new URIImpl("http://www.w3.org/ns/prov#alternateOf",false);

    /** http://www.w3.org/ns/prov#asInBundle */
	public static final URI ASINBUNDLE = new URIImpl("http://www.w3.org/ns/prov#asInBundle",false);

    /** http://www.w3.org/ns/prov#generatedAtTime */
	public static final URI GENERATEDATTIME = new URIImpl("http://www.w3.org/ns/prov#generatedAtTime",false);

    /** http://www.w3.org/ns/prov#hadPrimarySource */
	public static final URI HADPRIMARYSOURCE = new URIImpl("http://www.w3.org/ns/prov#hadPrimarySource",false);

    /** http://www.w3.org/ns/prov#invalidatedAtTime */
	public static final URI INVALIDATEDATTIME = new URIImpl("http://www.w3.org/ns/prov#invalidatedAtTime",false);

    /** http://www.w3.org/ns/prov#mentionOf */
	public static final URI MENTIONOF = new URIImpl("http://www.w3.org/ns/prov#mentionOf",false);

    /** http://www.w3.org/ns/prov#qualifiedAttribution */
	public static final URI QUALIFIEDATTRIBUTION = new URIImpl("http://www.w3.org/ns/prov#qualifiedAttribution",false);

    /** http://www.w3.org/ns/prov#qualifiedDerivation */
	public static final URI QUALIFIEDDERIVATION = new URIImpl("http://www.w3.org/ns/prov#qualifiedDerivation",false);

    /** http://www.w3.org/ns/prov#qualifiedGeneration */
	public static final URI QUALIFIEDGENERATION = new URIImpl("http://www.w3.org/ns/prov#qualifiedGeneration",false);

    /** http://www.w3.org/ns/prov#qualifiedInfluence */
	public static final URI QUALIFIEDINFLUENCE = new URIImpl("http://www.w3.org/ns/prov#qualifiedInfluence",false);

    /** http://www.w3.org/ns/prov#qualifiedInvalidation */
	public static final URI QUALIFIEDINVALIDATION = new URIImpl("http://www.w3.org/ns/prov#qualifiedInvalidation",false);

    /** http://www.w3.org/ns/prov#qualifiedQuotation */
	public static final URI QUALIFIEDQUOTATION = new URIImpl("http://www.w3.org/ns/prov#qualifiedQuotation",false);

    /** http://www.w3.org/ns/prov#qualifiedRevision */
	public static final URI QUALIFIEDREVISION = new URIImpl("http://www.w3.org/ns/prov#qualifiedRevision",false);

    /** http://www.w3.org/ns/prov#qualifiedSource */
	public static final URI QUALIFIEDSOURCE = new URIImpl("http://www.w3.org/ns/prov#qualifiedSource",false);

    /** http://www.w3.org/ns/prov#specializationOf */
	public static final URI SPECIALIZATIONOF = new URIImpl("http://www.w3.org/ns/prov#specializationOf",false);

    /** http://www.w3.org/ns/prov#value */
	public static final URI VALUE = new URIImpl("http://www.w3.org/ns/prov#value",false);

    /** http://www.w3.org/ns/prov#wasAttributedTo */
	public static final URI WASATTRIBUTEDTO = new URIImpl("http://www.w3.org/ns/prov#wasAttributedTo",false);

    /** http://www.w3.org/ns/prov#wasDerivedFrom */
	public static final URI WASDERIVEDFROM = new URIImpl("http://www.w3.org/ns/prov#wasDerivedFrom",false);

    /** http://www.w3.org/ns/prov#wasGeneratedBy */
	public static final URI WASGENERATEDBY = new URIImpl("http://www.w3.org/ns/prov#wasGeneratedBy",false);

    /** http://www.w3.org/ns/prov#wasInvalidatedBy */
	public static final URI WASINVALIDATEDBY = new URIImpl("http://www.w3.org/ns/prov#wasInvalidatedBy",false);

    /** http://www.w3.org/ns/prov#wasQuotedFrom */
	public static final URI WASQUOTEDFROM = new URIImpl("http://www.w3.org/ns/prov#wasQuotedFrom",false);

    /** http://www.w3.org/ns/prov#wasRevisionOf */
	public static final URI WASREVISIONOF = new URIImpl("http://www.w3.org/ns/prov#wasRevisionOf",false);

    /** 
     * All property-URIs with this class as domain.
     * All properties of all super-classes are also available. 
     */
	@SuppressWarnings("hiding")
    public static final URI[] MANAGED_URIS = {
      new URIImpl("http://www.w3.org/ns/prov#alternateOf",false),
      new URIImpl("http://www.w3.org/ns/prov#asInBundle",false),
      new URIImpl("http://www.w3.org/ns/prov#generatedAtTime",false),
      new URIImpl("http://www.w3.org/ns/prov#hadPrimarySource",false),
      new URIImpl("http://www.w3.org/ns/prov#invalidatedAtTime",false),
      new URIImpl("http://www.w3.org/ns/prov#mentionOf",false),
      new URIImpl("http://www.w3.org/ns/prov#qualifiedAttribution",false),
      new URIImpl("http://www.w3.org/ns/prov#qualifiedDerivation",false),
      new URIImpl("http://www.w3.org/ns/prov#qualifiedGeneration",false),
      new URIImpl("http://www.w3.org/ns/prov#qualifiedInfluence",false),
      new URIImpl("http://www.w3.org/ns/prov#qualifiedInvalidation",false),
      new URIImpl("http://www.w3.org/ns/prov#qualifiedQuotation",false),
      new URIImpl("http://www.w3.org/ns/prov#qualifiedRevision",false),
      new URIImpl("http://www.w3.org/ns/prov#qualifiedSource",false),
      new URIImpl("http://www.w3.org/ns/prov#specializationOf",false),
      new URIImpl("http://www.w3.org/ns/prov#value",false),
      new URIImpl("http://www.w3.org/ns/prov#wasAttributedTo",false),
      new URIImpl("http://www.w3.org/ns/prov#wasDerivedFrom",false),
      new URIImpl("http://www.w3.org/ns/prov#wasGeneratedBy",false),
      new URIImpl("http://www.w3.org/ns/prov#wasInvalidatedBy",false),
      new URIImpl("http://www.w3.org/ns/prov#wasQuotedFrom",false),
      new URIImpl("http://www.w3.org/ns/prov#wasRevisionOf",false) 
    };


	// protected constructors needed for inheritance
	
	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.semweb4j.org
	 * @param classURI URI of RDFS class
	 * @param instanceIdentifier Resource that identifies this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c1] 
	 */
	protected Entity ( Model model, URI classURI, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, classURI, instanceIdentifier, write);
	}

	// public constructors

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param instanceIdentifier an RDF2Go Resource identifying this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c2] 
	 */
	public Entity ( Model model, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, RDFS_CLASS, instanceIdentifier, write);
	}


	/**
	 * Returns a Java wrapper over an RDF object, identified by a URI, given as a String.
	 * Creating two wrappers for the same URI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uriString a URI given as a String
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 * @throws ModelRuntimeException if URI syntax is wrong
	 *
	 * [Generated from RDFReactor template rule #c7] 
	 */
	public Entity ( Model model, String uriString, boolean write) throws ModelRuntimeException {
		super(model, RDFS_CLASS, new URIImpl(uriString,false), write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by a blank node.
	 * Creating two wrappers for the same blank node is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param bnode BlankNode of this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c8] 
	 */
	public Entity ( Model model, BlankNode bnode, boolean write ) {
		super(model, RDFS_CLASS, bnode, write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by 
	 * a randomly generated URI.
	 * Creating two wrappers results in different URIs.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c9] 
	 */
	public Entity ( Model model, boolean write ) {
		super(model, RDFS_CLASS, model.newRandomUniqueURI(), write);
	}

    ///////////////////////////////////////////////////////////////////
    // typing

	/**
	 * Return an existing instance of this class in the model. No statements are written.
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return an instance of Entity  or null if none existst
	 *
	 * [Generated from RDFReactor template rule #class0] 
	 */
	public static Entity  getInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getInstance(model, instanceResource, Entity.class);
	}

	/**
	 * Create a new instance of this class in the model. 
	 * That is, create the statement (instanceResource, RDF.type, http://www.w3.org/ns/prov#Entity).
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class1] 
	 */
	public static void createInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.createInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return true if instanceResource is an instance of this class in the model
	 *
	 * [Generated from RDFReactor template rule #class2] 
	 */
	public static boolean hasInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.hasInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as RDF resources
	 *
	 * [Generated from RDFReactor template rule #class3] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInstances(Model model) {
		return Base.getAllInstances(model, RDFS_CLASS, org.ontoware.rdf2go.model.node.Resource.class);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as a ReactorResult,
	 * which can conveniently be converted to iterator, list or array.
	 *
	 * [Generated from RDFReactor template rule #class3-as] 
	 */
	public static ReactorResult<? extends Entity> getAllInstances_as(Model model) {
		return Base.getAllInstances_as(model, RDFS_CLASS, Entity.class );
	}

    /**
	 * Remove rdf:type Entity from this instance. Other triples are not affected.
	 * To delete more, use deleteAllProperties
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class4] 
	 */
	public static void deleteInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * Delete all (this, *, *), i.e. including rdf:type
	 * @param model an RDF2Go model
	 * @param resource
	 */
	public static void deleteAllProperties(Model model,	org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteAllProperties(model, instanceResource);
	}

    ///////////////////////////////////////////////////////////////////
    // property access methods

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Entity' to this Entity instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllEntity_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, EntityInfluence.ENTITY, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Entity' to this Entity instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllEntity_Inverse() {
		return Base.getAll_Inverse(this.model, EntityInfluence.ENTITY, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Entity' to this Entity instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllEntity_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, EntityInfluence.ENTITY, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Generated' to this Entity instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllGenerated_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Activity.GENERATED, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Generated' to this Entity instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllGenerated_Inverse() {
		return Base.getAll_Inverse(this.model, Activity.GENERATED, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Generated' to this Entity instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllGenerated_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Activity.GENERATED, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Invalidated' to this Entity instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInvalidated_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Activity.INVALIDATED, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Invalidated' to this Entity instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInvalidated_Inverse() {
		return Base.getAll_Inverse(this.model, Activity.INVALIDATED, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Invalidated' to this Entity instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllInvalidated_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Activity.INVALIDATED, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Used' to this Entity instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllUsed_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Activity.USED, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Used' to this Entity instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllUsed_Inverse() {
		return Base.getAll_Inverse(this.model, Activity.USED, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Used' to this Entity instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllUsed_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Activity.USED, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'WasEndedBy' to this Entity instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllWasEndedBy_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Activity.WASENDEDBY, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'WasEndedBy' to this Entity instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllWasEndedBy_Inverse() {
		return Base.getAll_Inverse(this.model, Activity.WASENDEDBY, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'WasEndedBy' to this Entity instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllWasEndedBy_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Activity.WASENDEDBY, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'WasStartedBy' to this Entity instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllWasStartedBy_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Activity.WASSTARTEDBY, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'WasStartedBy' to this Entity instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllWasStartedBy_Inverse() {
		return Base.getAll_Inverse(this.model, Activity.WASSTARTEDBY, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'WasStartedBy' to this Entity instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllWasStartedBy_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Activity.WASSTARTEDBY, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'HadMember' to this Entity instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllHadMember_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Collection.HADMEMBER, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'HadMember' to this Entity instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllHadMember_Inverse() {
		return Base.getAll_Inverse(this.model, Collection.HADMEMBER, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'HadMember' to this Entity instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllHadMember_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Collection.HADMEMBER, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'AlternateOf' to this Entity instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllAlternateOf_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Entity.ALTERNATEOF, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'AlternateOf' to this Entity instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllAlternateOf_Inverse() {
		return Base.getAll_Inverse(this.model, Entity.ALTERNATEOF, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'AlternateOf' to this Entity instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllAlternateOf_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Entity.ALTERNATEOF, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'HadPrimarySource' to this Entity instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllHadPrimarySource_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Entity.HADPRIMARYSOURCE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'HadPrimarySource' to this Entity instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllHadPrimarySource_Inverse() {
		return Base.getAll_Inverse(this.model, Entity.HADPRIMARYSOURCE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'HadPrimarySource' to this Entity instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllHadPrimarySource_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Entity.HADPRIMARYSOURCE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'MentionOf' to this Entity instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllMentionOf_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Entity.MENTIONOF, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'MentionOf' to this Entity instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllMentionOf_Inverse() {
		return Base.getAll_Inverse(this.model, Entity.MENTIONOF, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'MentionOf' to this Entity instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllMentionOf_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Entity.MENTIONOF, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'SpecializationOf' to this Entity instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSpecializationOf_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Entity.SPECIALIZATIONOF, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'SpecializationOf' to this Entity instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSpecializationOf_Inverse() {
		return Base.getAll_Inverse(this.model, Entity.SPECIALIZATIONOF, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'SpecializationOf' to this Entity instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllSpecializationOf_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Entity.SPECIALIZATIONOF, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'WasDerivedFrom' to this Entity instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllWasDerivedFrom_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Entity.WASDERIVEDFROM, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'WasDerivedFrom' to this Entity instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllWasDerivedFrom_Inverse() {
		return Base.getAll_Inverse(this.model, Entity.WASDERIVEDFROM, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'WasDerivedFrom' to this Entity instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllWasDerivedFrom_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Entity.WASDERIVEDFROM, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'WasQuotedFrom' to this Entity instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllWasQuotedFrom_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Entity.WASQUOTEDFROM, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'WasQuotedFrom' to this Entity instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllWasQuotedFrom_Inverse() {
		return Base.getAll_Inverse(this.model, Entity.WASQUOTEDFROM, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'WasQuotedFrom' to this Entity instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllWasQuotedFrom_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Entity.WASQUOTEDFROM, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'WasRevisionOf' to this Entity instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllWasRevisionOf_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Entity.WASREVISIONOF, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'WasRevisionOf' to this Entity instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllWasRevisionOf_Inverse() {
		return Base.getAll_Inverse(this.model, Entity.WASREVISIONOF, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'WasRevisionOf' to this Entity instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllWasRevisionOf_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Entity.WASREVISIONOF, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}



    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@41ac03 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasAlternateOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, ALTERNATEOF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@41ac03 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasAlternateOf() {
		return Base.has(this.model, this.getResource(), ALTERNATEOF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@41ac03 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasAlternateOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, ALTERNATEOF, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@41ac03 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasAlternateOf( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), ALTERNATEOF, value);
	}

     /**
     * Get all values of property AlternateOf as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllAlternateOf_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, ALTERNATEOF);
	}
	
    /**
     * Get all values of property AlternateOf as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllAlternateOf_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ALTERNATEOF, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property AlternateOf as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllAlternateOf_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), ALTERNATEOF);
	}

    /**
     * Get all values of property AlternateOf as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllAlternateOf_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), ALTERNATEOF, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property AlternateOf     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Entity> getAllAlternateOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, ALTERNATEOF, Entity.class);
	}
	
    /**
     * Get all values of property AlternateOf as a ReactorResult of Entity 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Entity> getAllAlternateOf_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ALTERNATEOF, Entity.class);
	}

    /**
     * Get all values of property AlternateOf     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Entity> getAllAlternateOf() {
		return Base.getAll(this.model, this.getResource(), ALTERNATEOF, Entity.class);
	}

    /**
     * Get all values of property AlternateOf as a ReactorResult of Entity 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Entity> getAllAlternateOf_as() {
		return Base.getAll_as(this.model, this.getResource(), ALTERNATEOF, Entity.class);
	}
 
    /**
     * Adds a value to property AlternateOf as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addAlternateOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, ALTERNATEOF, value);
	}
	
    /**
     * Adds a value to property AlternateOf as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addAlternateOf( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), ALTERNATEOF, value);
	}
    /**
     * Adds a value to property AlternateOf from an instance of Entity 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addAlternateOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Entity value) {
		Base.add(model, instanceResource, ALTERNATEOF, value);
	}
	
    /**
     * Adds a value to property AlternateOf from an instance of Entity 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addAlternateOf(Entity value) {
		Base.add(this.model, this.getResource(), ALTERNATEOF, value);
	}
  

    /**
     * Sets a value of property AlternateOf from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setAlternateOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, ALTERNATEOF, value);
	}
	
    /**
     * Sets a value of property AlternateOf from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setAlternateOf( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), ALTERNATEOF, value);
	}
    /**
     * Sets a value of property AlternateOf from an instance of Entity 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setAlternateOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Entity value) {
		Base.set(model, instanceResource, ALTERNATEOF, value);
	}
	
    /**
     * Sets a value of property AlternateOf from an instance of Entity 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setAlternateOf(Entity value) {
		Base.set(this.model, this.getResource(), ALTERNATEOF, value);
	}
  


    /**
     * Removes a value of property AlternateOf as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeAlternateOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, ALTERNATEOF, value);
	}
	
    /**
     * Removes a value of property AlternateOf as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeAlternateOf( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), ALTERNATEOF, value);
	}
    /**
     * Removes a value of property AlternateOf given as an instance of Entity 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeAlternateOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Entity value) {
		Base.remove(model, instanceResource, ALTERNATEOF, value);
	}
	
    /**
     * Removes a value of property AlternateOf given as an instance of Entity 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeAlternateOf(Entity value) {
		Base.remove(this.model, this.getResource(), ALTERNATEOF, value);
	}
  
    /**
     * Removes all values of property AlternateOf     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllAlternateOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, ALTERNATEOF);
	}
	
    /**
     * Removes all values of property AlternateOf	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllAlternateOf() {
		Base.removeAll(this.model, this.getResource(), ALTERNATEOF);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@c8eb2 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasAsInBundle(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, ASINBUNDLE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@c8eb2 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasAsInBundle() {
		return Base.has(this.model, this.getResource(), ASINBUNDLE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@c8eb2 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasAsInBundle(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, ASINBUNDLE, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@c8eb2 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasAsInBundle( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), ASINBUNDLE, value);
	}

     /**
     * Get all values of property AsInBundle as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllAsInBundle_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, ASINBUNDLE);
	}
	
    /**
     * Get all values of property AsInBundle as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllAsInBundle_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ASINBUNDLE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property AsInBundle as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllAsInBundle_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), ASINBUNDLE);
	}

    /**
     * Get all values of property AsInBundle as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllAsInBundle_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), ASINBUNDLE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property AsInBundle     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Bundle> getAllAsInBundle(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, ASINBUNDLE, Bundle.class);
	}
	
    /**
     * Get all values of property AsInBundle as a ReactorResult of Bundle 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Bundle> getAllAsInBundle_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ASINBUNDLE, Bundle.class);
	}

    /**
     * Get all values of property AsInBundle     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Bundle> getAllAsInBundle() {
		return Base.getAll(this.model, this.getResource(), ASINBUNDLE, Bundle.class);
	}

    /**
     * Get all values of property AsInBundle as a ReactorResult of Bundle 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Bundle> getAllAsInBundle_as() {
		return Base.getAll_as(this.model, this.getResource(), ASINBUNDLE, Bundle.class);
	}
 
    /**
     * Adds a value to property AsInBundle as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addAsInBundle( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, ASINBUNDLE, value);
	}
	
    /**
     * Adds a value to property AsInBundle as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addAsInBundle( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), ASINBUNDLE, value);
	}
    /**
     * Adds a value to property AsInBundle from an instance of Bundle 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addAsInBundle(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Bundle value) {
		Base.add(model, instanceResource, ASINBUNDLE, value);
	}
	
    /**
     * Adds a value to property AsInBundle from an instance of Bundle 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addAsInBundle(Bundle value) {
		Base.add(this.model, this.getResource(), ASINBUNDLE, value);
	}
  

    /**
     * Sets a value of property AsInBundle from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setAsInBundle( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, ASINBUNDLE, value);
	}
	
    /**
     * Sets a value of property AsInBundle from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setAsInBundle( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), ASINBUNDLE, value);
	}
    /**
     * Sets a value of property AsInBundle from an instance of Bundle 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setAsInBundle(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Bundle value) {
		Base.set(model, instanceResource, ASINBUNDLE, value);
	}
	
    /**
     * Sets a value of property AsInBundle from an instance of Bundle 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setAsInBundle(Bundle value) {
		Base.set(this.model, this.getResource(), ASINBUNDLE, value);
	}
  


    /**
     * Removes a value of property AsInBundle as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeAsInBundle( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, ASINBUNDLE, value);
	}
	
    /**
     * Removes a value of property AsInBundle as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeAsInBundle( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), ASINBUNDLE, value);
	}
    /**
     * Removes a value of property AsInBundle given as an instance of Bundle 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeAsInBundle(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Bundle value) {
		Base.remove(model, instanceResource, ASINBUNDLE, value);
	}
	
    /**
     * Removes a value of property AsInBundle given as an instance of Bundle 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeAsInBundle(Bundle value) {
		Base.remove(this.model, this.getResource(), ASINBUNDLE, value);
	}
  
    /**
     * Removes all values of property AsInBundle     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllAsInBundle( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, ASINBUNDLE);
	}
	
    /**
     * Removes all values of property AsInBundle	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllAsInBundle() {
		Base.removeAll(this.model, this.getResource(), ASINBUNDLE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@c9fefa has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasGeneratedAtTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, GENERATEDATTIME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@c9fefa has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasGeneratedAtTime() {
		return Base.has(this.model, this.getResource(), GENERATEDATTIME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@c9fefa has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasGeneratedAtTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, GENERATEDATTIME, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@c9fefa has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasGeneratedAtTime( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), GENERATEDATTIME, value);
	}

     /**
     * Get all values of property GeneratedAtTime as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllGeneratedAtTime_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, GENERATEDATTIME);
	}
	
    /**
     * Get all values of property GeneratedAtTime as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllGeneratedAtTime_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, GENERATEDATTIME, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property GeneratedAtTime as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllGeneratedAtTime_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), GENERATEDATTIME);
	}

    /**
     * Get all values of property GeneratedAtTime as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllGeneratedAtTime_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), GENERATEDATTIME, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property GeneratedAtTime     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.util.Calendar> getAllGeneratedAtTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, GENERATEDATTIME, java.util.Calendar.class);
	}
	
    /**
     * Get all values of property GeneratedAtTime as a ReactorResult of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.util.Calendar> getAllGeneratedAtTime_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, GENERATEDATTIME, java.util.Calendar.class);
	}

    /**
     * Get all values of property GeneratedAtTime     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.util.Calendar> getAllGeneratedAtTime() {
		return Base.getAll(this.model, this.getResource(), GENERATEDATTIME, java.util.Calendar.class);
	}

    /**
     * Get all values of property GeneratedAtTime as a ReactorResult of java.util.Calendar 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.util.Calendar> getAllGeneratedAtTime_as() {
		return Base.getAll_as(this.model, this.getResource(), GENERATEDATTIME, java.util.Calendar.class);
	}
 
    /**
     * Adds a value to property GeneratedAtTime as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addGeneratedAtTime( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, GENERATEDATTIME, value);
	}
	
    /**
     * Adds a value to property GeneratedAtTime as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addGeneratedAtTime( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), GENERATEDATTIME, value);
	}
    /**
     * Adds a value to property GeneratedAtTime from an instance of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addGeneratedAtTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.add(model, instanceResource, GENERATEDATTIME, value);
	}
	
    /**
     * Adds a value to property GeneratedAtTime from an instance of java.util.Calendar 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addGeneratedAtTime(java.util.Calendar value) {
		Base.add(this.model, this.getResource(), GENERATEDATTIME, value);
	}
  

    /**
     * Sets a value of property GeneratedAtTime from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setGeneratedAtTime( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, GENERATEDATTIME, value);
	}
	
    /**
     * Sets a value of property GeneratedAtTime from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setGeneratedAtTime( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), GENERATEDATTIME, value);
	}
    /**
     * Sets a value of property GeneratedAtTime from an instance of java.util.Calendar 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setGeneratedAtTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.set(model, instanceResource, GENERATEDATTIME, value);
	}
	
    /**
     * Sets a value of property GeneratedAtTime from an instance of java.util.Calendar 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setGeneratedAtTime(java.util.Calendar value) {
		Base.set(this.model, this.getResource(), GENERATEDATTIME, value);
	}
  


    /**
     * Removes a value of property GeneratedAtTime as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeGeneratedAtTime( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, GENERATEDATTIME, value);
	}
	
    /**
     * Removes a value of property GeneratedAtTime as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeGeneratedAtTime( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), GENERATEDATTIME, value);
	}
    /**
     * Removes a value of property GeneratedAtTime given as an instance of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeGeneratedAtTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.remove(model, instanceResource, GENERATEDATTIME, value);
	}
	
    /**
     * Removes a value of property GeneratedAtTime given as an instance of java.util.Calendar 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeGeneratedAtTime(java.util.Calendar value) {
		Base.remove(this.model, this.getResource(), GENERATEDATTIME, value);
	}
  
    /**
     * Removes all values of property GeneratedAtTime     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllGeneratedAtTime( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, GENERATEDATTIME);
	}
	
    /**
     * Removes all values of property GeneratedAtTime	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllGeneratedAtTime() {
		Base.removeAll(this.model, this.getResource(), GENERATEDATTIME);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@fec8bf has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasHadPrimarySource(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, HADPRIMARYSOURCE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@fec8bf has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasHadPrimarySource() {
		return Base.has(this.model, this.getResource(), HADPRIMARYSOURCE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@fec8bf has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasHadPrimarySource(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, HADPRIMARYSOURCE, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@fec8bf has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasHadPrimarySource( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), HADPRIMARYSOURCE, value);
	}

     /**
     * Get all values of property HadPrimarySource as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllHadPrimarySource_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, HADPRIMARYSOURCE);
	}
	
    /**
     * Get all values of property HadPrimarySource as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllHadPrimarySource_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, HADPRIMARYSOURCE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property HadPrimarySource as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllHadPrimarySource_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), HADPRIMARYSOURCE);
	}

    /**
     * Get all values of property HadPrimarySource as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllHadPrimarySource_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), HADPRIMARYSOURCE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property HadPrimarySource     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Entity> getAllHadPrimarySource(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, HADPRIMARYSOURCE, Entity.class);
	}
	
    /**
     * Get all values of property HadPrimarySource as a ReactorResult of Entity 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Entity> getAllHadPrimarySource_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, HADPRIMARYSOURCE, Entity.class);
	}

    /**
     * Get all values of property HadPrimarySource     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Entity> getAllHadPrimarySource() {
		return Base.getAll(this.model, this.getResource(), HADPRIMARYSOURCE, Entity.class);
	}

    /**
     * Get all values of property HadPrimarySource as a ReactorResult of Entity 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Entity> getAllHadPrimarySource_as() {
		return Base.getAll_as(this.model, this.getResource(), HADPRIMARYSOURCE, Entity.class);
	}
 
    /**
     * Adds a value to property HadPrimarySource as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addHadPrimarySource( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, HADPRIMARYSOURCE, value);
	}
	
    /**
     * Adds a value to property HadPrimarySource as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addHadPrimarySource( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), HADPRIMARYSOURCE, value);
	}
    /**
     * Adds a value to property HadPrimarySource from an instance of Entity 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addHadPrimarySource(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Entity value) {
		Base.add(model, instanceResource, HADPRIMARYSOURCE, value);
	}
	
    /**
     * Adds a value to property HadPrimarySource from an instance of Entity 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addHadPrimarySource(Entity value) {
		Base.add(this.model, this.getResource(), HADPRIMARYSOURCE, value);
	}
  

    /**
     * Sets a value of property HadPrimarySource from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setHadPrimarySource( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, HADPRIMARYSOURCE, value);
	}
	
    /**
     * Sets a value of property HadPrimarySource from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setHadPrimarySource( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), HADPRIMARYSOURCE, value);
	}
    /**
     * Sets a value of property HadPrimarySource from an instance of Entity 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setHadPrimarySource(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Entity value) {
		Base.set(model, instanceResource, HADPRIMARYSOURCE, value);
	}
	
    /**
     * Sets a value of property HadPrimarySource from an instance of Entity 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setHadPrimarySource(Entity value) {
		Base.set(this.model, this.getResource(), HADPRIMARYSOURCE, value);
	}
  


    /**
     * Removes a value of property HadPrimarySource as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeHadPrimarySource( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, HADPRIMARYSOURCE, value);
	}
	
    /**
     * Removes a value of property HadPrimarySource as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeHadPrimarySource( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), HADPRIMARYSOURCE, value);
	}
    /**
     * Removes a value of property HadPrimarySource given as an instance of Entity 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeHadPrimarySource(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Entity value) {
		Base.remove(model, instanceResource, HADPRIMARYSOURCE, value);
	}
	
    /**
     * Removes a value of property HadPrimarySource given as an instance of Entity 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeHadPrimarySource(Entity value) {
		Base.remove(this.model, this.getResource(), HADPRIMARYSOURCE, value);
	}
  
    /**
     * Removes all values of property HadPrimarySource     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllHadPrimarySource( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, HADPRIMARYSOURCE);
	}
	
    /**
     * Removes all values of property HadPrimarySource	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllHadPrimarySource() {
		Base.removeAll(this.model, this.getResource(), HADPRIMARYSOURCE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@8aa7f4 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasInvalidatedAtTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, INVALIDATEDATTIME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@8aa7f4 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasInvalidatedAtTime() {
		return Base.has(this.model, this.getResource(), INVALIDATEDATTIME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@8aa7f4 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasInvalidatedAtTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, INVALIDATEDATTIME, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@8aa7f4 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasInvalidatedAtTime( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), INVALIDATEDATTIME, value);
	}

     /**
     * Get all values of property InvalidatedAtTime as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllInvalidatedAtTime_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, INVALIDATEDATTIME);
	}
	
    /**
     * Get all values of property InvalidatedAtTime as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllInvalidatedAtTime_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, INVALIDATEDATTIME, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property InvalidatedAtTime as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllInvalidatedAtTime_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), INVALIDATEDATTIME);
	}

    /**
     * Get all values of property InvalidatedAtTime as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllInvalidatedAtTime_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), INVALIDATEDATTIME, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property InvalidatedAtTime     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.util.Calendar> getAllInvalidatedAtTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, INVALIDATEDATTIME, java.util.Calendar.class);
	}
	
    /**
     * Get all values of property InvalidatedAtTime as a ReactorResult of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.util.Calendar> getAllInvalidatedAtTime_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, INVALIDATEDATTIME, java.util.Calendar.class);
	}

    /**
     * Get all values of property InvalidatedAtTime     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.util.Calendar> getAllInvalidatedAtTime() {
		return Base.getAll(this.model, this.getResource(), INVALIDATEDATTIME, java.util.Calendar.class);
	}

    /**
     * Get all values of property InvalidatedAtTime as a ReactorResult of java.util.Calendar 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.util.Calendar> getAllInvalidatedAtTime_as() {
		return Base.getAll_as(this.model, this.getResource(), INVALIDATEDATTIME, java.util.Calendar.class);
	}
 
    /**
     * Adds a value to property InvalidatedAtTime as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addInvalidatedAtTime( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, INVALIDATEDATTIME, value);
	}
	
    /**
     * Adds a value to property InvalidatedAtTime as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addInvalidatedAtTime( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), INVALIDATEDATTIME, value);
	}
    /**
     * Adds a value to property InvalidatedAtTime from an instance of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addInvalidatedAtTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.add(model, instanceResource, INVALIDATEDATTIME, value);
	}
	
    /**
     * Adds a value to property InvalidatedAtTime from an instance of java.util.Calendar 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addInvalidatedAtTime(java.util.Calendar value) {
		Base.add(this.model, this.getResource(), INVALIDATEDATTIME, value);
	}
  

    /**
     * Sets a value of property InvalidatedAtTime from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setInvalidatedAtTime( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, INVALIDATEDATTIME, value);
	}
	
    /**
     * Sets a value of property InvalidatedAtTime from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setInvalidatedAtTime( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), INVALIDATEDATTIME, value);
	}
    /**
     * Sets a value of property InvalidatedAtTime from an instance of java.util.Calendar 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setInvalidatedAtTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.set(model, instanceResource, INVALIDATEDATTIME, value);
	}
	
    /**
     * Sets a value of property InvalidatedAtTime from an instance of java.util.Calendar 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setInvalidatedAtTime(java.util.Calendar value) {
		Base.set(this.model, this.getResource(), INVALIDATEDATTIME, value);
	}
  


    /**
     * Removes a value of property InvalidatedAtTime as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeInvalidatedAtTime( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, INVALIDATEDATTIME, value);
	}
	
    /**
     * Removes a value of property InvalidatedAtTime as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeInvalidatedAtTime( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), INVALIDATEDATTIME, value);
	}
    /**
     * Removes a value of property InvalidatedAtTime given as an instance of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeInvalidatedAtTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.remove(model, instanceResource, INVALIDATEDATTIME, value);
	}
	
    /**
     * Removes a value of property InvalidatedAtTime given as an instance of java.util.Calendar 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeInvalidatedAtTime(java.util.Calendar value) {
		Base.remove(this.model, this.getResource(), INVALIDATEDATTIME, value);
	}
  
    /**
     * Removes all values of property InvalidatedAtTime     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllInvalidatedAtTime( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, INVALIDATEDATTIME);
	}
	
    /**
     * Removes all values of property InvalidatedAtTime	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllInvalidatedAtTime() {
		Base.removeAll(this.model, this.getResource(), INVALIDATEDATTIME);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@69de7c has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasMentionOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, MENTIONOF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@69de7c has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasMentionOf() {
		return Base.has(this.model, this.getResource(), MENTIONOF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@69de7c has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasMentionOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, MENTIONOF, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@69de7c has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasMentionOf( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), MENTIONOF, value);
	}

     /**
     * Get all values of property MentionOf as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllMentionOf_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, MENTIONOF);
	}
	
    /**
     * Get all values of property MentionOf as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllMentionOf_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, MENTIONOF, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property MentionOf as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllMentionOf_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), MENTIONOF);
	}

    /**
     * Get all values of property MentionOf as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllMentionOf_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), MENTIONOF, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property MentionOf     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Entity> getAllMentionOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, MENTIONOF, Entity.class);
	}
	
    /**
     * Get all values of property MentionOf as a ReactorResult of Entity 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Entity> getAllMentionOf_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, MENTIONOF, Entity.class);
	}

    /**
     * Get all values of property MentionOf     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Entity> getAllMentionOf() {
		return Base.getAll(this.model, this.getResource(), MENTIONOF, Entity.class);
	}

    /**
     * Get all values of property MentionOf as a ReactorResult of Entity 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Entity> getAllMentionOf_as() {
		return Base.getAll_as(this.model, this.getResource(), MENTIONOF, Entity.class);
	}
 
    /**
     * Adds a value to property MentionOf as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addMentionOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, MENTIONOF, value);
	}
	
    /**
     * Adds a value to property MentionOf as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addMentionOf( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), MENTIONOF, value);
	}
    /**
     * Adds a value to property MentionOf from an instance of Entity 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addMentionOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Entity value) {
		Base.add(model, instanceResource, MENTIONOF, value);
	}
	
    /**
     * Adds a value to property MentionOf from an instance of Entity 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addMentionOf(Entity value) {
		Base.add(this.model, this.getResource(), MENTIONOF, value);
	}
  

    /**
     * Sets a value of property MentionOf from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setMentionOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, MENTIONOF, value);
	}
	
    /**
     * Sets a value of property MentionOf from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setMentionOf( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), MENTIONOF, value);
	}
    /**
     * Sets a value of property MentionOf from an instance of Entity 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setMentionOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Entity value) {
		Base.set(model, instanceResource, MENTIONOF, value);
	}
	
    /**
     * Sets a value of property MentionOf from an instance of Entity 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setMentionOf(Entity value) {
		Base.set(this.model, this.getResource(), MENTIONOF, value);
	}
  


    /**
     * Removes a value of property MentionOf as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeMentionOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, MENTIONOF, value);
	}
	
    /**
     * Removes a value of property MentionOf as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeMentionOf( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), MENTIONOF, value);
	}
    /**
     * Removes a value of property MentionOf given as an instance of Entity 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeMentionOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Entity value) {
		Base.remove(model, instanceResource, MENTIONOF, value);
	}
	
    /**
     * Removes a value of property MentionOf given as an instance of Entity 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeMentionOf(Entity value) {
		Base.remove(this.model, this.getResource(), MENTIONOF, value);
	}
  
    /**
     * Removes all values of property MentionOf     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllMentionOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, MENTIONOF);
	}
	
    /**
     * Removes all values of property MentionOf	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllMentionOf() {
		Base.removeAll(this.model, this.getResource(), MENTIONOF);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@19c0a9d has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasQualifiedAttribution(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, QUALIFIEDATTRIBUTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@19c0a9d has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasQualifiedAttribution() {
		return Base.has(this.model, this.getResource(), QUALIFIEDATTRIBUTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@19c0a9d has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasQualifiedAttribution(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, QUALIFIEDATTRIBUTION, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@19c0a9d has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasQualifiedAttribution( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), QUALIFIEDATTRIBUTION, value);
	}

     /**
     * Get all values of property QualifiedAttribution as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllQualifiedAttribution_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, QUALIFIEDATTRIBUTION);
	}
	
    /**
     * Get all values of property QualifiedAttribution as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllQualifiedAttribution_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, QUALIFIEDATTRIBUTION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property QualifiedAttribution as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllQualifiedAttribution_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), QUALIFIEDATTRIBUTION);
	}

    /**
     * Get all values of property QualifiedAttribution as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllQualifiedAttribution_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), QUALIFIEDATTRIBUTION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property QualifiedAttribution     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Attribution> getAllQualifiedAttribution(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, QUALIFIEDATTRIBUTION, Attribution.class);
	}
	
    /**
     * Get all values of property QualifiedAttribution as a ReactorResult of Attribution 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Attribution> getAllQualifiedAttribution_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, QUALIFIEDATTRIBUTION, Attribution.class);
	}

    /**
     * Get all values of property QualifiedAttribution     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Attribution> getAllQualifiedAttribution() {
		return Base.getAll(this.model, this.getResource(), QUALIFIEDATTRIBUTION, Attribution.class);
	}

    /**
     * Get all values of property QualifiedAttribution as a ReactorResult of Attribution 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Attribution> getAllQualifiedAttribution_as() {
		return Base.getAll_as(this.model, this.getResource(), QUALIFIEDATTRIBUTION, Attribution.class);
	}
 
    /**
     * Adds a value to property QualifiedAttribution as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addQualifiedAttribution( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, QUALIFIEDATTRIBUTION, value);
	}
	
    /**
     * Adds a value to property QualifiedAttribution as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addQualifiedAttribution( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), QUALIFIEDATTRIBUTION, value);
	}
    /**
     * Adds a value to property QualifiedAttribution from an instance of Attribution 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addQualifiedAttribution(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Attribution value) {
		Base.add(model, instanceResource, QUALIFIEDATTRIBUTION, value);
	}
	
    /**
     * Adds a value to property QualifiedAttribution from an instance of Attribution 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addQualifiedAttribution(Attribution value) {
		Base.add(this.model, this.getResource(), QUALIFIEDATTRIBUTION, value);
	}
  

    /**
     * Sets a value of property QualifiedAttribution from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setQualifiedAttribution( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, QUALIFIEDATTRIBUTION, value);
	}
	
    /**
     * Sets a value of property QualifiedAttribution from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setQualifiedAttribution( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), QUALIFIEDATTRIBUTION, value);
	}
    /**
     * Sets a value of property QualifiedAttribution from an instance of Attribution 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setQualifiedAttribution(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Attribution value) {
		Base.set(model, instanceResource, QUALIFIEDATTRIBUTION, value);
	}
	
    /**
     * Sets a value of property QualifiedAttribution from an instance of Attribution 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setQualifiedAttribution(Attribution value) {
		Base.set(this.model, this.getResource(), QUALIFIEDATTRIBUTION, value);
	}
  


    /**
     * Removes a value of property QualifiedAttribution as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeQualifiedAttribution( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, QUALIFIEDATTRIBUTION, value);
	}
	
    /**
     * Removes a value of property QualifiedAttribution as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeQualifiedAttribution( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), QUALIFIEDATTRIBUTION, value);
	}
    /**
     * Removes a value of property QualifiedAttribution given as an instance of Attribution 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeQualifiedAttribution(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Attribution value) {
		Base.remove(model, instanceResource, QUALIFIEDATTRIBUTION, value);
	}
	
    /**
     * Removes a value of property QualifiedAttribution given as an instance of Attribution 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeQualifiedAttribution(Attribution value) {
		Base.remove(this.model, this.getResource(), QUALIFIEDATTRIBUTION, value);
	}
  
    /**
     * Removes all values of property QualifiedAttribution     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllQualifiedAttribution( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, QUALIFIEDATTRIBUTION);
	}
	
    /**
     * Removes all values of property QualifiedAttribution	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllQualifiedAttribution() {
		Base.removeAll(this.model, this.getResource(), QUALIFIEDATTRIBUTION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@e21add has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasQualifiedDerivation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, QUALIFIEDDERIVATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@e21add has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasQualifiedDerivation() {
		return Base.has(this.model, this.getResource(), QUALIFIEDDERIVATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@e21add has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasQualifiedDerivation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, QUALIFIEDDERIVATION, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@e21add has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasQualifiedDerivation( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), QUALIFIEDDERIVATION, value);
	}

     /**
     * Get all values of property QualifiedDerivation as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllQualifiedDerivation_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, QUALIFIEDDERIVATION);
	}
	
    /**
     * Get all values of property QualifiedDerivation as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllQualifiedDerivation_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, QUALIFIEDDERIVATION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property QualifiedDerivation as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllQualifiedDerivation_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), QUALIFIEDDERIVATION);
	}

    /**
     * Get all values of property QualifiedDerivation as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllQualifiedDerivation_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), QUALIFIEDDERIVATION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property QualifiedDerivation     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Derivation> getAllQualifiedDerivation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, QUALIFIEDDERIVATION, Derivation.class);
	}
	
    /**
     * Get all values of property QualifiedDerivation as a ReactorResult of Derivation 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Derivation> getAllQualifiedDerivation_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, QUALIFIEDDERIVATION, Derivation.class);
	}

    /**
     * Get all values of property QualifiedDerivation     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Derivation> getAllQualifiedDerivation() {
		return Base.getAll(this.model, this.getResource(), QUALIFIEDDERIVATION, Derivation.class);
	}

    /**
     * Get all values of property QualifiedDerivation as a ReactorResult of Derivation 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Derivation> getAllQualifiedDerivation_as() {
		return Base.getAll_as(this.model, this.getResource(), QUALIFIEDDERIVATION, Derivation.class);
	}
 
    /**
     * Adds a value to property QualifiedDerivation as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addQualifiedDerivation( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, QUALIFIEDDERIVATION, value);
	}
	
    /**
     * Adds a value to property QualifiedDerivation as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addQualifiedDerivation( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), QUALIFIEDDERIVATION, value);
	}
    /**
     * Adds a value to property QualifiedDerivation from an instance of Derivation 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addQualifiedDerivation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Derivation value) {
		Base.add(model, instanceResource, QUALIFIEDDERIVATION, value);
	}
	
    /**
     * Adds a value to property QualifiedDerivation from an instance of Derivation 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addQualifiedDerivation(Derivation value) {
		Base.add(this.model, this.getResource(), QUALIFIEDDERIVATION, value);
	}
  

    /**
     * Sets a value of property QualifiedDerivation from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setQualifiedDerivation( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, QUALIFIEDDERIVATION, value);
	}
	
    /**
     * Sets a value of property QualifiedDerivation from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setQualifiedDerivation( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), QUALIFIEDDERIVATION, value);
	}
    /**
     * Sets a value of property QualifiedDerivation from an instance of Derivation 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setQualifiedDerivation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Derivation value) {
		Base.set(model, instanceResource, QUALIFIEDDERIVATION, value);
	}
	
    /**
     * Sets a value of property QualifiedDerivation from an instance of Derivation 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setQualifiedDerivation(Derivation value) {
		Base.set(this.model, this.getResource(), QUALIFIEDDERIVATION, value);
	}
  


    /**
     * Removes a value of property QualifiedDerivation as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeQualifiedDerivation( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, QUALIFIEDDERIVATION, value);
	}
	
    /**
     * Removes a value of property QualifiedDerivation as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeQualifiedDerivation( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), QUALIFIEDDERIVATION, value);
	}
    /**
     * Removes a value of property QualifiedDerivation given as an instance of Derivation 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeQualifiedDerivation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Derivation value) {
		Base.remove(model, instanceResource, QUALIFIEDDERIVATION, value);
	}
	
    /**
     * Removes a value of property QualifiedDerivation given as an instance of Derivation 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeQualifiedDerivation(Derivation value) {
		Base.remove(this.model, this.getResource(), QUALIFIEDDERIVATION, value);
	}
  
    /**
     * Removes all values of property QualifiedDerivation     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllQualifiedDerivation( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, QUALIFIEDDERIVATION);
	}
	
    /**
     * Removes all values of property QualifiedDerivation	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllQualifiedDerivation() {
		Base.removeAll(this.model, this.getResource(), QUALIFIEDDERIVATION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1e152b7 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasQualifiedGeneration(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, QUALIFIEDGENERATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1e152b7 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasQualifiedGeneration() {
		return Base.has(this.model, this.getResource(), QUALIFIEDGENERATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1e152b7 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasQualifiedGeneration(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, QUALIFIEDGENERATION, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1e152b7 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasQualifiedGeneration( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), QUALIFIEDGENERATION, value);
	}

     /**
     * Get all values of property QualifiedGeneration as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllQualifiedGeneration_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, QUALIFIEDGENERATION);
	}
	
    /**
     * Get all values of property QualifiedGeneration as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllQualifiedGeneration_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, QUALIFIEDGENERATION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property QualifiedGeneration as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllQualifiedGeneration_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), QUALIFIEDGENERATION);
	}

    /**
     * Get all values of property QualifiedGeneration as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllQualifiedGeneration_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), QUALIFIEDGENERATION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property QualifiedGeneration     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Generation> getAllQualifiedGeneration(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, QUALIFIEDGENERATION, Generation.class);
	}
	
    /**
     * Get all values of property QualifiedGeneration as a ReactorResult of Generation 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Generation> getAllQualifiedGeneration_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, QUALIFIEDGENERATION, Generation.class);
	}

    /**
     * Get all values of property QualifiedGeneration     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Generation> getAllQualifiedGeneration() {
		return Base.getAll(this.model, this.getResource(), QUALIFIEDGENERATION, Generation.class);
	}

    /**
     * Get all values of property QualifiedGeneration as a ReactorResult of Generation 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Generation> getAllQualifiedGeneration_as() {
		return Base.getAll_as(this.model, this.getResource(), QUALIFIEDGENERATION, Generation.class);
	}
 
    /**
     * Adds a value to property QualifiedGeneration as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addQualifiedGeneration( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, QUALIFIEDGENERATION, value);
	}
	
    /**
     * Adds a value to property QualifiedGeneration as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addQualifiedGeneration( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), QUALIFIEDGENERATION, value);
	}
    /**
     * Adds a value to property QualifiedGeneration from an instance of Generation 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addQualifiedGeneration(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Generation value) {
		Base.add(model, instanceResource, QUALIFIEDGENERATION, value);
	}
	
    /**
     * Adds a value to property QualifiedGeneration from an instance of Generation 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addQualifiedGeneration(Generation value) {
		Base.add(this.model, this.getResource(), QUALIFIEDGENERATION, value);
	}
  

    /**
     * Sets a value of property QualifiedGeneration from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setQualifiedGeneration( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, QUALIFIEDGENERATION, value);
	}
	
    /**
     * Sets a value of property QualifiedGeneration from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setQualifiedGeneration( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), QUALIFIEDGENERATION, value);
	}
    /**
     * Sets a value of property QualifiedGeneration from an instance of Generation 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setQualifiedGeneration(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Generation value) {
		Base.set(model, instanceResource, QUALIFIEDGENERATION, value);
	}
	
    /**
     * Sets a value of property QualifiedGeneration from an instance of Generation 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setQualifiedGeneration(Generation value) {
		Base.set(this.model, this.getResource(), QUALIFIEDGENERATION, value);
	}
  


    /**
     * Removes a value of property QualifiedGeneration as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeQualifiedGeneration( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, QUALIFIEDGENERATION, value);
	}
	
    /**
     * Removes a value of property QualifiedGeneration as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeQualifiedGeneration( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), QUALIFIEDGENERATION, value);
	}
    /**
     * Removes a value of property QualifiedGeneration given as an instance of Generation 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeQualifiedGeneration(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Generation value) {
		Base.remove(model, instanceResource, QUALIFIEDGENERATION, value);
	}
	
    /**
     * Removes a value of property QualifiedGeneration given as an instance of Generation 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeQualifiedGeneration(Generation value) {
		Base.remove(this.model, this.getResource(), QUALIFIEDGENERATION, value);
	}
  
    /**
     * Removes all values of property QualifiedGeneration     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllQualifiedGeneration( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, QUALIFIEDGENERATION);
	}
	
    /**
     * Removes all values of property QualifiedGeneration	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllQualifiedGeneration() {
		Base.removeAll(this.model, this.getResource(), QUALIFIEDGENERATION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2c0dbe has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasQualifiedInfluence(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, QUALIFIEDINFLUENCE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2c0dbe has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasQualifiedInfluence() {
		return Base.has(this.model, this.getResource(), QUALIFIEDINFLUENCE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2c0dbe has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasQualifiedInfluence(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, QUALIFIEDINFLUENCE, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2c0dbe has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasQualifiedInfluence( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), QUALIFIEDINFLUENCE, value);
	}

     /**
     * Get all values of property QualifiedInfluence as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllQualifiedInfluence_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, QUALIFIEDINFLUENCE);
	}
	
    /**
     * Get all values of property QualifiedInfluence as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllQualifiedInfluence_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, QUALIFIEDINFLUENCE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property QualifiedInfluence as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllQualifiedInfluence_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), QUALIFIEDINFLUENCE);
	}

    /**
     * Get all values of property QualifiedInfluence as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllQualifiedInfluence_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), QUALIFIEDINFLUENCE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property QualifiedInfluence     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Influence> getAllQualifiedInfluence(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, QUALIFIEDINFLUENCE, Influence.class);
	}
	
    /**
     * Get all values of property QualifiedInfluence as a ReactorResult of Influence 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Influence> getAllQualifiedInfluence_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, QUALIFIEDINFLUENCE, Influence.class);
	}

    /**
     * Get all values of property QualifiedInfluence     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Influence> getAllQualifiedInfluence() {
		return Base.getAll(this.model, this.getResource(), QUALIFIEDINFLUENCE, Influence.class);
	}

    /**
     * Get all values of property QualifiedInfluence as a ReactorResult of Influence 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Influence> getAllQualifiedInfluence_as() {
		return Base.getAll_as(this.model, this.getResource(), QUALIFIEDINFLUENCE, Influence.class);
	}
 
    /**
     * Adds a value to property QualifiedInfluence as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addQualifiedInfluence( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, QUALIFIEDINFLUENCE, value);
	}
	
    /**
     * Adds a value to property QualifiedInfluence as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addQualifiedInfluence( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), QUALIFIEDINFLUENCE, value);
	}
    /**
     * Adds a value to property QualifiedInfluence from an instance of Influence 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addQualifiedInfluence(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Influence value) {
		Base.add(model, instanceResource, QUALIFIEDINFLUENCE, value);
	}
	
    /**
     * Adds a value to property QualifiedInfluence from an instance of Influence 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addQualifiedInfluence(Influence value) {
		Base.add(this.model, this.getResource(), QUALIFIEDINFLUENCE, value);
	}
  

    /**
     * Sets a value of property QualifiedInfluence from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setQualifiedInfluence( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, QUALIFIEDINFLUENCE, value);
	}
	
    /**
     * Sets a value of property QualifiedInfluence from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setQualifiedInfluence( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), QUALIFIEDINFLUENCE, value);
	}
    /**
     * Sets a value of property QualifiedInfluence from an instance of Influence 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setQualifiedInfluence(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Influence value) {
		Base.set(model, instanceResource, QUALIFIEDINFLUENCE, value);
	}
	
    /**
     * Sets a value of property QualifiedInfluence from an instance of Influence 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setQualifiedInfluence(Influence value) {
		Base.set(this.model, this.getResource(), QUALIFIEDINFLUENCE, value);
	}
  


    /**
     * Removes a value of property QualifiedInfluence as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeQualifiedInfluence( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, QUALIFIEDINFLUENCE, value);
	}
	
    /**
     * Removes a value of property QualifiedInfluence as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeQualifiedInfluence( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), QUALIFIEDINFLUENCE, value);
	}
    /**
     * Removes a value of property QualifiedInfluence given as an instance of Influence 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeQualifiedInfluence(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Influence value) {
		Base.remove(model, instanceResource, QUALIFIEDINFLUENCE, value);
	}
	
    /**
     * Removes a value of property QualifiedInfluence given as an instance of Influence 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeQualifiedInfluence(Influence value) {
		Base.remove(this.model, this.getResource(), QUALIFIEDINFLUENCE, value);
	}
  
    /**
     * Removes all values of property QualifiedInfluence     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllQualifiedInfluence( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, QUALIFIEDINFLUENCE);
	}
	
    /**
     * Removes all values of property QualifiedInfluence	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllQualifiedInfluence() {
		Base.removeAll(this.model, this.getResource(), QUALIFIEDINFLUENCE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@77f21c has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasQualifiedInvalidation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, QUALIFIEDINVALIDATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@77f21c has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasQualifiedInvalidation() {
		return Base.has(this.model, this.getResource(), QUALIFIEDINVALIDATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@77f21c has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasQualifiedInvalidation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, QUALIFIEDINVALIDATION, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@77f21c has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasQualifiedInvalidation( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), QUALIFIEDINVALIDATION, value);
	}

     /**
     * Get all values of property QualifiedInvalidation as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllQualifiedInvalidation_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, QUALIFIEDINVALIDATION);
	}
	
    /**
     * Get all values of property QualifiedInvalidation as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllQualifiedInvalidation_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, QUALIFIEDINVALIDATION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property QualifiedInvalidation as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllQualifiedInvalidation_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), QUALIFIEDINVALIDATION);
	}

    /**
     * Get all values of property QualifiedInvalidation as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllQualifiedInvalidation_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), QUALIFIEDINVALIDATION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property QualifiedInvalidation     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Invalidation> getAllQualifiedInvalidation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, QUALIFIEDINVALIDATION, Invalidation.class);
	}
	
    /**
     * Get all values of property QualifiedInvalidation as a ReactorResult of Invalidation 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Invalidation> getAllQualifiedInvalidation_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, QUALIFIEDINVALIDATION, Invalidation.class);
	}

    /**
     * Get all values of property QualifiedInvalidation     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Invalidation> getAllQualifiedInvalidation() {
		return Base.getAll(this.model, this.getResource(), QUALIFIEDINVALIDATION, Invalidation.class);
	}

    /**
     * Get all values of property QualifiedInvalidation as a ReactorResult of Invalidation 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Invalidation> getAllQualifiedInvalidation_as() {
		return Base.getAll_as(this.model, this.getResource(), QUALIFIEDINVALIDATION, Invalidation.class);
	}
 
    /**
     * Adds a value to property QualifiedInvalidation as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addQualifiedInvalidation( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, QUALIFIEDINVALIDATION, value);
	}
	
    /**
     * Adds a value to property QualifiedInvalidation as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addQualifiedInvalidation( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), QUALIFIEDINVALIDATION, value);
	}
    /**
     * Adds a value to property QualifiedInvalidation from an instance of Invalidation 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addQualifiedInvalidation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Invalidation value) {
		Base.add(model, instanceResource, QUALIFIEDINVALIDATION, value);
	}
	
    /**
     * Adds a value to property QualifiedInvalidation from an instance of Invalidation 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addQualifiedInvalidation(Invalidation value) {
		Base.add(this.model, this.getResource(), QUALIFIEDINVALIDATION, value);
	}
  

    /**
     * Sets a value of property QualifiedInvalidation from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setQualifiedInvalidation( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, QUALIFIEDINVALIDATION, value);
	}
	
    /**
     * Sets a value of property QualifiedInvalidation from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setQualifiedInvalidation( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), QUALIFIEDINVALIDATION, value);
	}
    /**
     * Sets a value of property QualifiedInvalidation from an instance of Invalidation 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setQualifiedInvalidation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Invalidation value) {
		Base.set(model, instanceResource, QUALIFIEDINVALIDATION, value);
	}
	
    /**
     * Sets a value of property QualifiedInvalidation from an instance of Invalidation 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setQualifiedInvalidation(Invalidation value) {
		Base.set(this.model, this.getResource(), QUALIFIEDINVALIDATION, value);
	}
  


    /**
     * Removes a value of property QualifiedInvalidation as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeQualifiedInvalidation( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, QUALIFIEDINVALIDATION, value);
	}
	
    /**
     * Removes a value of property QualifiedInvalidation as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeQualifiedInvalidation( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), QUALIFIEDINVALIDATION, value);
	}
    /**
     * Removes a value of property QualifiedInvalidation given as an instance of Invalidation 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeQualifiedInvalidation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Invalidation value) {
		Base.remove(model, instanceResource, QUALIFIEDINVALIDATION, value);
	}
	
    /**
     * Removes a value of property QualifiedInvalidation given as an instance of Invalidation 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeQualifiedInvalidation(Invalidation value) {
		Base.remove(this.model, this.getResource(), QUALIFIEDINVALIDATION, value);
	}
  
    /**
     * Removes all values of property QualifiedInvalidation     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllQualifiedInvalidation( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, QUALIFIEDINVALIDATION);
	}
	
    /**
     * Removes all values of property QualifiedInvalidation	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllQualifiedInvalidation() {
		Base.removeAll(this.model, this.getResource(), QUALIFIEDINVALIDATION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@20fcab has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasQualifiedQuotation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, QUALIFIEDQUOTATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@20fcab has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasQualifiedQuotation() {
		return Base.has(this.model, this.getResource(), QUALIFIEDQUOTATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@20fcab has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasQualifiedQuotation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, QUALIFIEDQUOTATION, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@20fcab has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasQualifiedQuotation( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), QUALIFIEDQUOTATION, value);
	}

     /**
     * Get all values of property QualifiedQuotation as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllQualifiedQuotation_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, QUALIFIEDQUOTATION);
	}
	
    /**
     * Get all values of property QualifiedQuotation as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllQualifiedQuotation_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, QUALIFIEDQUOTATION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property QualifiedQuotation as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllQualifiedQuotation_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), QUALIFIEDQUOTATION);
	}

    /**
     * Get all values of property QualifiedQuotation as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllQualifiedQuotation_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), QUALIFIEDQUOTATION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property QualifiedQuotation     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Quotation> getAllQualifiedQuotation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, QUALIFIEDQUOTATION, Quotation.class);
	}
	
    /**
     * Get all values of property QualifiedQuotation as a ReactorResult of Quotation 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Quotation> getAllQualifiedQuotation_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, QUALIFIEDQUOTATION, Quotation.class);
	}

    /**
     * Get all values of property QualifiedQuotation     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Quotation> getAllQualifiedQuotation() {
		return Base.getAll(this.model, this.getResource(), QUALIFIEDQUOTATION, Quotation.class);
	}

    /**
     * Get all values of property QualifiedQuotation as a ReactorResult of Quotation 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Quotation> getAllQualifiedQuotation_as() {
		return Base.getAll_as(this.model, this.getResource(), QUALIFIEDQUOTATION, Quotation.class);
	}
 
    /**
     * Adds a value to property QualifiedQuotation as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addQualifiedQuotation( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, QUALIFIEDQUOTATION, value);
	}
	
    /**
     * Adds a value to property QualifiedQuotation as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addQualifiedQuotation( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), QUALIFIEDQUOTATION, value);
	}
    /**
     * Adds a value to property QualifiedQuotation from an instance of Quotation 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addQualifiedQuotation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Quotation value) {
		Base.add(model, instanceResource, QUALIFIEDQUOTATION, value);
	}
	
    /**
     * Adds a value to property QualifiedQuotation from an instance of Quotation 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addQualifiedQuotation(Quotation value) {
		Base.add(this.model, this.getResource(), QUALIFIEDQUOTATION, value);
	}
  

    /**
     * Sets a value of property QualifiedQuotation from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setQualifiedQuotation( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, QUALIFIEDQUOTATION, value);
	}
	
    /**
     * Sets a value of property QualifiedQuotation from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setQualifiedQuotation( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), QUALIFIEDQUOTATION, value);
	}
    /**
     * Sets a value of property QualifiedQuotation from an instance of Quotation 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setQualifiedQuotation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Quotation value) {
		Base.set(model, instanceResource, QUALIFIEDQUOTATION, value);
	}
	
    /**
     * Sets a value of property QualifiedQuotation from an instance of Quotation 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setQualifiedQuotation(Quotation value) {
		Base.set(this.model, this.getResource(), QUALIFIEDQUOTATION, value);
	}
  


    /**
     * Removes a value of property QualifiedQuotation as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeQualifiedQuotation( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, QUALIFIEDQUOTATION, value);
	}
	
    /**
     * Removes a value of property QualifiedQuotation as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeQualifiedQuotation( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), QUALIFIEDQUOTATION, value);
	}
    /**
     * Removes a value of property QualifiedQuotation given as an instance of Quotation 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeQualifiedQuotation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Quotation value) {
		Base.remove(model, instanceResource, QUALIFIEDQUOTATION, value);
	}
	
    /**
     * Removes a value of property QualifiedQuotation given as an instance of Quotation 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeQualifiedQuotation(Quotation value) {
		Base.remove(this.model, this.getResource(), QUALIFIEDQUOTATION, value);
	}
  
    /**
     * Removes all values of property QualifiedQuotation     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllQualifiedQuotation( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, QUALIFIEDQUOTATION);
	}
	
    /**
     * Removes all values of property QualifiedQuotation	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllQualifiedQuotation() {
		Base.removeAll(this.model, this.getResource(), QUALIFIEDQUOTATION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@24c518 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasQualifiedRevision(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, QUALIFIEDREVISION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@24c518 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasQualifiedRevision() {
		return Base.has(this.model, this.getResource(), QUALIFIEDREVISION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@24c518 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasQualifiedRevision(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, QUALIFIEDREVISION, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@24c518 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasQualifiedRevision( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), QUALIFIEDREVISION, value);
	}

     /**
     * Get all values of property QualifiedRevision as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllQualifiedRevision_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, QUALIFIEDREVISION);
	}
	
    /**
     * Get all values of property QualifiedRevision as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllQualifiedRevision_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, QUALIFIEDREVISION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property QualifiedRevision as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllQualifiedRevision_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), QUALIFIEDREVISION);
	}

    /**
     * Get all values of property QualifiedRevision as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllQualifiedRevision_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), QUALIFIEDREVISION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property QualifiedRevision     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Revision> getAllQualifiedRevision(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, QUALIFIEDREVISION, Revision.class);
	}
	
    /**
     * Get all values of property QualifiedRevision as a ReactorResult of Revision 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Revision> getAllQualifiedRevision_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, QUALIFIEDREVISION, Revision.class);
	}

    /**
     * Get all values of property QualifiedRevision     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Revision> getAllQualifiedRevision() {
		return Base.getAll(this.model, this.getResource(), QUALIFIEDREVISION, Revision.class);
	}

    /**
     * Get all values of property QualifiedRevision as a ReactorResult of Revision 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Revision> getAllQualifiedRevision_as() {
		return Base.getAll_as(this.model, this.getResource(), QUALIFIEDREVISION, Revision.class);
	}
 
    /**
     * Adds a value to property QualifiedRevision as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addQualifiedRevision( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, QUALIFIEDREVISION, value);
	}
	
    /**
     * Adds a value to property QualifiedRevision as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addQualifiedRevision( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), QUALIFIEDREVISION, value);
	}
    /**
     * Adds a value to property QualifiedRevision from an instance of Revision 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addQualifiedRevision(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Revision value) {
		Base.add(model, instanceResource, QUALIFIEDREVISION, value);
	}
	
    /**
     * Adds a value to property QualifiedRevision from an instance of Revision 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addQualifiedRevision(Revision value) {
		Base.add(this.model, this.getResource(), QUALIFIEDREVISION, value);
	}
  

    /**
     * Sets a value of property QualifiedRevision from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setQualifiedRevision( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, QUALIFIEDREVISION, value);
	}
	
    /**
     * Sets a value of property QualifiedRevision from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setQualifiedRevision( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), QUALIFIEDREVISION, value);
	}
    /**
     * Sets a value of property QualifiedRevision from an instance of Revision 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setQualifiedRevision(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Revision value) {
		Base.set(model, instanceResource, QUALIFIEDREVISION, value);
	}
	
    /**
     * Sets a value of property QualifiedRevision from an instance of Revision 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setQualifiedRevision(Revision value) {
		Base.set(this.model, this.getResource(), QUALIFIEDREVISION, value);
	}
  


    /**
     * Removes a value of property QualifiedRevision as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeQualifiedRevision( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, QUALIFIEDREVISION, value);
	}
	
    /**
     * Removes a value of property QualifiedRevision as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeQualifiedRevision( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), QUALIFIEDREVISION, value);
	}
    /**
     * Removes a value of property QualifiedRevision given as an instance of Revision 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeQualifiedRevision(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Revision value) {
		Base.remove(model, instanceResource, QUALIFIEDREVISION, value);
	}
	
    /**
     * Removes a value of property QualifiedRevision given as an instance of Revision 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeQualifiedRevision(Revision value) {
		Base.remove(this.model, this.getResource(), QUALIFIEDREVISION, value);
	}
  
    /**
     * Removes all values of property QualifiedRevision     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllQualifiedRevision( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, QUALIFIEDREVISION);
	}
	
    /**
     * Removes all values of property QualifiedRevision	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllQualifiedRevision() {
		Base.removeAll(this.model, this.getResource(), QUALIFIEDREVISION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@168bc8d has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasQualifiedSource(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, QUALIFIEDSOURCE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@168bc8d has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasQualifiedSource() {
		return Base.has(this.model, this.getResource(), QUALIFIEDSOURCE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@168bc8d has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasQualifiedSource(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, QUALIFIEDSOURCE, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@168bc8d has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasQualifiedSource( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), QUALIFIEDSOURCE, value);
	}

     /**
     * Get all values of property QualifiedSource as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllQualifiedSource_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, QUALIFIEDSOURCE);
	}
	
    /**
     * Get all values of property QualifiedSource as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllQualifiedSource_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, QUALIFIEDSOURCE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property QualifiedSource as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllQualifiedSource_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), QUALIFIEDSOURCE);
	}

    /**
     * Get all values of property QualifiedSource as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllQualifiedSource_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), QUALIFIEDSOURCE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property QualifiedSource     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Source> getAllQualifiedSource(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, QUALIFIEDSOURCE, Source.class);
	}
	
    /**
     * Get all values of property QualifiedSource as a ReactorResult of Source 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Source> getAllQualifiedSource_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, QUALIFIEDSOURCE, Source.class);
	}

    /**
     * Get all values of property QualifiedSource     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Source> getAllQualifiedSource() {
		return Base.getAll(this.model, this.getResource(), QUALIFIEDSOURCE, Source.class);
	}

    /**
     * Get all values of property QualifiedSource as a ReactorResult of Source 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Source> getAllQualifiedSource_as() {
		return Base.getAll_as(this.model, this.getResource(), QUALIFIEDSOURCE, Source.class);
	}
 
    /**
     * Adds a value to property QualifiedSource as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addQualifiedSource( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, QUALIFIEDSOURCE, value);
	}
	
    /**
     * Adds a value to property QualifiedSource as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addQualifiedSource( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), QUALIFIEDSOURCE, value);
	}
    /**
     * Adds a value to property QualifiedSource from an instance of Source 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addQualifiedSource(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Source value) {
		Base.add(model, instanceResource, QUALIFIEDSOURCE, value);
	}
	
    /**
     * Adds a value to property QualifiedSource from an instance of Source 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addQualifiedSource(Source value) {
		Base.add(this.model, this.getResource(), QUALIFIEDSOURCE, value);
	}
  

    /**
     * Sets a value of property QualifiedSource from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setQualifiedSource( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, QUALIFIEDSOURCE, value);
	}
	
    /**
     * Sets a value of property QualifiedSource from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setQualifiedSource( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), QUALIFIEDSOURCE, value);
	}
    /**
     * Sets a value of property QualifiedSource from an instance of Source 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setQualifiedSource(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Source value) {
		Base.set(model, instanceResource, QUALIFIEDSOURCE, value);
	}
	
    /**
     * Sets a value of property QualifiedSource from an instance of Source 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setQualifiedSource(Source value) {
		Base.set(this.model, this.getResource(), QUALIFIEDSOURCE, value);
	}
  


    /**
     * Removes a value of property QualifiedSource as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeQualifiedSource( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, QUALIFIEDSOURCE, value);
	}
	
    /**
     * Removes a value of property QualifiedSource as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeQualifiedSource( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), QUALIFIEDSOURCE, value);
	}
    /**
     * Removes a value of property QualifiedSource given as an instance of Source 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeQualifiedSource(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Source value) {
		Base.remove(model, instanceResource, QUALIFIEDSOURCE, value);
	}
	
    /**
     * Removes a value of property QualifiedSource given as an instance of Source 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeQualifiedSource(Source value) {
		Base.remove(this.model, this.getResource(), QUALIFIEDSOURCE, value);
	}
  
    /**
     * Removes all values of property QualifiedSource     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllQualifiedSource( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, QUALIFIEDSOURCE);
	}
	
    /**
     * Removes all values of property QualifiedSource	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllQualifiedSource() {
		Base.removeAll(this.model, this.getResource(), QUALIFIEDSOURCE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3d8b15 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSpecializationOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, SPECIALIZATIONOF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3d8b15 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSpecializationOf() {
		return Base.has(this.model, this.getResource(), SPECIALIZATIONOF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3d8b15 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSpecializationOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, SPECIALIZATIONOF, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3d8b15 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSpecializationOf( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), SPECIALIZATIONOF, value);
	}

     /**
     * Get all values of property SpecializationOf as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSpecializationOf_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SPECIALIZATIONOF);
	}
	
    /**
     * Get all values of property SpecializationOf as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSpecializationOf_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SPECIALIZATIONOF, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property SpecializationOf as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSpecializationOf_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SPECIALIZATIONOF);
	}

    /**
     * Get all values of property SpecializationOf as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSpecializationOf_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SPECIALIZATIONOF, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property SpecializationOf     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Entity> getAllSpecializationOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, SPECIALIZATIONOF, Entity.class);
	}
	
    /**
     * Get all values of property SpecializationOf as a ReactorResult of Entity 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Entity> getAllSpecializationOf_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SPECIALIZATIONOF, Entity.class);
	}

    /**
     * Get all values of property SpecializationOf     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Entity> getAllSpecializationOf() {
		return Base.getAll(this.model, this.getResource(), SPECIALIZATIONOF, Entity.class);
	}

    /**
     * Get all values of property SpecializationOf as a ReactorResult of Entity 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Entity> getAllSpecializationOf_as() {
		return Base.getAll_as(this.model, this.getResource(), SPECIALIZATIONOF, Entity.class);
	}
 
    /**
     * Adds a value to property SpecializationOf as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSpecializationOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, SPECIALIZATIONOF, value);
	}
	
    /**
     * Adds a value to property SpecializationOf as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSpecializationOf( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), SPECIALIZATIONOF, value);
	}
    /**
     * Adds a value to property SpecializationOf from an instance of Entity 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSpecializationOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Entity value) {
		Base.add(model, instanceResource, SPECIALIZATIONOF, value);
	}
	
    /**
     * Adds a value to property SpecializationOf from an instance of Entity 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSpecializationOf(Entity value) {
		Base.add(this.model, this.getResource(), SPECIALIZATIONOF, value);
	}
  

    /**
     * Sets a value of property SpecializationOf from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSpecializationOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, SPECIALIZATIONOF, value);
	}
	
    /**
     * Sets a value of property SpecializationOf from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSpecializationOf( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), SPECIALIZATIONOF, value);
	}
    /**
     * Sets a value of property SpecializationOf from an instance of Entity 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSpecializationOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Entity value) {
		Base.set(model, instanceResource, SPECIALIZATIONOF, value);
	}
	
    /**
     * Sets a value of property SpecializationOf from an instance of Entity 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSpecializationOf(Entity value) {
		Base.set(this.model, this.getResource(), SPECIALIZATIONOF, value);
	}
  


    /**
     * Removes a value of property SpecializationOf as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSpecializationOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, SPECIALIZATIONOF, value);
	}
	
    /**
     * Removes a value of property SpecializationOf as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSpecializationOf( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), SPECIALIZATIONOF, value);
	}
    /**
     * Removes a value of property SpecializationOf given as an instance of Entity 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSpecializationOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Entity value) {
		Base.remove(model, instanceResource, SPECIALIZATIONOF, value);
	}
	
    /**
     * Removes a value of property SpecializationOf given as an instance of Entity 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSpecializationOf(Entity value) {
		Base.remove(this.model, this.getResource(), SPECIALIZATIONOF, value);
	}
  
    /**
     * Removes all values of property SpecializationOf     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSpecializationOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, SPECIALIZATIONOF);
	}
	
    /**
     * Removes all values of property SpecializationOf	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSpecializationOf() {
		Base.removeAll(this.model, this.getResource(), SPECIALIZATIONOF);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@14c491b has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasValue(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, VALUE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@14c491b has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasValue() {
		return Base.has(this.model, this.getResource(), VALUE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@14c491b has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasValue(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, VALUE, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@14c491b has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasValue( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), VALUE, value);
	}

     /**
     * Get all values of property Value as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllValue_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, VALUE);
	}
	
    /**
     * Get all values of property Value as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllValue_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, VALUE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Value as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllValue_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), VALUE);
	}

    /**
     * Get all values of property Value as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllValue_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), VALUE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Value     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllValue(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, VALUE, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}
	
    /**
     * Get all values of property Value as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllValue_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, VALUE, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}

    /**
     * Get all values of property Value     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllValue() {
		return Base.getAll(this.model, this.getResource(), VALUE, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}

    /**
     * Get all values of property Value as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllValue_as() {
		return Base.getAll_as(this.model, this.getResource(), VALUE, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}
 
    /**
     * Adds a value to property Value as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addValue( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, VALUE, value);
	}
	
    /**
     * Adds a value to property Value as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addValue( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), VALUE, value);
	}
    /**
     * Adds a value to property Value from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addValue(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, VALUE, value);
	}
	
    /**
     * Adds a value to property Value from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addValue(Thing value) {
		Base.add(this.model, this.getResource(), VALUE, value);
	}
  

    /**
     * Sets a value of property Value from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setValue( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, VALUE, value);
	}
	
    /**
     * Sets a value of property Value from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setValue( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), VALUE, value);
	}
    /**
     * Sets a value of property Value from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setValue(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, VALUE, value);
	}
	
    /**
     * Sets a value of property Value from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setValue(Thing value) {
		Base.set(this.model, this.getResource(), VALUE, value);
	}
  


    /**
     * Removes a value of property Value as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeValue( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, VALUE, value);
	}
	
    /**
     * Removes a value of property Value as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeValue( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), VALUE, value);
	}
    /**
     * Removes a value of property Value given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeValue(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, VALUE, value);
	}
	
    /**
     * Removes a value of property Value given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeValue(Thing value) {
		Base.remove(this.model, this.getResource(), VALUE, value);
	}
  
    /**
     * Removes all values of property Value     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllValue( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, VALUE);
	}
	
    /**
     * Removes all values of property Value	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllValue() {
		Base.removeAll(this.model, this.getResource(), VALUE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@16868dd has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasWasAttributedTo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, WASATTRIBUTEDTO);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@16868dd has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasWasAttributedTo() {
		return Base.has(this.model, this.getResource(), WASATTRIBUTEDTO);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@16868dd has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasWasAttributedTo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, WASATTRIBUTEDTO, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@16868dd has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasWasAttributedTo( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), WASATTRIBUTEDTO, value);
	}

     /**
     * Get all values of property WasAttributedTo as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllWasAttributedTo_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, WASATTRIBUTEDTO);
	}
	
    /**
     * Get all values of property WasAttributedTo as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllWasAttributedTo_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, WASATTRIBUTEDTO, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property WasAttributedTo as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllWasAttributedTo_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), WASATTRIBUTEDTO);
	}

    /**
     * Get all values of property WasAttributedTo as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllWasAttributedTo_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), WASATTRIBUTEDTO, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property WasAttributedTo     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Agent> getAllWasAttributedTo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, WASATTRIBUTEDTO, Agent.class);
	}
	
    /**
     * Get all values of property WasAttributedTo as a ReactorResult of Agent 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Agent> getAllWasAttributedTo_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, WASATTRIBUTEDTO, Agent.class);
	}

    /**
     * Get all values of property WasAttributedTo     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Agent> getAllWasAttributedTo() {
		return Base.getAll(this.model, this.getResource(), WASATTRIBUTEDTO, Agent.class);
	}

    /**
     * Get all values of property WasAttributedTo as a ReactorResult of Agent 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Agent> getAllWasAttributedTo_as() {
		return Base.getAll_as(this.model, this.getResource(), WASATTRIBUTEDTO, Agent.class);
	}
 
    /**
     * Adds a value to property WasAttributedTo as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addWasAttributedTo( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, WASATTRIBUTEDTO, value);
	}
	
    /**
     * Adds a value to property WasAttributedTo as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addWasAttributedTo( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), WASATTRIBUTEDTO, value);
	}
    /**
     * Adds a value to property WasAttributedTo from an instance of Agent 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addWasAttributedTo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Agent value) {
		Base.add(model, instanceResource, WASATTRIBUTEDTO, value);
	}
	
    /**
     * Adds a value to property WasAttributedTo from an instance of Agent 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addWasAttributedTo(Agent value) {
		Base.add(this.model, this.getResource(), WASATTRIBUTEDTO, value);
	}
  

    /**
     * Sets a value of property WasAttributedTo from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setWasAttributedTo( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, WASATTRIBUTEDTO, value);
	}
	
    /**
     * Sets a value of property WasAttributedTo from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setWasAttributedTo( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), WASATTRIBUTEDTO, value);
	}
    /**
     * Sets a value of property WasAttributedTo from an instance of Agent 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setWasAttributedTo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Agent value) {
		Base.set(model, instanceResource, WASATTRIBUTEDTO, value);
	}
	
    /**
     * Sets a value of property WasAttributedTo from an instance of Agent 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setWasAttributedTo(Agent value) {
		Base.set(this.model, this.getResource(), WASATTRIBUTEDTO, value);
	}
  


    /**
     * Removes a value of property WasAttributedTo as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeWasAttributedTo( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, WASATTRIBUTEDTO, value);
	}
	
    /**
     * Removes a value of property WasAttributedTo as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeWasAttributedTo( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), WASATTRIBUTEDTO, value);
	}
    /**
     * Removes a value of property WasAttributedTo given as an instance of Agent 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeWasAttributedTo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Agent value) {
		Base.remove(model, instanceResource, WASATTRIBUTEDTO, value);
	}
	
    /**
     * Removes a value of property WasAttributedTo given as an instance of Agent 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeWasAttributedTo(Agent value) {
		Base.remove(this.model, this.getResource(), WASATTRIBUTEDTO, value);
	}
  
    /**
     * Removes all values of property WasAttributedTo     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllWasAttributedTo( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, WASATTRIBUTEDTO);
	}
	
    /**
     * Removes all values of property WasAttributedTo	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllWasAttributedTo() {
		Base.removeAll(this.model, this.getResource(), WASATTRIBUTEDTO);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1af320f has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasWasDerivedFrom(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, WASDERIVEDFROM);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1af320f has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasWasDerivedFrom() {
		return Base.has(this.model, this.getResource(), WASDERIVEDFROM);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1af320f has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasWasDerivedFrom(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, WASDERIVEDFROM, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1af320f has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasWasDerivedFrom( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), WASDERIVEDFROM, value);
	}

     /**
     * Get all values of property WasDerivedFrom as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllWasDerivedFrom_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, WASDERIVEDFROM);
	}
	
    /**
     * Get all values of property WasDerivedFrom as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllWasDerivedFrom_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, WASDERIVEDFROM, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property WasDerivedFrom as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllWasDerivedFrom_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), WASDERIVEDFROM);
	}

    /**
     * Get all values of property WasDerivedFrom as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllWasDerivedFrom_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), WASDERIVEDFROM, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property WasDerivedFrom     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Entity> getAllWasDerivedFrom(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, WASDERIVEDFROM, Entity.class);
	}
	
    /**
     * Get all values of property WasDerivedFrom as a ReactorResult of Entity 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Entity> getAllWasDerivedFrom_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, WASDERIVEDFROM, Entity.class);
	}

    /**
     * Get all values of property WasDerivedFrom     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Entity> getAllWasDerivedFrom() {
		return Base.getAll(this.model, this.getResource(), WASDERIVEDFROM, Entity.class);
	}

    /**
     * Get all values of property WasDerivedFrom as a ReactorResult of Entity 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Entity> getAllWasDerivedFrom_as() {
		return Base.getAll_as(this.model, this.getResource(), WASDERIVEDFROM, Entity.class);
	}
 
    /**
     * Adds a value to property WasDerivedFrom as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addWasDerivedFrom( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, WASDERIVEDFROM, value);
	}
	
    /**
     * Adds a value to property WasDerivedFrom as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addWasDerivedFrom( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), WASDERIVEDFROM, value);
	}
    /**
     * Adds a value to property WasDerivedFrom from an instance of Entity 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addWasDerivedFrom(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Entity value) {
		Base.add(model, instanceResource, WASDERIVEDFROM, value);
	}
	
    /**
     * Adds a value to property WasDerivedFrom from an instance of Entity 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addWasDerivedFrom(Entity value) {
		Base.add(this.model, this.getResource(), WASDERIVEDFROM, value);
	}
  

    /**
     * Sets a value of property WasDerivedFrom from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setWasDerivedFrom( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, WASDERIVEDFROM, value);
	}
	
    /**
     * Sets a value of property WasDerivedFrom from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setWasDerivedFrom( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), WASDERIVEDFROM, value);
	}
    /**
     * Sets a value of property WasDerivedFrom from an instance of Entity 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setWasDerivedFrom(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Entity value) {
		Base.set(model, instanceResource, WASDERIVEDFROM, value);
	}
	
    /**
     * Sets a value of property WasDerivedFrom from an instance of Entity 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setWasDerivedFrom(Entity value) {
		Base.set(this.model, this.getResource(), WASDERIVEDFROM, value);
	}
  


    /**
     * Removes a value of property WasDerivedFrom as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeWasDerivedFrom( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, WASDERIVEDFROM, value);
	}
	
    /**
     * Removes a value of property WasDerivedFrom as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeWasDerivedFrom( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), WASDERIVEDFROM, value);
	}
    /**
     * Removes a value of property WasDerivedFrom given as an instance of Entity 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeWasDerivedFrom(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Entity value) {
		Base.remove(model, instanceResource, WASDERIVEDFROM, value);
	}
	
    /**
     * Removes a value of property WasDerivedFrom given as an instance of Entity 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeWasDerivedFrom(Entity value) {
		Base.remove(this.model, this.getResource(), WASDERIVEDFROM, value);
	}
  
    /**
     * Removes all values of property WasDerivedFrom     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllWasDerivedFrom( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, WASDERIVEDFROM);
	}
	
    /**
     * Removes all values of property WasDerivedFrom	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllWasDerivedFrom() {
		Base.removeAll(this.model, this.getResource(), WASDERIVEDFROM);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1188d90 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasWasGeneratedBy(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, WASGENERATEDBY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1188d90 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasWasGeneratedBy() {
		return Base.has(this.model, this.getResource(), WASGENERATEDBY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1188d90 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasWasGeneratedBy(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, WASGENERATEDBY, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1188d90 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasWasGeneratedBy( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), WASGENERATEDBY, value);
	}

     /**
     * Get all values of property WasGeneratedBy as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllWasGeneratedBy_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, WASGENERATEDBY);
	}
	
    /**
     * Get all values of property WasGeneratedBy as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllWasGeneratedBy_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, WASGENERATEDBY, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property WasGeneratedBy as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllWasGeneratedBy_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), WASGENERATEDBY);
	}

    /**
     * Get all values of property WasGeneratedBy as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllWasGeneratedBy_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), WASGENERATEDBY, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property WasGeneratedBy     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Activity> getAllWasGeneratedBy(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, WASGENERATEDBY, Activity.class);
	}
	
    /**
     * Get all values of property WasGeneratedBy as a ReactorResult of Activity 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Activity> getAllWasGeneratedBy_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, WASGENERATEDBY, Activity.class);
	}

    /**
     * Get all values of property WasGeneratedBy     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Activity> getAllWasGeneratedBy() {
		return Base.getAll(this.model, this.getResource(), WASGENERATEDBY, Activity.class);
	}

    /**
     * Get all values of property WasGeneratedBy as a ReactorResult of Activity 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Activity> getAllWasGeneratedBy_as() {
		return Base.getAll_as(this.model, this.getResource(), WASGENERATEDBY, Activity.class);
	}
 
    /**
     * Adds a value to property WasGeneratedBy as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addWasGeneratedBy( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, WASGENERATEDBY, value);
	}
	
    /**
     * Adds a value to property WasGeneratedBy as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addWasGeneratedBy( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), WASGENERATEDBY, value);
	}
    /**
     * Adds a value to property WasGeneratedBy from an instance of Activity 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addWasGeneratedBy(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Activity value) {
		Base.add(model, instanceResource, WASGENERATEDBY, value);
	}
	
    /**
     * Adds a value to property WasGeneratedBy from an instance of Activity 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addWasGeneratedBy(Activity value) {
		Base.add(this.model, this.getResource(), WASGENERATEDBY, value);
	}
  

    /**
     * Sets a value of property WasGeneratedBy from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setWasGeneratedBy( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, WASGENERATEDBY, value);
	}
	
    /**
     * Sets a value of property WasGeneratedBy from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setWasGeneratedBy( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), WASGENERATEDBY, value);
	}
    /**
     * Sets a value of property WasGeneratedBy from an instance of Activity 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setWasGeneratedBy(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Activity value) {
		Base.set(model, instanceResource, WASGENERATEDBY, value);
	}
	
    /**
     * Sets a value of property WasGeneratedBy from an instance of Activity 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setWasGeneratedBy(Activity value) {
		Base.set(this.model, this.getResource(), WASGENERATEDBY, value);
	}
  


    /**
     * Removes a value of property WasGeneratedBy as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeWasGeneratedBy( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, WASGENERATEDBY, value);
	}
	
    /**
     * Removes a value of property WasGeneratedBy as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeWasGeneratedBy( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), WASGENERATEDBY, value);
	}
    /**
     * Removes a value of property WasGeneratedBy given as an instance of Activity 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeWasGeneratedBy(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Activity value) {
		Base.remove(model, instanceResource, WASGENERATEDBY, value);
	}
	
    /**
     * Removes a value of property WasGeneratedBy given as an instance of Activity 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeWasGeneratedBy(Activity value) {
		Base.remove(this.model, this.getResource(), WASGENERATEDBY, value);
	}
  
    /**
     * Removes all values of property WasGeneratedBy     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllWasGeneratedBy( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, WASGENERATEDBY);
	}
	
    /**
     * Removes all values of property WasGeneratedBy	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllWasGeneratedBy() {
		Base.removeAll(this.model, this.getResource(), WASGENERATEDBY);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@15e37ac has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasWasInvalidatedBy(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, WASINVALIDATEDBY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@15e37ac has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasWasInvalidatedBy() {
		return Base.has(this.model, this.getResource(), WASINVALIDATEDBY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@15e37ac has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasWasInvalidatedBy(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, WASINVALIDATEDBY, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@15e37ac has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasWasInvalidatedBy( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), WASINVALIDATEDBY, value);
	}

     /**
     * Get all values of property WasInvalidatedBy as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllWasInvalidatedBy_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, WASINVALIDATEDBY);
	}
	
    /**
     * Get all values of property WasInvalidatedBy as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllWasInvalidatedBy_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, WASINVALIDATEDBY, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property WasInvalidatedBy as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllWasInvalidatedBy_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), WASINVALIDATEDBY);
	}

    /**
     * Get all values of property WasInvalidatedBy as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllWasInvalidatedBy_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), WASINVALIDATEDBY, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property WasInvalidatedBy     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Activity> getAllWasInvalidatedBy(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, WASINVALIDATEDBY, Activity.class);
	}
	
    /**
     * Get all values of property WasInvalidatedBy as a ReactorResult of Activity 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Activity> getAllWasInvalidatedBy_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, WASINVALIDATEDBY, Activity.class);
	}

    /**
     * Get all values of property WasInvalidatedBy     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Activity> getAllWasInvalidatedBy() {
		return Base.getAll(this.model, this.getResource(), WASINVALIDATEDBY, Activity.class);
	}

    /**
     * Get all values of property WasInvalidatedBy as a ReactorResult of Activity 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Activity> getAllWasInvalidatedBy_as() {
		return Base.getAll_as(this.model, this.getResource(), WASINVALIDATEDBY, Activity.class);
	}
 
    /**
     * Adds a value to property WasInvalidatedBy as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addWasInvalidatedBy( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, WASINVALIDATEDBY, value);
	}
	
    /**
     * Adds a value to property WasInvalidatedBy as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addWasInvalidatedBy( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), WASINVALIDATEDBY, value);
	}
    /**
     * Adds a value to property WasInvalidatedBy from an instance of Activity 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addWasInvalidatedBy(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Activity value) {
		Base.add(model, instanceResource, WASINVALIDATEDBY, value);
	}
	
    /**
     * Adds a value to property WasInvalidatedBy from an instance of Activity 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addWasInvalidatedBy(Activity value) {
		Base.add(this.model, this.getResource(), WASINVALIDATEDBY, value);
	}
  

    /**
     * Sets a value of property WasInvalidatedBy from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setWasInvalidatedBy( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, WASINVALIDATEDBY, value);
	}
	
    /**
     * Sets a value of property WasInvalidatedBy from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setWasInvalidatedBy( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), WASINVALIDATEDBY, value);
	}
    /**
     * Sets a value of property WasInvalidatedBy from an instance of Activity 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setWasInvalidatedBy(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Activity value) {
		Base.set(model, instanceResource, WASINVALIDATEDBY, value);
	}
	
    /**
     * Sets a value of property WasInvalidatedBy from an instance of Activity 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setWasInvalidatedBy(Activity value) {
		Base.set(this.model, this.getResource(), WASINVALIDATEDBY, value);
	}
  


    /**
     * Removes a value of property WasInvalidatedBy as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeWasInvalidatedBy( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, WASINVALIDATEDBY, value);
	}
	
    /**
     * Removes a value of property WasInvalidatedBy as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeWasInvalidatedBy( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), WASINVALIDATEDBY, value);
	}
    /**
     * Removes a value of property WasInvalidatedBy given as an instance of Activity 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeWasInvalidatedBy(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Activity value) {
		Base.remove(model, instanceResource, WASINVALIDATEDBY, value);
	}
	
    /**
     * Removes a value of property WasInvalidatedBy given as an instance of Activity 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeWasInvalidatedBy(Activity value) {
		Base.remove(this.model, this.getResource(), WASINVALIDATEDBY, value);
	}
  
    /**
     * Removes all values of property WasInvalidatedBy     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllWasInvalidatedBy( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, WASINVALIDATEDBY);
	}
	
    /**
     * Removes all values of property WasInvalidatedBy	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllWasInvalidatedBy() {
		Base.removeAll(this.model, this.getResource(), WASINVALIDATEDBY);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@e08e48 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasWasQuotedFrom(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, WASQUOTEDFROM);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@e08e48 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasWasQuotedFrom() {
		return Base.has(this.model, this.getResource(), WASQUOTEDFROM);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@e08e48 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasWasQuotedFrom(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, WASQUOTEDFROM, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@e08e48 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasWasQuotedFrom( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), WASQUOTEDFROM, value);
	}

     /**
     * Get all values of property WasQuotedFrom as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllWasQuotedFrom_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, WASQUOTEDFROM);
	}
	
    /**
     * Get all values of property WasQuotedFrom as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllWasQuotedFrom_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, WASQUOTEDFROM, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property WasQuotedFrom as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllWasQuotedFrom_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), WASQUOTEDFROM);
	}

    /**
     * Get all values of property WasQuotedFrom as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllWasQuotedFrom_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), WASQUOTEDFROM, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property WasQuotedFrom     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Entity> getAllWasQuotedFrom(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, WASQUOTEDFROM, Entity.class);
	}
	
    /**
     * Get all values of property WasQuotedFrom as a ReactorResult of Entity 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Entity> getAllWasQuotedFrom_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, WASQUOTEDFROM, Entity.class);
	}

    /**
     * Get all values of property WasQuotedFrom     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Entity> getAllWasQuotedFrom() {
		return Base.getAll(this.model, this.getResource(), WASQUOTEDFROM, Entity.class);
	}

    /**
     * Get all values of property WasQuotedFrom as a ReactorResult of Entity 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Entity> getAllWasQuotedFrom_as() {
		return Base.getAll_as(this.model, this.getResource(), WASQUOTEDFROM, Entity.class);
	}
 
    /**
     * Adds a value to property WasQuotedFrom as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addWasQuotedFrom( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, WASQUOTEDFROM, value);
	}
	
    /**
     * Adds a value to property WasQuotedFrom as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addWasQuotedFrom( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), WASQUOTEDFROM, value);
	}
    /**
     * Adds a value to property WasQuotedFrom from an instance of Entity 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addWasQuotedFrom(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Entity value) {
		Base.add(model, instanceResource, WASQUOTEDFROM, value);
	}
	
    /**
     * Adds a value to property WasQuotedFrom from an instance of Entity 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addWasQuotedFrom(Entity value) {
		Base.add(this.model, this.getResource(), WASQUOTEDFROM, value);
	}
  

    /**
     * Sets a value of property WasQuotedFrom from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setWasQuotedFrom( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, WASQUOTEDFROM, value);
	}
	
    /**
     * Sets a value of property WasQuotedFrom from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setWasQuotedFrom( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), WASQUOTEDFROM, value);
	}
    /**
     * Sets a value of property WasQuotedFrom from an instance of Entity 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setWasQuotedFrom(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Entity value) {
		Base.set(model, instanceResource, WASQUOTEDFROM, value);
	}
	
    /**
     * Sets a value of property WasQuotedFrom from an instance of Entity 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setWasQuotedFrom(Entity value) {
		Base.set(this.model, this.getResource(), WASQUOTEDFROM, value);
	}
  


    /**
     * Removes a value of property WasQuotedFrom as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeWasQuotedFrom( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, WASQUOTEDFROM, value);
	}
	
    /**
     * Removes a value of property WasQuotedFrom as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeWasQuotedFrom( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), WASQUOTEDFROM, value);
	}
    /**
     * Removes a value of property WasQuotedFrom given as an instance of Entity 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeWasQuotedFrom(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Entity value) {
		Base.remove(model, instanceResource, WASQUOTEDFROM, value);
	}
	
    /**
     * Removes a value of property WasQuotedFrom given as an instance of Entity 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeWasQuotedFrom(Entity value) {
		Base.remove(this.model, this.getResource(), WASQUOTEDFROM, value);
	}
  
    /**
     * Removes all values of property WasQuotedFrom     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllWasQuotedFrom( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, WASQUOTEDFROM);
	}
	
    /**
     * Removes all values of property WasQuotedFrom	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllWasQuotedFrom() {
		Base.removeAll(this.model, this.getResource(), WASQUOTEDFROM);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@a63567 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasWasRevisionOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, WASREVISIONOF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@a63567 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasWasRevisionOf() {
		return Base.has(this.model, this.getResource(), WASREVISIONOF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@a63567 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasWasRevisionOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, WASREVISIONOF, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@a63567 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasWasRevisionOf( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), WASREVISIONOF, value);
	}

     /**
     * Get all values of property WasRevisionOf as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllWasRevisionOf_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, WASREVISIONOF);
	}
	
    /**
     * Get all values of property WasRevisionOf as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllWasRevisionOf_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, WASREVISIONOF, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property WasRevisionOf as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllWasRevisionOf_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), WASREVISIONOF);
	}

    /**
     * Get all values of property WasRevisionOf as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllWasRevisionOf_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), WASREVISIONOF, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property WasRevisionOf     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Entity> getAllWasRevisionOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, WASREVISIONOF, Entity.class);
	}
	
    /**
     * Get all values of property WasRevisionOf as a ReactorResult of Entity 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Entity> getAllWasRevisionOf_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, WASREVISIONOF, Entity.class);
	}

    /**
     * Get all values of property WasRevisionOf     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Entity> getAllWasRevisionOf() {
		return Base.getAll(this.model, this.getResource(), WASREVISIONOF, Entity.class);
	}

    /**
     * Get all values of property WasRevisionOf as a ReactorResult of Entity 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Entity> getAllWasRevisionOf_as() {
		return Base.getAll_as(this.model, this.getResource(), WASREVISIONOF, Entity.class);
	}
 
    /**
     * Adds a value to property WasRevisionOf as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addWasRevisionOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, WASREVISIONOF, value);
	}
	
    /**
     * Adds a value to property WasRevisionOf as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addWasRevisionOf( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), WASREVISIONOF, value);
	}
    /**
     * Adds a value to property WasRevisionOf from an instance of Entity 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addWasRevisionOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Entity value) {
		Base.add(model, instanceResource, WASREVISIONOF, value);
	}
	
    /**
     * Adds a value to property WasRevisionOf from an instance of Entity 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addWasRevisionOf(Entity value) {
		Base.add(this.model, this.getResource(), WASREVISIONOF, value);
	}
  

    /**
     * Sets a value of property WasRevisionOf from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setWasRevisionOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, WASREVISIONOF, value);
	}
	
    /**
     * Sets a value of property WasRevisionOf from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setWasRevisionOf( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), WASREVISIONOF, value);
	}
    /**
     * Sets a value of property WasRevisionOf from an instance of Entity 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setWasRevisionOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Entity value) {
		Base.set(model, instanceResource, WASREVISIONOF, value);
	}
	
    /**
     * Sets a value of property WasRevisionOf from an instance of Entity 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setWasRevisionOf(Entity value) {
		Base.set(this.model, this.getResource(), WASREVISIONOF, value);
	}
  


    /**
     * Removes a value of property WasRevisionOf as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeWasRevisionOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, WASREVISIONOF, value);
	}
	
    /**
     * Removes a value of property WasRevisionOf as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeWasRevisionOf( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), WASREVISIONOF, value);
	}
    /**
     * Removes a value of property WasRevisionOf given as an instance of Entity 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeWasRevisionOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Entity value) {
		Base.remove(model, instanceResource, WASREVISIONOF, value);
	}
	
    /**
     * Removes a value of property WasRevisionOf given as an instance of Entity 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeWasRevisionOf(Entity value) {
		Base.remove(this.model, this.getResource(), WASREVISIONOF, value);
	}
  
    /**
     * Removes all values of property WasRevisionOf     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllWasRevisionOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, WASREVISIONOF);
	}
	
    /**
     * Removes all values of property WasRevisionOf	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllWasRevisionOf() {
		Base.removeAll(this.model, this.getResource(), WASREVISIONOF);
	}
 }