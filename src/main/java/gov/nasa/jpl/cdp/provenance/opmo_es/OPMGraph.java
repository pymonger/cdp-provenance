/**
 * generated by http://RDFReactor.semweb4j.org ($Id: CodeGenerator.java 1765 2010-02-11 09:51:13Z max.at.xam.de $) on 2/21/12 8:19 AM
 */
package gov.nasa.jpl.cdp.provenance.opmo_es;

import org.ontoware.aifbcommons.collection.ClosableIterator;
import org.ontoware.rdf2go.exception.ModelRuntimeException;
import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.BlankNode;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdfreactor.runtime.Base;
import org.ontoware.rdfreactor.runtime.ReactorResult;

/**
 * This class manages access to these properties:
 * <ul>
 *   <li> HasAccount </li>
 *   <li> HasAgent </li>
 *   <li> HasArtifact </li>
 *   <li> HasContituent </li>
 *   <li> HasDependency </li>
 *   <li> HasProcess </li>
 *   <li> SessionGeneratedArtifacts </li>
 *   <li> SessionUsedArtifacts </li>
 * </ul>
 *
 * This class was generated by <a href="http://RDFReactor.semweb4j.org">RDFReactor</a> on 2/21/12 8:19 AM
 */
public class OPMGraph extends Entity {

    /** http://openprovenance.org/model/opmo#OPMGraph */
	@SuppressWarnings("hiding")
	public static final URI RDFS_CLASS = new URIImpl("http://openprovenance.org/model/opmo#OPMGraph", false);

    /** http://openprovenance.org/model/opmo#hasAccount */
	public static final URI HASACCOUNT = new URIImpl("http://openprovenance.org/model/opmo#hasAccount",false);

    /** http://openprovenance.org/model/opmo#hasAgent */
	public static final URI HASAGENT = new URIImpl("http://openprovenance.org/model/opmo#hasAgent",false);

    /** http://openprovenance.org/model/opmo#hasArtifact */
	public static final URI HASARTIFACT = new URIImpl("http://openprovenance.org/model/opmo#hasArtifact",false);

    /** http://openprovenance.org/model/opmo#hasConstituent */
	public static final URI HASCONTITUENT = new URIImpl("http://openprovenance.org/model/opmo#hasConstituent",false);

    /** http://openprovenance.org/model/opmo#hasDependency */
	public static final URI HASDEPENDENCY = new URIImpl("http://openprovenance.org/model/opmo#hasDependency",false);

    /** http://openprovenance.org/model/opmo#hasProcess */
	public static final URI HASPROCESS = new URIImpl("http://openprovenance.org/model/opmo#hasProcess",false);

    /** http://provenance.jpl.nasa.gov/ontologies/2011/11/23/opmo_es.owl#sessionGeneratedArtifacts */
	public static final URI SESSIONGENERATEDARTIFACTS = new URIImpl("http://provenance.jpl.nasa.gov/ontologies/2011/11/23/opmo_es.owl#sessionGeneratedArtifacts",false);

    /** http://provenance.jpl.nasa.gov/ontologies/2011/11/23/opmo_es.owl#sessionUsedArtifacts */
	public static final URI SESSIONUSEDARTIFACTS = new URIImpl("http://provenance.jpl.nasa.gov/ontologies/2011/11/23/opmo_es.owl#sessionUsedArtifacts",false);

    /** 
     * All property-URIs with this class as domain.
     * All properties of all super-classes are also available. 
     */
	@SuppressWarnings("hiding")
    public static final URI[] MANAGED_URIS = {
      new URIImpl("http://openprovenance.org/model/opmo#hasAccount",false),
      new URIImpl("http://openprovenance.org/model/opmo#hasAgent",false),
      new URIImpl("http://openprovenance.org/model/opmo#hasArtifact",false),
      new URIImpl("http://openprovenance.org/model/opmo#hasConstituent",false),
      new URIImpl("http://openprovenance.org/model/opmo#hasDependency",false),
      new URIImpl("http://openprovenance.org/model/opmo#hasProcess",false),
      new URIImpl("http://provenance.jpl.nasa.gov/ontologies/2011/11/23/opmo_es.owl#sessionGeneratedArtifacts",false),
      new URIImpl("http://provenance.jpl.nasa.gov/ontologies/2011/11/23/opmo_es.owl#sessionUsedArtifacts",false) 
    };


	// protected constructors needed for inheritance
	
	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.semweb4j.org
	 * @param classURI URI of RDFS class
	 * @param instanceIdentifier Resource that identifies this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c1] 
	 */
	protected OPMGraph ( Model model, URI classURI, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, classURI, instanceIdentifier, write);
	}

	// public constructors

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param instanceIdentifier an RDF2Go Resource identifying this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c2] 
	 */
	public OPMGraph ( Model model, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, RDFS_CLASS, instanceIdentifier, write);
	}


	/**
	 * Returns a Java wrapper over an RDF object, identified by a URI, given as a String.
	 * Creating two wrappers for the same URI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uriString a URI given as a String
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 * @throws ModelRuntimeException if URI syntax is wrong
	 *
	 * [Generated from RDFReactor template rule #c7] 
	 */
	public OPMGraph ( Model model, String uriString, boolean write) throws ModelRuntimeException {
		super(model, RDFS_CLASS, new URIImpl(uriString,false), write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by a blank node.
	 * Creating two wrappers for the same blank node is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param bnode BlankNode of this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c8] 
	 */
	public OPMGraph ( Model model, BlankNode bnode, boolean write ) {
		super(model, RDFS_CLASS, bnode, write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by 
	 * a randomly generated URI.
	 * Creating two wrappers results in different URIs.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c9] 
	 */
	public OPMGraph ( Model model, boolean write ) {
		super(model, RDFS_CLASS, model.newRandomUniqueURI(), write);
	}

    ///////////////////////////////////////////////////////////////////
    // typing

	/**
	 * Return an existing instance of this class in the model. No statements are written.
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return an instance of OPMGraph  or null if none existst
	 *
	 * [Generated from RDFReactor template rule #class0] 
	 */
	public static OPMGraph  getInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getInstance(model, instanceResource, OPMGraph.class);
	}

	/**
	 * Create a new instance of this class in the model. 
	 * That is, create the statement (instanceResource, RDF.type, http://openprovenance.org/model/opmo#OPMGraph).
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class1] 
	 */
	public static void createInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.createInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return true if instanceResource is an instance of this class in the model
	 *
	 * [Generated from RDFReactor template rule #class2] 
	 */
	public static boolean hasInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.hasInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as RDF resources
	 *
	 * [Generated from RDFReactor template rule #class3] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInstances(Model model) {
		return Base.getAllInstances(model, RDFS_CLASS, org.ontoware.rdf2go.model.node.Resource.class);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as a ReactorResult,
	 * which can conveniently be converted to iterator, list or array.
	 *
	 * [Generated from RDFReactor template rule #class3-as] 
	 */
	public static ReactorResult<? extends OPMGraph> getAllInstances_as(Model model) {
		return Base.getAllInstances_as(model, RDFS_CLASS, OPMGraph.class );
	}

    /**
	 * Remove rdf:type OPMGraph from this instance. Other triples are not affected.
	 * To delete more, use deleteAllProperties
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class4] 
	 */
	public static void deleteInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * Delete all (this, *, *), i.e. including rdf:type
	 * @param model an RDF2Go model
	 * @param resource
	 */
	public static void deleteAllProperties(Model model,	org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteAllProperties(model, instanceResource);
	}

    ///////////////////////////////////////////////////////////////////
    // property access methods


    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@14ec63b has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasHasAccount(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, HASACCOUNT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@14ec63b has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasHasAccount() {
		return Base.has(this.model, this.getResource(), HASACCOUNT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@14ec63b has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasHasAccount(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, HASACCOUNT, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@14ec63b has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasHasAccount( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), HASACCOUNT, value);
	}

     /**
     * Get all values of property HasAccount as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllHasAccount_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, HASACCOUNT);
	}
	
    /**
     * Get all values of property HasAccount as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllHasAccount_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, HASACCOUNT, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property HasAccount as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllHasAccount_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), HASACCOUNT);
	}

    /**
     * Get all values of property HasAccount as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllHasAccount_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), HASACCOUNT, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property HasAccount     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Account> getAllHasAccount(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, HASACCOUNT, Account.class);
	}
	
    /**
     * Get all values of property HasAccount as a ReactorResult of Account 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Account> getAllHasAccount_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, HASACCOUNT, Account.class);
	}

    /**
     * Get all values of property HasAccount     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Account> getAllHasAccount() {
		return Base.getAll(this.model, this.getResource(), HASACCOUNT, Account.class);
	}

    /**
     * Get all values of property HasAccount as a ReactorResult of Account 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Account> getAllHasAccount_as() {
		return Base.getAll_as(this.model, this.getResource(), HASACCOUNT, Account.class);
	}
 
    /**
     * Adds a value to property HasAccount as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addHasAccount( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, HASACCOUNT, value);
	}
	
    /**
     * Adds a value to property HasAccount as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addHasAccount( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), HASACCOUNT, value);
	}
    /**
     * Adds a value to property HasAccount from an instance of Account 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addHasAccount(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Account value) {
		Base.add(model, instanceResource, HASACCOUNT, value);
	}
	
    /**
     * Adds a value to property HasAccount from an instance of Account 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addHasAccount(Account value) {
		Base.add(this.model, this.getResource(), HASACCOUNT, value);
	}
  

    /**
     * Sets a value of property HasAccount from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setHasAccount( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, HASACCOUNT, value);
	}
	
    /**
     * Sets a value of property HasAccount from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setHasAccount( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), HASACCOUNT, value);
	}
    /**
     * Sets a value of property HasAccount from an instance of Account 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setHasAccount(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Account value) {
		Base.set(model, instanceResource, HASACCOUNT, value);
	}
	
    /**
     * Sets a value of property HasAccount from an instance of Account 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setHasAccount(Account value) {
		Base.set(this.model, this.getResource(), HASACCOUNT, value);
	}
  


    /**
     * Removes a value of property HasAccount as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeHasAccount( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, HASACCOUNT, value);
	}
	
    /**
     * Removes a value of property HasAccount as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeHasAccount( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), HASACCOUNT, value);
	}
    /**
     * Removes a value of property HasAccount given as an instance of Account 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeHasAccount(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Account value) {
		Base.remove(model, instanceResource, HASACCOUNT, value);
	}
	
    /**
     * Removes a value of property HasAccount given as an instance of Account 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeHasAccount(Account value) {
		Base.remove(this.model, this.getResource(), HASACCOUNT, value);
	}
  
    /**
     * Removes all values of property HasAccount     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllHasAccount( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, HASACCOUNT);
	}
	
    /**
     * Removes all values of property HasAccount	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllHasAccount() {
		Base.removeAll(this.model, this.getResource(), HASACCOUNT);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@187460a has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasHasAgent(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, HASAGENT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@187460a has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasHasAgent() {
		return Base.has(this.model, this.getResource(), HASAGENT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@187460a has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasHasAgent(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, HASAGENT, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@187460a has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasHasAgent( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), HASAGENT, value);
	}

     /**
     * Get all values of property HasAgent as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllHasAgent_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, HASAGENT);
	}
	
    /**
     * Get all values of property HasAgent as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllHasAgent_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, HASAGENT, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property HasAgent as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllHasAgent_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), HASAGENT);
	}

    /**
     * Get all values of property HasAgent as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllHasAgent_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), HASAGENT, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property HasAgent     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Agent> getAllHasAgent(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, HASAGENT, Agent.class);
	}
	
    /**
     * Get all values of property HasAgent as a ReactorResult of Agent 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Agent> getAllHasAgent_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, HASAGENT, Agent.class);
	}

    /**
     * Get all values of property HasAgent     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Agent> getAllHasAgent() {
		return Base.getAll(this.model, this.getResource(), HASAGENT, Agent.class);
	}

    /**
     * Get all values of property HasAgent as a ReactorResult of Agent 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Agent> getAllHasAgent_as() {
		return Base.getAll_as(this.model, this.getResource(), HASAGENT, Agent.class);
	}
 
    /**
     * Adds a value to property HasAgent as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addHasAgent( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, HASAGENT, value);
	}
	
    /**
     * Adds a value to property HasAgent as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addHasAgent( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), HASAGENT, value);
	}
    /**
     * Adds a value to property HasAgent from an instance of Agent 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addHasAgent(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Agent value) {
		Base.add(model, instanceResource, HASAGENT, value);
	}
	
    /**
     * Adds a value to property HasAgent from an instance of Agent 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addHasAgent(Agent value) {
		Base.add(this.model, this.getResource(), HASAGENT, value);
	}
  

    /**
     * Sets a value of property HasAgent from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setHasAgent( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, HASAGENT, value);
	}
	
    /**
     * Sets a value of property HasAgent from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setHasAgent( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), HASAGENT, value);
	}
    /**
     * Sets a value of property HasAgent from an instance of Agent 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setHasAgent(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Agent value) {
		Base.set(model, instanceResource, HASAGENT, value);
	}
	
    /**
     * Sets a value of property HasAgent from an instance of Agent 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setHasAgent(Agent value) {
		Base.set(this.model, this.getResource(), HASAGENT, value);
	}
  


    /**
     * Removes a value of property HasAgent as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeHasAgent( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, HASAGENT, value);
	}
	
    /**
     * Removes a value of property HasAgent as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeHasAgent( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), HASAGENT, value);
	}
    /**
     * Removes a value of property HasAgent given as an instance of Agent 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeHasAgent(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Agent value) {
		Base.remove(model, instanceResource, HASAGENT, value);
	}
	
    /**
     * Removes a value of property HasAgent given as an instance of Agent 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeHasAgent(Agent value) {
		Base.remove(this.model, this.getResource(), HASAGENT, value);
	}
  
    /**
     * Removes all values of property HasAgent     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllHasAgent( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, HASAGENT);
	}
	
    /**
     * Removes all values of property HasAgent	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllHasAgent() {
		Base.removeAll(this.model, this.getResource(), HASAGENT);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1e4f076 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasHasArtifact(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, HASARTIFACT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1e4f076 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasHasArtifact() {
		return Base.has(this.model, this.getResource(), HASARTIFACT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1e4f076 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasHasArtifact(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, HASARTIFACT, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1e4f076 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasHasArtifact( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), HASARTIFACT, value);
	}

     /**
     * Get all values of property HasArtifact as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllHasArtifact_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, HASARTIFACT);
	}
	
    /**
     * Get all values of property HasArtifact as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllHasArtifact_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, HASARTIFACT, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property HasArtifact as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllHasArtifact_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), HASARTIFACT);
	}

    /**
     * Get all values of property HasArtifact as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllHasArtifact_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), HASARTIFACT, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property HasArtifact     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Artifact> getAllHasArtifact(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, HASARTIFACT, Artifact.class);
	}
	
    /**
     * Get all values of property HasArtifact as a ReactorResult of Artifact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Artifact> getAllHasArtifact_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, HASARTIFACT, Artifact.class);
	}

    /**
     * Get all values of property HasArtifact     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Artifact> getAllHasArtifact() {
		return Base.getAll(this.model, this.getResource(), HASARTIFACT, Artifact.class);
	}

    /**
     * Get all values of property HasArtifact as a ReactorResult of Artifact 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Artifact> getAllHasArtifact_as() {
		return Base.getAll_as(this.model, this.getResource(), HASARTIFACT, Artifact.class);
	}
 
    /**
     * Adds a value to property HasArtifact as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addHasArtifact( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, HASARTIFACT, value);
	}
	
    /**
     * Adds a value to property HasArtifact as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addHasArtifact( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), HASARTIFACT, value);
	}
    /**
     * Adds a value to property HasArtifact from an instance of Artifact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addHasArtifact(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Artifact value) {
		Base.add(model, instanceResource, HASARTIFACT, value);
	}
	
    /**
     * Adds a value to property HasArtifact from an instance of Artifact 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addHasArtifact(Artifact value) {
		Base.add(this.model, this.getResource(), HASARTIFACT, value);
	}
  

    /**
     * Sets a value of property HasArtifact from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setHasArtifact( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, HASARTIFACT, value);
	}
	
    /**
     * Sets a value of property HasArtifact from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setHasArtifact( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), HASARTIFACT, value);
	}
    /**
     * Sets a value of property HasArtifact from an instance of Artifact 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setHasArtifact(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Artifact value) {
		Base.set(model, instanceResource, HASARTIFACT, value);
	}
	
    /**
     * Sets a value of property HasArtifact from an instance of Artifact 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setHasArtifact(Artifact value) {
		Base.set(this.model, this.getResource(), HASARTIFACT, value);
	}
  


    /**
     * Removes a value of property HasArtifact as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeHasArtifact( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, HASARTIFACT, value);
	}
	
    /**
     * Removes a value of property HasArtifact as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeHasArtifact( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), HASARTIFACT, value);
	}
    /**
     * Removes a value of property HasArtifact given as an instance of Artifact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeHasArtifact(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Artifact value) {
		Base.remove(model, instanceResource, HASARTIFACT, value);
	}
	
    /**
     * Removes a value of property HasArtifact given as an instance of Artifact 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeHasArtifact(Artifact value) {
		Base.remove(this.model, this.getResource(), HASARTIFACT, value);
	}
  
    /**
     * Removes all values of property HasArtifact     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllHasArtifact( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, HASARTIFACT);
	}
	
    /**
     * Removes all values of property HasArtifact	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllHasArtifact() {
		Base.removeAll(this.model, this.getResource(), HASARTIFACT);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@699ae3 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasHasContituent(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, HASCONTITUENT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@699ae3 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasHasContituent() {
		return Base.has(this.model, this.getResource(), HASCONTITUENT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@699ae3 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasHasContituent(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, HASCONTITUENT, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@699ae3 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasHasContituent( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), HASCONTITUENT, value);
	}

     /**
     * Get all values of property HasContituent as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllHasContituent_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, HASCONTITUENT);
	}
	
    /**
     * Get all values of property HasContituent as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllHasContituent_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, HASCONTITUENT, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property HasContituent as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllHasContituent_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), HASCONTITUENT);
	}

    /**
     * Get all values of property HasContituent as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllHasContituent_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), HASCONTITUENT, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property HasContituent     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllHasContituent(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, HASCONTITUENT, Thing.class);
	}
	
    /**
     * Get all values of property HasContituent as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllHasContituent_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, HASCONTITUENT, Thing.class);
	}

    /**
     * Get all values of property HasContituent     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllHasContituent() {
		return Base.getAll(this.model, this.getResource(), HASCONTITUENT, Thing.class);
	}

    /**
     * Get all values of property HasContituent as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllHasContituent_as() {
		return Base.getAll_as(this.model, this.getResource(), HASCONTITUENT, Thing.class);
	}
 
    /**
     * Adds a value to property HasContituent as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addHasContituent( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, HASCONTITUENT, value);
	}
	
    /**
     * Adds a value to property HasContituent as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addHasContituent( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), HASCONTITUENT, value);
	}
    /**
     * Adds a value to property HasContituent from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addHasContituent(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, HASCONTITUENT, value);
	}
	
    /**
     * Adds a value to property HasContituent from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addHasContituent(Thing value) {
		Base.add(this.model, this.getResource(), HASCONTITUENT, value);
	}
  

    /**
     * Sets a value of property HasContituent from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setHasContituent( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, HASCONTITUENT, value);
	}
	
    /**
     * Sets a value of property HasContituent from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setHasContituent( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), HASCONTITUENT, value);
	}
    /**
     * Sets a value of property HasContituent from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setHasContituent(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, HASCONTITUENT, value);
	}
	
    /**
     * Sets a value of property HasContituent from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setHasContituent(Thing value) {
		Base.set(this.model, this.getResource(), HASCONTITUENT, value);
	}
  


    /**
     * Removes a value of property HasContituent as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeHasContituent( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, HASCONTITUENT, value);
	}
	
    /**
     * Removes a value of property HasContituent as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeHasContituent( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), HASCONTITUENT, value);
	}
    /**
     * Removes a value of property HasContituent given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeHasContituent(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, HASCONTITUENT, value);
	}
	
    /**
     * Removes a value of property HasContituent given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeHasContituent(Thing value) {
		Base.remove(this.model, this.getResource(), HASCONTITUENT, value);
	}
  
    /**
     * Removes all values of property HasContituent     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllHasContituent( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, HASCONTITUENT);
	}
	
    /**
     * Removes all values of property HasContituent	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllHasContituent() {
		Base.removeAll(this.model, this.getResource(), HASCONTITUENT);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@190e5dc has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasHasDependency(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, HASDEPENDENCY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@190e5dc has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasHasDependency() {
		return Base.has(this.model, this.getResource(), HASDEPENDENCY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@190e5dc has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasHasDependency(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, HASDEPENDENCY, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@190e5dc has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasHasDependency( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), HASDEPENDENCY, value);
	}

     /**
     * Get all values of property HasDependency as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllHasDependency_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, HASDEPENDENCY);
	}
	
    /**
     * Get all values of property HasDependency as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllHasDependency_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, HASDEPENDENCY, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property HasDependency as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllHasDependency_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), HASDEPENDENCY);
	}

    /**
     * Get all values of property HasDependency as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllHasDependency_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), HASDEPENDENCY, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property HasDependency     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Edge> getAllHasDependency(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, HASDEPENDENCY, Edge.class);
	}
	
    /**
     * Get all values of property HasDependency as a ReactorResult of Edge 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Edge> getAllHasDependency_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, HASDEPENDENCY, Edge.class);
	}

    /**
     * Get all values of property HasDependency     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Edge> getAllHasDependency() {
		return Base.getAll(this.model, this.getResource(), HASDEPENDENCY, Edge.class);
	}

    /**
     * Get all values of property HasDependency as a ReactorResult of Edge 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Edge> getAllHasDependency_as() {
		return Base.getAll_as(this.model, this.getResource(), HASDEPENDENCY, Edge.class);
	}
 
    /**
     * Adds a value to property HasDependency as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addHasDependency( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, HASDEPENDENCY, value);
	}
	
    /**
     * Adds a value to property HasDependency as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addHasDependency( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), HASDEPENDENCY, value);
	}
    /**
     * Adds a value to property HasDependency from an instance of Edge 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addHasDependency(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Edge value) {
		Base.add(model, instanceResource, HASDEPENDENCY, value);
	}
	
    /**
     * Adds a value to property HasDependency from an instance of Edge 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addHasDependency(Edge value) {
		Base.add(this.model, this.getResource(), HASDEPENDENCY, value);
	}
  

    /**
     * Sets a value of property HasDependency from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setHasDependency( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, HASDEPENDENCY, value);
	}
	
    /**
     * Sets a value of property HasDependency from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setHasDependency( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), HASDEPENDENCY, value);
	}
    /**
     * Sets a value of property HasDependency from an instance of Edge 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setHasDependency(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Edge value) {
		Base.set(model, instanceResource, HASDEPENDENCY, value);
	}
	
    /**
     * Sets a value of property HasDependency from an instance of Edge 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setHasDependency(Edge value) {
		Base.set(this.model, this.getResource(), HASDEPENDENCY, value);
	}
  


    /**
     * Removes a value of property HasDependency as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeHasDependency( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, HASDEPENDENCY, value);
	}
	
    /**
     * Removes a value of property HasDependency as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeHasDependency( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), HASDEPENDENCY, value);
	}
    /**
     * Removes a value of property HasDependency given as an instance of Edge 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeHasDependency(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Edge value) {
		Base.remove(model, instanceResource, HASDEPENDENCY, value);
	}
	
    /**
     * Removes a value of property HasDependency given as an instance of Edge 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeHasDependency(Edge value) {
		Base.remove(this.model, this.getResource(), HASDEPENDENCY, value);
	}
  
    /**
     * Removes all values of property HasDependency     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllHasDependency( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, HASDEPENDENCY);
	}
	
    /**
     * Removes all values of property HasDependency	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllHasDependency() {
		Base.removeAll(this.model, this.getResource(), HASDEPENDENCY);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@a294ec has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasHasProcess(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, HASPROCESS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@a294ec has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasHasProcess() {
		return Base.has(this.model, this.getResource(), HASPROCESS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@a294ec has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasHasProcess(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, HASPROCESS, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@a294ec has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasHasProcess( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), HASPROCESS, value);
	}

     /**
     * Get all values of property HasProcess as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllHasProcess_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, HASPROCESS);
	}
	
    /**
     * Get all values of property HasProcess as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllHasProcess_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, HASPROCESS, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property HasProcess as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllHasProcess_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), HASPROCESS);
	}

    /**
     * Get all values of property HasProcess as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllHasProcess_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), HASPROCESS, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property HasProcess     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Process> getAllHasProcess(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, HASPROCESS, Process.class);
	}
	
    /**
     * Get all values of property HasProcess as a ReactorResult of Process 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Process> getAllHasProcess_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, HASPROCESS, Process.class);
	}

    /**
     * Get all values of property HasProcess     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Process> getAllHasProcess() {
		return Base.getAll(this.model, this.getResource(), HASPROCESS, Process.class);
	}

    /**
     * Get all values of property HasProcess as a ReactorResult of Process 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Process> getAllHasProcess_as() {
		return Base.getAll_as(this.model, this.getResource(), HASPROCESS, Process.class);
	}
 
    /**
     * Adds a value to property HasProcess as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addHasProcess( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, HASPROCESS, value);
	}
	
    /**
     * Adds a value to property HasProcess as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addHasProcess( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), HASPROCESS, value);
	}
    /**
     * Adds a value to property HasProcess from an instance of Process 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addHasProcess(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Process value) {
		Base.add(model, instanceResource, HASPROCESS, value);
	}
	
    /**
     * Adds a value to property HasProcess from an instance of Process 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addHasProcess(Process value) {
		Base.add(this.model, this.getResource(), HASPROCESS, value);
	}
  

    /**
     * Sets a value of property HasProcess from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setHasProcess( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, HASPROCESS, value);
	}
	
    /**
     * Sets a value of property HasProcess from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setHasProcess( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), HASPROCESS, value);
	}
    /**
     * Sets a value of property HasProcess from an instance of Process 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setHasProcess(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Process value) {
		Base.set(model, instanceResource, HASPROCESS, value);
	}
	
    /**
     * Sets a value of property HasProcess from an instance of Process 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setHasProcess(Process value) {
		Base.set(this.model, this.getResource(), HASPROCESS, value);
	}
  


    /**
     * Removes a value of property HasProcess as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeHasProcess( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, HASPROCESS, value);
	}
	
    /**
     * Removes a value of property HasProcess as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeHasProcess( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), HASPROCESS, value);
	}
    /**
     * Removes a value of property HasProcess given as an instance of Process 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeHasProcess(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Process value) {
		Base.remove(model, instanceResource, HASPROCESS, value);
	}
	
    /**
     * Removes a value of property HasProcess given as an instance of Process 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeHasProcess(Process value) {
		Base.remove(this.model, this.getResource(), HASPROCESS, value);
	}
  
    /**
     * Removes all values of property HasProcess     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllHasProcess( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, HASPROCESS);
	}
	
    /**
     * Removes all values of property HasProcess	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllHasProcess() {
		Base.removeAll(this.model, this.getResource(), HASPROCESS);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4b67bc has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSessionGeneratedArtifacts(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, SESSIONGENERATEDARTIFACTS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4b67bc has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSessionGeneratedArtifacts() {
		return Base.has(this.model, this.getResource(), SESSIONGENERATEDARTIFACTS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4b67bc has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSessionGeneratedArtifacts(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, SESSIONGENERATEDARTIFACTS, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4b67bc has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSessionGeneratedArtifacts( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), SESSIONGENERATEDARTIFACTS, value);
	}

     /**
     * Get all values of property SessionGeneratedArtifacts as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSessionGeneratedArtifacts_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SESSIONGENERATEDARTIFACTS);
	}
	
    /**
     * Get all values of property SessionGeneratedArtifacts as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSessionGeneratedArtifacts_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SESSIONGENERATEDARTIFACTS, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property SessionGeneratedArtifacts as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSessionGeneratedArtifacts_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SESSIONGENERATEDARTIFACTS);
	}

    /**
     * Get all values of property SessionGeneratedArtifacts as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSessionGeneratedArtifacts_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SESSIONGENERATEDARTIFACTS, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property SessionGeneratedArtifacts     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Artifact> getAllSessionGeneratedArtifacts(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, SESSIONGENERATEDARTIFACTS, Artifact.class);
	}
	
    /**
     * Get all values of property SessionGeneratedArtifacts as a ReactorResult of Artifact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Artifact> getAllSessionGeneratedArtifacts_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SESSIONGENERATEDARTIFACTS, Artifact.class);
	}

    /**
     * Get all values of property SessionGeneratedArtifacts     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Artifact> getAllSessionGeneratedArtifacts() {
		return Base.getAll(this.model, this.getResource(), SESSIONGENERATEDARTIFACTS, Artifact.class);
	}

    /**
     * Get all values of property SessionGeneratedArtifacts as a ReactorResult of Artifact 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Artifact> getAllSessionGeneratedArtifacts_as() {
		return Base.getAll_as(this.model, this.getResource(), SESSIONGENERATEDARTIFACTS, Artifact.class);
	}
 
    /**
     * Adds a value to property SessionGeneratedArtifacts as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSessionGeneratedArtifacts( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, SESSIONGENERATEDARTIFACTS, value);
	}
	
    /**
     * Adds a value to property SessionGeneratedArtifacts as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSessionGeneratedArtifacts( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), SESSIONGENERATEDARTIFACTS, value);
	}
    /**
     * Adds a value to property SessionGeneratedArtifacts from an instance of Artifact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSessionGeneratedArtifacts(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Artifact value) {
		Base.add(model, instanceResource, SESSIONGENERATEDARTIFACTS, value);
	}
	
    /**
     * Adds a value to property SessionGeneratedArtifacts from an instance of Artifact 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSessionGeneratedArtifacts(Artifact value) {
		Base.add(this.model, this.getResource(), SESSIONGENERATEDARTIFACTS, value);
	}
  

    /**
     * Sets a value of property SessionGeneratedArtifacts from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSessionGeneratedArtifacts( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, SESSIONGENERATEDARTIFACTS, value);
	}
	
    /**
     * Sets a value of property SessionGeneratedArtifacts from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSessionGeneratedArtifacts( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), SESSIONGENERATEDARTIFACTS, value);
	}
    /**
     * Sets a value of property SessionGeneratedArtifacts from an instance of Artifact 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSessionGeneratedArtifacts(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Artifact value) {
		Base.set(model, instanceResource, SESSIONGENERATEDARTIFACTS, value);
	}
	
    /**
     * Sets a value of property SessionGeneratedArtifacts from an instance of Artifact 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSessionGeneratedArtifacts(Artifact value) {
		Base.set(this.model, this.getResource(), SESSIONGENERATEDARTIFACTS, value);
	}
  


    /**
     * Removes a value of property SessionGeneratedArtifacts as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSessionGeneratedArtifacts( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, SESSIONGENERATEDARTIFACTS, value);
	}
	
    /**
     * Removes a value of property SessionGeneratedArtifacts as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSessionGeneratedArtifacts( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), SESSIONGENERATEDARTIFACTS, value);
	}
    /**
     * Removes a value of property SessionGeneratedArtifacts given as an instance of Artifact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSessionGeneratedArtifacts(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Artifact value) {
		Base.remove(model, instanceResource, SESSIONGENERATEDARTIFACTS, value);
	}
	
    /**
     * Removes a value of property SessionGeneratedArtifacts given as an instance of Artifact 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSessionGeneratedArtifacts(Artifact value) {
		Base.remove(this.model, this.getResource(), SESSIONGENERATEDARTIFACTS, value);
	}
  
    /**
     * Removes all values of property SessionGeneratedArtifacts     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSessionGeneratedArtifacts( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, SESSIONGENERATEDARTIFACTS);
	}
	
    /**
     * Removes all values of property SessionGeneratedArtifacts	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSessionGeneratedArtifacts() {
		Base.removeAll(this.model, this.getResource(), SESSIONGENERATEDARTIFACTS);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2e90d0 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSessionUsedArtifacts(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, SESSIONUSEDARTIFACTS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2e90d0 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSessionUsedArtifacts() {
		return Base.has(this.model, this.getResource(), SESSIONUSEDARTIFACTS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2e90d0 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSessionUsedArtifacts(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, SESSIONUSEDARTIFACTS, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2e90d0 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSessionUsedArtifacts( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), SESSIONUSEDARTIFACTS, value);
	}

     /**
     * Get all values of property SessionUsedArtifacts as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSessionUsedArtifacts_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SESSIONUSEDARTIFACTS);
	}
	
    /**
     * Get all values of property SessionUsedArtifacts as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSessionUsedArtifacts_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SESSIONUSEDARTIFACTS, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property SessionUsedArtifacts as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSessionUsedArtifacts_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SESSIONUSEDARTIFACTS);
	}

    /**
     * Get all values of property SessionUsedArtifacts as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSessionUsedArtifacts_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SESSIONUSEDARTIFACTS, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property SessionUsedArtifacts     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Artifact> getAllSessionUsedArtifacts(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, SESSIONUSEDARTIFACTS, Artifact.class);
	}
	
    /**
     * Get all values of property SessionUsedArtifacts as a ReactorResult of Artifact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Artifact> getAllSessionUsedArtifacts_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SESSIONUSEDARTIFACTS, Artifact.class);
	}

    /**
     * Get all values of property SessionUsedArtifacts     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Artifact> getAllSessionUsedArtifacts() {
		return Base.getAll(this.model, this.getResource(), SESSIONUSEDARTIFACTS, Artifact.class);
	}

    /**
     * Get all values of property SessionUsedArtifacts as a ReactorResult of Artifact 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Artifact> getAllSessionUsedArtifacts_as() {
		return Base.getAll_as(this.model, this.getResource(), SESSIONUSEDARTIFACTS, Artifact.class);
	}
 
    /**
     * Adds a value to property SessionUsedArtifacts as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSessionUsedArtifacts( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, SESSIONUSEDARTIFACTS, value);
	}
	
    /**
     * Adds a value to property SessionUsedArtifacts as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSessionUsedArtifacts( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), SESSIONUSEDARTIFACTS, value);
	}
    /**
     * Adds a value to property SessionUsedArtifacts from an instance of Artifact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSessionUsedArtifacts(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Artifact value) {
		Base.add(model, instanceResource, SESSIONUSEDARTIFACTS, value);
	}
	
    /**
     * Adds a value to property SessionUsedArtifacts from an instance of Artifact 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSessionUsedArtifacts(Artifact value) {
		Base.add(this.model, this.getResource(), SESSIONUSEDARTIFACTS, value);
	}
  

    /**
     * Sets a value of property SessionUsedArtifacts from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSessionUsedArtifacts( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, SESSIONUSEDARTIFACTS, value);
	}
	
    /**
     * Sets a value of property SessionUsedArtifacts from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSessionUsedArtifacts( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), SESSIONUSEDARTIFACTS, value);
	}
    /**
     * Sets a value of property SessionUsedArtifacts from an instance of Artifact 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSessionUsedArtifacts(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Artifact value) {
		Base.set(model, instanceResource, SESSIONUSEDARTIFACTS, value);
	}
	
    /**
     * Sets a value of property SessionUsedArtifacts from an instance of Artifact 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSessionUsedArtifacts(Artifact value) {
		Base.set(this.model, this.getResource(), SESSIONUSEDARTIFACTS, value);
	}
  


    /**
     * Removes a value of property SessionUsedArtifacts as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSessionUsedArtifacts( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, SESSIONUSEDARTIFACTS, value);
	}
	
    /**
     * Removes a value of property SessionUsedArtifacts as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSessionUsedArtifacts( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), SESSIONUSEDARTIFACTS, value);
	}
    /**
     * Removes a value of property SessionUsedArtifacts given as an instance of Artifact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSessionUsedArtifacts(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Artifact value) {
		Base.remove(model, instanceResource, SESSIONUSEDARTIFACTS, value);
	}
	
    /**
     * Removes a value of property SessionUsedArtifacts given as an instance of Artifact 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSessionUsedArtifacts(Artifact value) {
		Base.remove(this.model, this.getResource(), SESSIONUSEDARTIFACTS, value);
	}
  
    /**
     * Removes all values of property SessionUsedArtifacts     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSessionUsedArtifacts( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, SESSIONUSEDARTIFACTS);
	}
	
    /**
     * Removes all values of property SessionUsedArtifacts	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSessionUsedArtifacts() {
		Base.removeAll(this.model, this.getResource(), SESSIONUSEDARTIFACTS);
	}
 }