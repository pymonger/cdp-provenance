/**
 * generated by http://RDFReactor.semweb4j.org ($Id: CodeGenerator.java 1765 2010-02-11 09:51:13Z max.at.xam.de $) on 10/2/12 2:28 PM
 */
package gov.nasa.jpl.cdp.provenance.prov;

import org.ontoware.aifbcommons.collection.ClosableIterator;
import org.ontoware.rdf2go.exception.ModelRuntimeException;
import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.BlankNode;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdfreactor.runtime.Base;
import org.ontoware.rdfreactor.runtime.ReactorResult;

/**
 * This class manages access to these properties:
 * <ul>
 *   <li> EndedAtTime </li>
 *   <li> Generated </li>
 *   <li> Invalidated </li>
 *   <li> QualifiedAssociation </li>
 *   <li> QualifiedCommunication </li>
 *   <li> QualifiedEnd </li>
 *   <li> QualifiedStart </li>
 *   <li> QualifiedUsage </li>
 *   <li> StartedAtTime </li>
 *   <li> Used </li>
 *   <li> WasAssociatedWith </li>
 *   <li> WasEndedBy </li>
 *   <li> WasInformedBy </li>
 *   <li> WasStartedBy </li>
 * </ul>
 *
 * This class was generated by <a href="http://RDFReactor.semweb4j.org">RDFReactor</a> on 10/2/12 2:28 PM
 */
public class Activity extends A_1 {

    /** http://www.w3.org/ns/prov#Activity */
	@SuppressWarnings("hiding")
	public static final URI RDFS_CLASS = new URIImpl("http://www.w3.org/ns/prov#Activity", false);

    /** http://www.w3.org/ns/prov#endedAtTime */
	public static final URI ENDEDATTIME = new URIImpl("http://www.w3.org/ns/prov#endedAtTime",false);

    /** http://www.w3.org/ns/prov#generated */
	public static final URI GENERATED = new URIImpl("http://www.w3.org/ns/prov#generated",false);

    /** http://www.w3.org/ns/prov#invalidated */
	public static final URI INVALIDATED = new URIImpl("http://www.w3.org/ns/prov#invalidated",false);

    /** http://www.w3.org/ns/prov#qualifiedAssociation */
	public static final URI QUALIFIEDASSOCIATION = new URIImpl("http://www.w3.org/ns/prov#qualifiedAssociation",false);

    /** http://www.w3.org/ns/prov#qualifiedCommunication */
	public static final URI QUALIFIEDCOMMUNICATION = new URIImpl("http://www.w3.org/ns/prov#qualifiedCommunication",false);

    /** http://www.w3.org/ns/prov#qualifiedEnd */
	public static final URI QUALIFIEDEND = new URIImpl("http://www.w3.org/ns/prov#qualifiedEnd",false);

    /** http://www.w3.org/ns/prov#qualifiedStart */
	public static final URI QUALIFIEDSTART = new URIImpl("http://www.w3.org/ns/prov#qualifiedStart",false);

    /** http://www.w3.org/ns/prov#qualifiedUsage */
	public static final URI QUALIFIEDUSAGE = new URIImpl("http://www.w3.org/ns/prov#qualifiedUsage",false);

    /** http://www.w3.org/ns/prov#startedAtTime */
	public static final URI STARTEDATTIME = new URIImpl("http://www.w3.org/ns/prov#startedAtTime",false);

    /** http://www.w3.org/ns/prov#used */
	public static final URI USED = new URIImpl("http://www.w3.org/ns/prov#used",false);

    /** http://www.w3.org/ns/prov#wasAssociatedWith */
	public static final URI WASASSOCIATEDWITH = new URIImpl("http://www.w3.org/ns/prov#wasAssociatedWith",false);

    /** http://www.w3.org/ns/prov#wasEndedBy */
	public static final URI WASENDEDBY = new URIImpl("http://www.w3.org/ns/prov#wasEndedBy",false);

    /** http://www.w3.org/ns/prov#wasInformedBy */
	public static final URI WASINFORMEDBY = new URIImpl("http://www.w3.org/ns/prov#wasInformedBy",false);

    /** http://www.w3.org/ns/prov#wasStartedBy */
	public static final URI WASSTARTEDBY = new URIImpl("http://www.w3.org/ns/prov#wasStartedBy",false);

    /** 
     * All property-URIs with this class as domain.
     * All properties of all super-classes are also available. 
     */
	@SuppressWarnings("hiding")
    public static final URI[] MANAGED_URIS = {
      new URIImpl("http://www.w3.org/ns/prov#endedAtTime",false),
      new URIImpl("http://www.w3.org/ns/prov#generated",false),
      new URIImpl("http://www.w3.org/ns/prov#invalidated",false),
      new URIImpl("http://www.w3.org/ns/prov#qualifiedAssociation",false),
      new URIImpl("http://www.w3.org/ns/prov#qualifiedCommunication",false),
      new URIImpl("http://www.w3.org/ns/prov#qualifiedEnd",false),
      new URIImpl("http://www.w3.org/ns/prov#qualifiedStart",false),
      new URIImpl("http://www.w3.org/ns/prov#qualifiedUsage",false),
      new URIImpl("http://www.w3.org/ns/prov#startedAtTime",false),
      new URIImpl("http://www.w3.org/ns/prov#used",false),
      new URIImpl("http://www.w3.org/ns/prov#wasAssociatedWith",false),
      new URIImpl("http://www.w3.org/ns/prov#wasEndedBy",false),
      new URIImpl("http://www.w3.org/ns/prov#wasInformedBy",false),
      new URIImpl("http://www.w3.org/ns/prov#wasStartedBy",false) 
    };


	// protected constructors needed for inheritance
	
	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.semweb4j.org
	 * @param classURI URI of RDFS class
	 * @param instanceIdentifier Resource that identifies this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c1] 
	 */
	protected Activity ( Model model, URI classURI, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, classURI, instanceIdentifier, write);
	}

	// public constructors

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param instanceIdentifier an RDF2Go Resource identifying this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c2] 
	 */
	public Activity ( Model model, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, RDFS_CLASS, instanceIdentifier, write);
	}


	/**
	 * Returns a Java wrapper over an RDF object, identified by a URI, given as a String.
	 * Creating two wrappers for the same URI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uriString a URI given as a String
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 * @throws ModelRuntimeException if URI syntax is wrong
	 *
	 * [Generated from RDFReactor template rule #c7] 
	 */
	public Activity ( Model model, String uriString, boolean write) throws ModelRuntimeException {
		super(model, RDFS_CLASS, new URIImpl(uriString,false), write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by a blank node.
	 * Creating two wrappers for the same blank node is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param bnode BlankNode of this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c8] 
	 */
	public Activity ( Model model, BlankNode bnode, boolean write ) {
		super(model, RDFS_CLASS, bnode, write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by 
	 * a randomly generated URI.
	 * Creating two wrappers results in different URIs.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c9] 
	 */
	public Activity ( Model model, boolean write ) {
		super(model, RDFS_CLASS, model.newRandomUniqueURI(), write);
	}

    ///////////////////////////////////////////////////////////////////
    // typing

	/**
	 * Return an existing instance of this class in the model. No statements are written.
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return an instance of Activity  or null if none existst
	 *
	 * [Generated from RDFReactor template rule #class0] 
	 */
	public static Activity  getInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getInstance(model, instanceResource, Activity.class);
	}

	/**
	 * Create a new instance of this class in the model. 
	 * That is, create the statement (instanceResource, RDF.type, http://www.w3.org/ns/prov#Activity).
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class1] 
	 */
	public static void createInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.createInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return true if instanceResource is an instance of this class in the model
	 *
	 * [Generated from RDFReactor template rule #class2] 
	 */
	public static boolean hasInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.hasInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as RDF resources
	 *
	 * [Generated from RDFReactor template rule #class3] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInstances(Model model) {
		return Base.getAllInstances(model, RDFS_CLASS, org.ontoware.rdf2go.model.node.Resource.class);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as a ReactorResult,
	 * which can conveniently be converted to iterator, list or array.
	 *
	 * [Generated from RDFReactor template rule #class3-as] 
	 */
	public static ReactorResult<? extends Activity> getAllInstances_as(Model model) {
		return Base.getAllInstances_as(model, RDFS_CLASS, Activity.class );
	}

    /**
	 * Remove rdf:type Activity from this instance. Other triples are not affected.
	 * To delete more, use deleteAllProperties
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class4] 
	 */
	public static void deleteInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * Delete all (this, *, *), i.e. including rdf:type
	 * @param model an RDF2Go model
	 * @param resource
	 */
	public static void deleteAllProperties(Model model,	org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteAllProperties(model, instanceResource);
	}

    ///////////////////////////////////////////////////////////////////
    // property access methods

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'WasInformedBy' to this Activity instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllWasInformedBy_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Activity.WASINFORMEDBY, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'WasInformedBy' to this Activity instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllWasInformedBy_Inverse() {
		return Base.getAll_Inverse(this.model, Activity.WASINFORMEDBY, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'WasInformedBy' to this Activity instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllWasInformedBy_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Activity.WASINFORMEDBY, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'HadActivity' to this Activity instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllHadActivity_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, A_1.HADACTIVITY, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'HadActivity' to this Activity instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllHadActivity_Inverse() {
		return Base.getAll_Inverse(this.model, A_1.HADACTIVITY, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'HadActivity' to this Activity instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllHadActivity_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, A_1.HADACTIVITY, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Activity' to this Activity instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllActivity_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, ActivityInfluence.ACTIVITY, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Activity' to this Activity instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllActivity_Inverse() {
		return Base.getAll_Inverse(this.model, ActivityInfluence.ACTIVITY, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Activity' to this Activity instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllActivity_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, ActivityInfluence.ACTIVITY, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'WasGeneratedBy' to this Activity instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllWasGeneratedBy_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Entity.WASGENERATEDBY, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'WasGeneratedBy' to this Activity instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllWasGeneratedBy_Inverse() {
		return Base.getAll_Inverse(this.model, Entity.WASGENERATEDBY, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'WasGeneratedBy' to this Activity instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllWasGeneratedBy_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Entity.WASGENERATEDBY, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'WasInvalidatedBy' to this Activity instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllWasInvalidatedBy_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Entity.WASINVALIDATEDBY, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'WasInvalidatedBy' to this Activity instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllWasInvalidatedBy_Inverse() {
		return Base.getAll_Inverse(this.model, Entity.WASINVALIDATEDBY, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'WasInvalidatedBy' to this Activity instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllWasInvalidatedBy_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Entity.WASINVALIDATEDBY, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}



    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@e716bb has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasEndedAtTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, ENDEDATTIME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@e716bb has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasEndedAtTime() {
		return Base.has(this.model, this.getResource(), ENDEDATTIME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@e716bb has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasEndedAtTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, ENDEDATTIME, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@e716bb has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasEndedAtTime( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), ENDEDATTIME, value);
	}

     /**
     * Get all values of property EndedAtTime as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllEndedAtTime_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, ENDEDATTIME);
	}
	
    /**
     * Get all values of property EndedAtTime as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllEndedAtTime_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ENDEDATTIME, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property EndedAtTime as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllEndedAtTime_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), ENDEDATTIME);
	}

    /**
     * Get all values of property EndedAtTime as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllEndedAtTime_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), ENDEDATTIME, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property EndedAtTime     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.util.Calendar> getAllEndedAtTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, ENDEDATTIME, java.util.Calendar.class);
	}
	
    /**
     * Get all values of property EndedAtTime as a ReactorResult of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.util.Calendar> getAllEndedAtTime_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ENDEDATTIME, java.util.Calendar.class);
	}

    /**
     * Get all values of property EndedAtTime     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.util.Calendar> getAllEndedAtTime() {
		return Base.getAll(this.model, this.getResource(), ENDEDATTIME, java.util.Calendar.class);
	}

    /**
     * Get all values of property EndedAtTime as a ReactorResult of java.util.Calendar 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.util.Calendar> getAllEndedAtTime_as() {
		return Base.getAll_as(this.model, this.getResource(), ENDEDATTIME, java.util.Calendar.class);
	}
 
    /**
     * Adds a value to property EndedAtTime as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addEndedAtTime( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, ENDEDATTIME, value);
	}
	
    /**
     * Adds a value to property EndedAtTime as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addEndedAtTime( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), ENDEDATTIME, value);
	}
    /**
     * Adds a value to property EndedAtTime from an instance of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addEndedAtTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.add(model, instanceResource, ENDEDATTIME, value);
	}
	
    /**
     * Adds a value to property EndedAtTime from an instance of java.util.Calendar 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addEndedAtTime(java.util.Calendar value) {
		Base.add(this.model, this.getResource(), ENDEDATTIME, value);
	}
  

    /**
     * Sets a value of property EndedAtTime from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setEndedAtTime( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, ENDEDATTIME, value);
	}
	
    /**
     * Sets a value of property EndedAtTime from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setEndedAtTime( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), ENDEDATTIME, value);
	}
    /**
     * Sets a value of property EndedAtTime from an instance of java.util.Calendar 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setEndedAtTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.set(model, instanceResource, ENDEDATTIME, value);
	}
	
    /**
     * Sets a value of property EndedAtTime from an instance of java.util.Calendar 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setEndedAtTime(java.util.Calendar value) {
		Base.set(this.model, this.getResource(), ENDEDATTIME, value);
	}
  


    /**
     * Removes a value of property EndedAtTime as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeEndedAtTime( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, ENDEDATTIME, value);
	}
	
    /**
     * Removes a value of property EndedAtTime as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeEndedAtTime( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), ENDEDATTIME, value);
	}
    /**
     * Removes a value of property EndedAtTime given as an instance of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeEndedAtTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.remove(model, instanceResource, ENDEDATTIME, value);
	}
	
    /**
     * Removes a value of property EndedAtTime given as an instance of java.util.Calendar 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeEndedAtTime(java.util.Calendar value) {
		Base.remove(this.model, this.getResource(), ENDEDATTIME, value);
	}
  
    /**
     * Removes all values of property EndedAtTime     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllEndedAtTime( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, ENDEDATTIME);
	}
	
    /**
     * Removes all values of property EndedAtTime	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllEndedAtTime() {
		Base.removeAll(this.model, this.getResource(), ENDEDATTIME);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@173e7d0 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasGenerated(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, GENERATED);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@173e7d0 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasGenerated() {
		return Base.has(this.model, this.getResource(), GENERATED);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@173e7d0 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasGenerated(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, GENERATED, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@173e7d0 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasGenerated( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), GENERATED, value);
	}

     /**
     * Get all values of property Generated as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllGenerated_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, GENERATED);
	}
	
    /**
     * Get all values of property Generated as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllGenerated_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, GENERATED, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Generated as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllGenerated_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), GENERATED);
	}

    /**
     * Get all values of property Generated as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllGenerated_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), GENERATED, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Generated     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Entity> getAllGenerated(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, GENERATED, Entity.class);
	}
	
    /**
     * Get all values of property Generated as a ReactorResult of Entity 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Entity> getAllGenerated_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, GENERATED, Entity.class);
	}

    /**
     * Get all values of property Generated     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Entity> getAllGenerated() {
		return Base.getAll(this.model, this.getResource(), GENERATED, Entity.class);
	}

    /**
     * Get all values of property Generated as a ReactorResult of Entity 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Entity> getAllGenerated_as() {
		return Base.getAll_as(this.model, this.getResource(), GENERATED, Entity.class);
	}
 
    /**
     * Adds a value to property Generated as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addGenerated( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, GENERATED, value);
	}
	
    /**
     * Adds a value to property Generated as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addGenerated( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), GENERATED, value);
	}
    /**
     * Adds a value to property Generated from an instance of Entity 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addGenerated(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Entity value) {
		Base.add(model, instanceResource, GENERATED, value);
	}
	
    /**
     * Adds a value to property Generated from an instance of Entity 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addGenerated(Entity value) {
		Base.add(this.model, this.getResource(), GENERATED, value);
	}
  

    /**
     * Sets a value of property Generated from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setGenerated( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, GENERATED, value);
	}
	
    /**
     * Sets a value of property Generated from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setGenerated( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), GENERATED, value);
	}
    /**
     * Sets a value of property Generated from an instance of Entity 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setGenerated(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Entity value) {
		Base.set(model, instanceResource, GENERATED, value);
	}
	
    /**
     * Sets a value of property Generated from an instance of Entity 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setGenerated(Entity value) {
		Base.set(this.model, this.getResource(), GENERATED, value);
	}
  


    /**
     * Removes a value of property Generated as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeGenerated( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, GENERATED, value);
	}
	
    /**
     * Removes a value of property Generated as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeGenerated( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), GENERATED, value);
	}
    /**
     * Removes a value of property Generated given as an instance of Entity 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeGenerated(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Entity value) {
		Base.remove(model, instanceResource, GENERATED, value);
	}
	
    /**
     * Removes a value of property Generated given as an instance of Entity 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeGenerated(Entity value) {
		Base.remove(this.model, this.getResource(), GENERATED, value);
	}
  
    /**
     * Removes all values of property Generated     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllGenerated( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, GENERATED);
	}
	
    /**
     * Removes all values of property Generated	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllGenerated() {
		Base.removeAll(this.model, this.getResource(), GENERATED);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@31decc has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasInvalidated(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, INVALIDATED);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@31decc has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasInvalidated() {
		return Base.has(this.model, this.getResource(), INVALIDATED);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@31decc has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasInvalidated(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, INVALIDATED, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@31decc has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasInvalidated( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), INVALIDATED, value);
	}

     /**
     * Get all values of property Invalidated as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllInvalidated_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, INVALIDATED);
	}
	
    /**
     * Get all values of property Invalidated as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllInvalidated_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, INVALIDATED, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Invalidated as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllInvalidated_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), INVALIDATED);
	}

    /**
     * Get all values of property Invalidated as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllInvalidated_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), INVALIDATED, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Invalidated     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Entity> getAllInvalidated(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, INVALIDATED, Entity.class);
	}
	
    /**
     * Get all values of property Invalidated as a ReactorResult of Entity 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Entity> getAllInvalidated_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, INVALIDATED, Entity.class);
	}

    /**
     * Get all values of property Invalidated     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Entity> getAllInvalidated() {
		return Base.getAll(this.model, this.getResource(), INVALIDATED, Entity.class);
	}

    /**
     * Get all values of property Invalidated as a ReactorResult of Entity 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Entity> getAllInvalidated_as() {
		return Base.getAll_as(this.model, this.getResource(), INVALIDATED, Entity.class);
	}
 
    /**
     * Adds a value to property Invalidated as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addInvalidated( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, INVALIDATED, value);
	}
	
    /**
     * Adds a value to property Invalidated as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addInvalidated( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), INVALIDATED, value);
	}
    /**
     * Adds a value to property Invalidated from an instance of Entity 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addInvalidated(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Entity value) {
		Base.add(model, instanceResource, INVALIDATED, value);
	}
	
    /**
     * Adds a value to property Invalidated from an instance of Entity 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addInvalidated(Entity value) {
		Base.add(this.model, this.getResource(), INVALIDATED, value);
	}
  

    /**
     * Sets a value of property Invalidated from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setInvalidated( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, INVALIDATED, value);
	}
	
    /**
     * Sets a value of property Invalidated from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setInvalidated( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), INVALIDATED, value);
	}
    /**
     * Sets a value of property Invalidated from an instance of Entity 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setInvalidated(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Entity value) {
		Base.set(model, instanceResource, INVALIDATED, value);
	}
	
    /**
     * Sets a value of property Invalidated from an instance of Entity 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setInvalidated(Entity value) {
		Base.set(this.model, this.getResource(), INVALIDATED, value);
	}
  


    /**
     * Removes a value of property Invalidated as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeInvalidated( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, INVALIDATED, value);
	}
	
    /**
     * Removes a value of property Invalidated as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeInvalidated( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), INVALIDATED, value);
	}
    /**
     * Removes a value of property Invalidated given as an instance of Entity 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeInvalidated(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Entity value) {
		Base.remove(model, instanceResource, INVALIDATED, value);
	}
	
    /**
     * Removes a value of property Invalidated given as an instance of Entity 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeInvalidated(Entity value) {
		Base.remove(this.model, this.getResource(), INVALIDATED, value);
	}
  
    /**
     * Removes all values of property Invalidated     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllInvalidated( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, INVALIDATED);
	}
	
    /**
     * Removes all values of property Invalidated	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllInvalidated() {
		Base.removeAll(this.model, this.getResource(), INVALIDATED);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@181b9f7 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasQualifiedAssociation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, QUALIFIEDASSOCIATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@181b9f7 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasQualifiedAssociation() {
		return Base.has(this.model, this.getResource(), QUALIFIEDASSOCIATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@181b9f7 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasQualifiedAssociation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, QUALIFIEDASSOCIATION, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@181b9f7 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasQualifiedAssociation( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), QUALIFIEDASSOCIATION, value);
	}

     /**
     * Get all values of property QualifiedAssociation as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllQualifiedAssociation_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, QUALIFIEDASSOCIATION);
	}
	
    /**
     * Get all values of property QualifiedAssociation as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllQualifiedAssociation_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, QUALIFIEDASSOCIATION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property QualifiedAssociation as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllQualifiedAssociation_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), QUALIFIEDASSOCIATION);
	}

    /**
     * Get all values of property QualifiedAssociation as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllQualifiedAssociation_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), QUALIFIEDASSOCIATION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property QualifiedAssociation     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Association> getAllQualifiedAssociation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, QUALIFIEDASSOCIATION, Association.class);
	}
	
    /**
     * Get all values of property QualifiedAssociation as a ReactorResult of Association 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Association> getAllQualifiedAssociation_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, QUALIFIEDASSOCIATION, Association.class);
	}

    /**
     * Get all values of property QualifiedAssociation     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Association> getAllQualifiedAssociation() {
		return Base.getAll(this.model, this.getResource(), QUALIFIEDASSOCIATION, Association.class);
	}

    /**
     * Get all values of property QualifiedAssociation as a ReactorResult of Association 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Association> getAllQualifiedAssociation_as() {
		return Base.getAll_as(this.model, this.getResource(), QUALIFIEDASSOCIATION, Association.class);
	}
 
    /**
     * Adds a value to property QualifiedAssociation as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addQualifiedAssociation( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, QUALIFIEDASSOCIATION, value);
	}
	
    /**
     * Adds a value to property QualifiedAssociation as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addQualifiedAssociation( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), QUALIFIEDASSOCIATION, value);
	}
    /**
     * Adds a value to property QualifiedAssociation from an instance of Association 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addQualifiedAssociation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Association value) {
		Base.add(model, instanceResource, QUALIFIEDASSOCIATION, value);
	}
	
    /**
     * Adds a value to property QualifiedAssociation from an instance of Association 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addQualifiedAssociation(Association value) {
		Base.add(this.model, this.getResource(), QUALIFIEDASSOCIATION, value);
	}
  

    /**
     * Sets a value of property QualifiedAssociation from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setQualifiedAssociation( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, QUALIFIEDASSOCIATION, value);
	}
	
    /**
     * Sets a value of property QualifiedAssociation from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setQualifiedAssociation( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), QUALIFIEDASSOCIATION, value);
	}
    /**
     * Sets a value of property QualifiedAssociation from an instance of Association 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setQualifiedAssociation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Association value) {
		Base.set(model, instanceResource, QUALIFIEDASSOCIATION, value);
	}
	
    /**
     * Sets a value of property QualifiedAssociation from an instance of Association 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setQualifiedAssociation(Association value) {
		Base.set(this.model, this.getResource(), QUALIFIEDASSOCIATION, value);
	}
  


    /**
     * Removes a value of property QualifiedAssociation as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeQualifiedAssociation( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, QUALIFIEDASSOCIATION, value);
	}
	
    /**
     * Removes a value of property QualifiedAssociation as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeQualifiedAssociation( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), QUALIFIEDASSOCIATION, value);
	}
    /**
     * Removes a value of property QualifiedAssociation given as an instance of Association 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeQualifiedAssociation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Association value) {
		Base.remove(model, instanceResource, QUALIFIEDASSOCIATION, value);
	}
	
    /**
     * Removes a value of property QualifiedAssociation given as an instance of Association 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeQualifiedAssociation(Association value) {
		Base.remove(this.model, this.getResource(), QUALIFIEDASSOCIATION, value);
	}
  
    /**
     * Removes all values of property QualifiedAssociation     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllQualifiedAssociation( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, QUALIFIEDASSOCIATION);
	}
	
    /**
     * Removes all values of property QualifiedAssociation	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllQualifiedAssociation() {
		Base.removeAll(this.model, this.getResource(), QUALIFIEDASSOCIATION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@96ff60 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasQualifiedCommunication(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, QUALIFIEDCOMMUNICATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@96ff60 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasQualifiedCommunication() {
		return Base.has(this.model, this.getResource(), QUALIFIEDCOMMUNICATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@96ff60 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasQualifiedCommunication(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, QUALIFIEDCOMMUNICATION, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@96ff60 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasQualifiedCommunication( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), QUALIFIEDCOMMUNICATION, value);
	}

     /**
     * Get all values of property QualifiedCommunication as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllQualifiedCommunication_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, QUALIFIEDCOMMUNICATION);
	}
	
    /**
     * Get all values of property QualifiedCommunication as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllQualifiedCommunication_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, QUALIFIEDCOMMUNICATION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property QualifiedCommunication as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllQualifiedCommunication_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), QUALIFIEDCOMMUNICATION);
	}

    /**
     * Get all values of property QualifiedCommunication as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllQualifiedCommunication_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), QUALIFIEDCOMMUNICATION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property QualifiedCommunication     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Communication> getAllQualifiedCommunication(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, QUALIFIEDCOMMUNICATION, Communication.class);
	}
	
    /**
     * Get all values of property QualifiedCommunication as a ReactorResult of Communication 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Communication> getAllQualifiedCommunication_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, QUALIFIEDCOMMUNICATION, Communication.class);
	}

    /**
     * Get all values of property QualifiedCommunication     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Communication> getAllQualifiedCommunication() {
		return Base.getAll(this.model, this.getResource(), QUALIFIEDCOMMUNICATION, Communication.class);
	}

    /**
     * Get all values of property QualifiedCommunication as a ReactorResult of Communication 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Communication> getAllQualifiedCommunication_as() {
		return Base.getAll_as(this.model, this.getResource(), QUALIFIEDCOMMUNICATION, Communication.class);
	}
 
    /**
     * Adds a value to property QualifiedCommunication as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addQualifiedCommunication( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, QUALIFIEDCOMMUNICATION, value);
	}
	
    /**
     * Adds a value to property QualifiedCommunication as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addQualifiedCommunication( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), QUALIFIEDCOMMUNICATION, value);
	}
    /**
     * Adds a value to property QualifiedCommunication from an instance of Communication 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addQualifiedCommunication(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Communication value) {
		Base.add(model, instanceResource, QUALIFIEDCOMMUNICATION, value);
	}
	
    /**
     * Adds a value to property QualifiedCommunication from an instance of Communication 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addQualifiedCommunication(Communication value) {
		Base.add(this.model, this.getResource(), QUALIFIEDCOMMUNICATION, value);
	}
  

    /**
     * Sets a value of property QualifiedCommunication from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setQualifiedCommunication( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, QUALIFIEDCOMMUNICATION, value);
	}
	
    /**
     * Sets a value of property QualifiedCommunication from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setQualifiedCommunication( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), QUALIFIEDCOMMUNICATION, value);
	}
    /**
     * Sets a value of property QualifiedCommunication from an instance of Communication 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setQualifiedCommunication(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Communication value) {
		Base.set(model, instanceResource, QUALIFIEDCOMMUNICATION, value);
	}
	
    /**
     * Sets a value of property QualifiedCommunication from an instance of Communication 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setQualifiedCommunication(Communication value) {
		Base.set(this.model, this.getResource(), QUALIFIEDCOMMUNICATION, value);
	}
  


    /**
     * Removes a value of property QualifiedCommunication as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeQualifiedCommunication( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, QUALIFIEDCOMMUNICATION, value);
	}
	
    /**
     * Removes a value of property QualifiedCommunication as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeQualifiedCommunication( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), QUALIFIEDCOMMUNICATION, value);
	}
    /**
     * Removes a value of property QualifiedCommunication given as an instance of Communication 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeQualifiedCommunication(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Communication value) {
		Base.remove(model, instanceResource, QUALIFIEDCOMMUNICATION, value);
	}
	
    /**
     * Removes a value of property QualifiedCommunication given as an instance of Communication 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeQualifiedCommunication(Communication value) {
		Base.remove(this.model, this.getResource(), QUALIFIEDCOMMUNICATION, value);
	}
  
    /**
     * Removes all values of property QualifiedCommunication     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllQualifiedCommunication( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, QUALIFIEDCOMMUNICATION);
	}
	
    /**
     * Removes all values of property QualifiedCommunication	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllQualifiedCommunication() {
		Base.removeAll(this.model, this.getResource(), QUALIFIEDCOMMUNICATION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1b933cb has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasQualifiedEnd(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, QUALIFIEDEND);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1b933cb has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasQualifiedEnd() {
		return Base.has(this.model, this.getResource(), QUALIFIEDEND);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1b933cb has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasQualifiedEnd(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, QUALIFIEDEND, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1b933cb has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasQualifiedEnd( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), QUALIFIEDEND, value);
	}

     /**
     * Get all values of property QualifiedEnd as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllQualifiedEnd_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, QUALIFIEDEND);
	}
	
    /**
     * Get all values of property QualifiedEnd as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllQualifiedEnd_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, QUALIFIEDEND, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property QualifiedEnd as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllQualifiedEnd_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), QUALIFIEDEND);
	}

    /**
     * Get all values of property QualifiedEnd as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllQualifiedEnd_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), QUALIFIEDEND, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property QualifiedEnd     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<End> getAllQualifiedEnd(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, QUALIFIEDEND, End.class);
	}
	
    /**
     * Get all values of property QualifiedEnd as a ReactorResult of End 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<End> getAllQualifiedEnd_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, QUALIFIEDEND, End.class);
	}

    /**
     * Get all values of property QualifiedEnd     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<End> getAllQualifiedEnd() {
		return Base.getAll(this.model, this.getResource(), QUALIFIEDEND, End.class);
	}

    /**
     * Get all values of property QualifiedEnd as a ReactorResult of End 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<End> getAllQualifiedEnd_as() {
		return Base.getAll_as(this.model, this.getResource(), QUALIFIEDEND, End.class);
	}
 
    /**
     * Adds a value to property QualifiedEnd as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addQualifiedEnd( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, QUALIFIEDEND, value);
	}
	
    /**
     * Adds a value to property QualifiedEnd as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addQualifiedEnd( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), QUALIFIEDEND, value);
	}
    /**
     * Adds a value to property QualifiedEnd from an instance of End 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addQualifiedEnd(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, End value) {
		Base.add(model, instanceResource, QUALIFIEDEND, value);
	}
	
    /**
     * Adds a value to property QualifiedEnd from an instance of End 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addQualifiedEnd(End value) {
		Base.add(this.model, this.getResource(), QUALIFIEDEND, value);
	}
  

    /**
     * Sets a value of property QualifiedEnd from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setQualifiedEnd( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, QUALIFIEDEND, value);
	}
	
    /**
     * Sets a value of property QualifiedEnd from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setQualifiedEnd( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), QUALIFIEDEND, value);
	}
    /**
     * Sets a value of property QualifiedEnd from an instance of End 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setQualifiedEnd(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, End value) {
		Base.set(model, instanceResource, QUALIFIEDEND, value);
	}
	
    /**
     * Sets a value of property QualifiedEnd from an instance of End 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setQualifiedEnd(End value) {
		Base.set(this.model, this.getResource(), QUALIFIEDEND, value);
	}
  


    /**
     * Removes a value of property QualifiedEnd as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeQualifiedEnd( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, QUALIFIEDEND, value);
	}
	
    /**
     * Removes a value of property QualifiedEnd as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeQualifiedEnd( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), QUALIFIEDEND, value);
	}
    /**
     * Removes a value of property QualifiedEnd given as an instance of End 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeQualifiedEnd(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, End value) {
		Base.remove(model, instanceResource, QUALIFIEDEND, value);
	}
	
    /**
     * Removes a value of property QualifiedEnd given as an instance of End 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeQualifiedEnd(End value) {
		Base.remove(this.model, this.getResource(), QUALIFIEDEND, value);
	}
  
    /**
     * Removes all values of property QualifiedEnd     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllQualifiedEnd( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, QUALIFIEDEND);
	}
	
    /**
     * Removes all values of property QualifiedEnd	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllQualifiedEnd() {
		Base.removeAll(this.model, this.getResource(), QUALIFIEDEND);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@194547c has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasQualifiedStart(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, QUALIFIEDSTART);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@194547c has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasQualifiedStart() {
		return Base.has(this.model, this.getResource(), QUALIFIEDSTART);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@194547c has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasQualifiedStart(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, QUALIFIEDSTART, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@194547c has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasQualifiedStart( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), QUALIFIEDSTART, value);
	}

     /**
     * Get all values of property QualifiedStart as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllQualifiedStart_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, QUALIFIEDSTART);
	}
	
    /**
     * Get all values of property QualifiedStart as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllQualifiedStart_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, QUALIFIEDSTART, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property QualifiedStart as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllQualifiedStart_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), QUALIFIEDSTART);
	}

    /**
     * Get all values of property QualifiedStart as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllQualifiedStart_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), QUALIFIEDSTART, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property QualifiedStart     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Start> getAllQualifiedStart(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, QUALIFIEDSTART, Start.class);
	}
	
    /**
     * Get all values of property QualifiedStart as a ReactorResult of Start 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Start> getAllQualifiedStart_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, QUALIFIEDSTART, Start.class);
	}

    /**
     * Get all values of property QualifiedStart     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Start> getAllQualifiedStart() {
		return Base.getAll(this.model, this.getResource(), QUALIFIEDSTART, Start.class);
	}

    /**
     * Get all values of property QualifiedStart as a ReactorResult of Start 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Start> getAllQualifiedStart_as() {
		return Base.getAll_as(this.model, this.getResource(), QUALIFIEDSTART, Start.class);
	}
 
    /**
     * Adds a value to property QualifiedStart as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addQualifiedStart( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, QUALIFIEDSTART, value);
	}
	
    /**
     * Adds a value to property QualifiedStart as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addQualifiedStart( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), QUALIFIEDSTART, value);
	}
    /**
     * Adds a value to property QualifiedStart from an instance of Start 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addQualifiedStart(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Start value) {
		Base.add(model, instanceResource, QUALIFIEDSTART, value);
	}
	
    /**
     * Adds a value to property QualifiedStart from an instance of Start 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addQualifiedStart(Start value) {
		Base.add(this.model, this.getResource(), QUALIFIEDSTART, value);
	}
  

    /**
     * Sets a value of property QualifiedStart from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setQualifiedStart( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, QUALIFIEDSTART, value);
	}
	
    /**
     * Sets a value of property QualifiedStart from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setQualifiedStart( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), QUALIFIEDSTART, value);
	}
    /**
     * Sets a value of property QualifiedStart from an instance of Start 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setQualifiedStart(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Start value) {
		Base.set(model, instanceResource, QUALIFIEDSTART, value);
	}
	
    /**
     * Sets a value of property QualifiedStart from an instance of Start 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setQualifiedStart(Start value) {
		Base.set(this.model, this.getResource(), QUALIFIEDSTART, value);
	}
  


    /**
     * Removes a value of property QualifiedStart as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeQualifiedStart( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, QUALIFIEDSTART, value);
	}
	
    /**
     * Removes a value of property QualifiedStart as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeQualifiedStart( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), QUALIFIEDSTART, value);
	}
    /**
     * Removes a value of property QualifiedStart given as an instance of Start 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeQualifiedStart(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Start value) {
		Base.remove(model, instanceResource, QUALIFIEDSTART, value);
	}
	
    /**
     * Removes a value of property QualifiedStart given as an instance of Start 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeQualifiedStart(Start value) {
		Base.remove(this.model, this.getResource(), QUALIFIEDSTART, value);
	}
  
    /**
     * Removes all values of property QualifiedStart     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllQualifiedStart( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, QUALIFIEDSTART);
	}
	
    /**
     * Removes all values of property QualifiedStart	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllQualifiedStart() {
		Base.removeAll(this.model, this.getResource(), QUALIFIEDSTART);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@13e7c0b has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasQualifiedUsage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, QUALIFIEDUSAGE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@13e7c0b has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasQualifiedUsage() {
		return Base.has(this.model, this.getResource(), QUALIFIEDUSAGE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@13e7c0b has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasQualifiedUsage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, QUALIFIEDUSAGE, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@13e7c0b has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasQualifiedUsage( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), QUALIFIEDUSAGE, value);
	}

     /**
     * Get all values of property QualifiedUsage as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllQualifiedUsage_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, QUALIFIEDUSAGE);
	}
	
    /**
     * Get all values of property QualifiedUsage as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllQualifiedUsage_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, QUALIFIEDUSAGE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property QualifiedUsage as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllQualifiedUsage_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), QUALIFIEDUSAGE);
	}

    /**
     * Get all values of property QualifiedUsage as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllQualifiedUsage_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), QUALIFIEDUSAGE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property QualifiedUsage     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Usage> getAllQualifiedUsage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, QUALIFIEDUSAGE, Usage.class);
	}
	
    /**
     * Get all values of property QualifiedUsage as a ReactorResult of Usage 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Usage> getAllQualifiedUsage_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, QUALIFIEDUSAGE, Usage.class);
	}

    /**
     * Get all values of property QualifiedUsage     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Usage> getAllQualifiedUsage() {
		return Base.getAll(this.model, this.getResource(), QUALIFIEDUSAGE, Usage.class);
	}

    /**
     * Get all values of property QualifiedUsage as a ReactorResult of Usage 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Usage> getAllQualifiedUsage_as() {
		return Base.getAll_as(this.model, this.getResource(), QUALIFIEDUSAGE, Usage.class);
	}
 
    /**
     * Adds a value to property QualifiedUsage as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addQualifiedUsage( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, QUALIFIEDUSAGE, value);
	}
	
    /**
     * Adds a value to property QualifiedUsage as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addQualifiedUsage( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), QUALIFIEDUSAGE, value);
	}
    /**
     * Adds a value to property QualifiedUsage from an instance of Usage 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addQualifiedUsage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Usage value) {
		Base.add(model, instanceResource, QUALIFIEDUSAGE, value);
	}
	
    /**
     * Adds a value to property QualifiedUsage from an instance of Usage 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addQualifiedUsage(Usage value) {
		Base.add(this.model, this.getResource(), QUALIFIEDUSAGE, value);
	}
  

    /**
     * Sets a value of property QualifiedUsage from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setQualifiedUsage( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, QUALIFIEDUSAGE, value);
	}
	
    /**
     * Sets a value of property QualifiedUsage from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setQualifiedUsage( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), QUALIFIEDUSAGE, value);
	}
    /**
     * Sets a value of property QualifiedUsage from an instance of Usage 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setQualifiedUsage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Usage value) {
		Base.set(model, instanceResource, QUALIFIEDUSAGE, value);
	}
	
    /**
     * Sets a value of property QualifiedUsage from an instance of Usage 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setQualifiedUsage(Usage value) {
		Base.set(this.model, this.getResource(), QUALIFIEDUSAGE, value);
	}
  


    /**
     * Removes a value of property QualifiedUsage as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeQualifiedUsage( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, QUALIFIEDUSAGE, value);
	}
	
    /**
     * Removes a value of property QualifiedUsage as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeQualifiedUsage( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), QUALIFIEDUSAGE, value);
	}
    /**
     * Removes a value of property QualifiedUsage given as an instance of Usage 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeQualifiedUsage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Usage value) {
		Base.remove(model, instanceResource, QUALIFIEDUSAGE, value);
	}
	
    /**
     * Removes a value of property QualifiedUsage given as an instance of Usage 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeQualifiedUsage(Usage value) {
		Base.remove(this.model, this.getResource(), QUALIFIEDUSAGE, value);
	}
  
    /**
     * Removes all values of property QualifiedUsage     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllQualifiedUsage( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, QUALIFIEDUSAGE);
	}
	
    /**
     * Removes all values of property QualifiedUsage	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllQualifiedUsage() {
		Base.removeAll(this.model, this.getResource(), QUALIFIEDUSAGE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1d72b61 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasStartedAtTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, STARTEDATTIME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1d72b61 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasStartedAtTime() {
		return Base.has(this.model, this.getResource(), STARTEDATTIME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1d72b61 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasStartedAtTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, STARTEDATTIME, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1d72b61 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasStartedAtTime( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), STARTEDATTIME, value);
	}

     /**
     * Get all values of property StartedAtTime as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllStartedAtTime_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, STARTEDATTIME);
	}
	
    /**
     * Get all values of property StartedAtTime as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllStartedAtTime_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, STARTEDATTIME, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property StartedAtTime as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllStartedAtTime_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), STARTEDATTIME);
	}

    /**
     * Get all values of property StartedAtTime as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllStartedAtTime_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), STARTEDATTIME, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property StartedAtTime     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.util.Calendar> getAllStartedAtTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, STARTEDATTIME, java.util.Calendar.class);
	}
	
    /**
     * Get all values of property StartedAtTime as a ReactorResult of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.util.Calendar> getAllStartedAtTime_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, STARTEDATTIME, java.util.Calendar.class);
	}

    /**
     * Get all values of property StartedAtTime     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.util.Calendar> getAllStartedAtTime() {
		return Base.getAll(this.model, this.getResource(), STARTEDATTIME, java.util.Calendar.class);
	}

    /**
     * Get all values of property StartedAtTime as a ReactorResult of java.util.Calendar 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.util.Calendar> getAllStartedAtTime_as() {
		return Base.getAll_as(this.model, this.getResource(), STARTEDATTIME, java.util.Calendar.class);
	}
 
    /**
     * Adds a value to property StartedAtTime as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addStartedAtTime( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, STARTEDATTIME, value);
	}
	
    /**
     * Adds a value to property StartedAtTime as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addStartedAtTime( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), STARTEDATTIME, value);
	}
    /**
     * Adds a value to property StartedAtTime from an instance of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addStartedAtTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.add(model, instanceResource, STARTEDATTIME, value);
	}
	
    /**
     * Adds a value to property StartedAtTime from an instance of java.util.Calendar 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addStartedAtTime(java.util.Calendar value) {
		Base.add(this.model, this.getResource(), STARTEDATTIME, value);
	}
  

    /**
     * Sets a value of property StartedAtTime from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setStartedAtTime( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, STARTEDATTIME, value);
	}
	
    /**
     * Sets a value of property StartedAtTime from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setStartedAtTime( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), STARTEDATTIME, value);
	}
    /**
     * Sets a value of property StartedAtTime from an instance of java.util.Calendar 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setStartedAtTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.set(model, instanceResource, STARTEDATTIME, value);
	}
	
    /**
     * Sets a value of property StartedAtTime from an instance of java.util.Calendar 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setStartedAtTime(java.util.Calendar value) {
		Base.set(this.model, this.getResource(), STARTEDATTIME, value);
	}
  


    /**
     * Removes a value of property StartedAtTime as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeStartedAtTime( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, STARTEDATTIME, value);
	}
	
    /**
     * Removes a value of property StartedAtTime as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeStartedAtTime( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), STARTEDATTIME, value);
	}
    /**
     * Removes a value of property StartedAtTime given as an instance of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeStartedAtTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.remove(model, instanceResource, STARTEDATTIME, value);
	}
	
    /**
     * Removes a value of property StartedAtTime given as an instance of java.util.Calendar 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeStartedAtTime(java.util.Calendar value) {
		Base.remove(this.model, this.getResource(), STARTEDATTIME, value);
	}
  
    /**
     * Removes all values of property StartedAtTime     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllStartedAtTime( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, STARTEDATTIME);
	}
	
    /**
     * Removes all values of property StartedAtTime	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllStartedAtTime() {
		Base.removeAll(this.model, this.getResource(), STARTEDATTIME);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@191e092 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasUsed(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, USED);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@191e092 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasUsed() {
		return Base.has(this.model, this.getResource(), USED);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@191e092 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasUsed(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, USED, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@191e092 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasUsed( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), USED, value);
	}

     /**
     * Get all values of property Used as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllUsed_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, USED);
	}
	
    /**
     * Get all values of property Used as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllUsed_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, USED, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Used as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllUsed_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), USED);
	}

    /**
     * Get all values of property Used as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllUsed_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), USED, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Used     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Entity> getAllUsed(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, USED, Entity.class);
	}
	
    /**
     * Get all values of property Used as a ReactorResult of Entity 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Entity> getAllUsed_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, USED, Entity.class);
	}

    /**
     * Get all values of property Used     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Entity> getAllUsed() {
		return Base.getAll(this.model, this.getResource(), USED, Entity.class);
	}

    /**
     * Get all values of property Used as a ReactorResult of Entity 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Entity> getAllUsed_as() {
		return Base.getAll_as(this.model, this.getResource(), USED, Entity.class);
	}
 
    /**
     * Adds a value to property Used as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addUsed( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, USED, value);
	}
	
    /**
     * Adds a value to property Used as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addUsed( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), USED, value);
	}
    /**
     * Adds a value to property Used from an instance of Entity 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addUsed(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Entity value) {
		Base.add(model, instanceResource, USED, value);
	}
	
    /**
     * Adds a value to property Used from an instance of Entity 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addUsed(Entity value) {
		Base.add(this.model, this.getResource(), USED, value);
	}
  

    /**
     * Sets a value of property Used from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setUsed( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, USED, value);
	}
	
    /**
     * Sets a value of property Used from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setUsed( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), USED, value);
	}
    /**
     * Sets a value of property Used from an instance of Entity 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setUsed(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Entity value) {
		Base.set(model, instanceResource, USED, value);
	}
	
    /**
     * Sets a value of property Used from an instance of Entity 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setUsed(Entity value) {
		Base.set(this.model, this.getResource(), USED, value);
	}
  


    /**
     * Removes a value of property Used as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeUsed( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, USED, value);
	}
	
    /**
     * Removes a value of property Used as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeUsed( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), USED, value);
	}
    /**
     * Removes a value of property Used given as an instance of Entity 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeUsed(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Entity value) {
		Base.remove(model, instanceResource, USED, value);
	}
	
    /**
     * Removes a value of property Used given as an instance of Entity 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeUsed(Entity value) {
		Base.remove(this.model, this.getResource(), USED, value);
	}
  
    /**
     * Removes all values of property Used     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllUsed( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, USED);
	}
	
    /**
     * Removes all values of property Used	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllUsed() {
		Base.removeAll(this.model, this.getResource(), USED);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@11eeb20 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasWasAssociatedWith(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, WASASSOCIATEDWITH);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@11eeb20 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasWasAssociatedWith() {
		return Base.has(this.model, this.getResource(), WASASSOCIATEDWITH);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@11eeb20 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasWasAssociatedWith(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, WASASSOCIATEDWITH, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@11eeb20 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasWasAssociatedWith( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), WASASSOCIATEDWITH, value);
	}

     /**
     * Get all values of property WasAssociatedWith as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllWasAssociatedWith_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, WASASSOCIATEDWITH);
	}
	
    /**
     * Get all values of property WasAssociatedWith as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllWasAssociatedWith_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, WASASSOCIATEDWITH, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property WasAssociatedWith as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllWasAssociatedWith_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), WASASSOCIATEDWITH);
	}

    /**
     * Get all values of property WasAssociatedWith as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllWasAssociatedWith_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), WASASSOCIATEDWITH, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property WasAssociatedWith     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Agent> getAllWasAssociatedWith(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, WASASSOCIATEDWITH, Agent.class);
	}
	
    /**
     * Get all values of property WasAssociatedWith as a ReactorResult of Agent 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Agent> getAllWasAssociatedWith_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, WASASSOCIATEDWITH, Agent.class);
	}

    /**
     * Get all values of property WasAssociatedWith     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Agent> getAllWasAssociatedWith() {
		return Base.getAll(this.model, this.getResource(), WASASSOCIATEDWITH, Agent.class);
	}

    /**
     * Get all values of property WasAssociatedWith as a ReactorResult of Agent 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Agent> getAllWasAssociatedWith_as() {
		return Base.getAll_as(this.model, this.getResource(), WASASSOCIATEDWITH, Agent.class);
	}
 
    /**
     * Adds a value to property WasAssociatedWith as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addWasAssociatedWith( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, WASASSOCIATEDWITH, value);
	}
	
    /**
     * Adds a value to property WasAssociatedWith as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addWasAssociatedWith( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), WASASSOCIATEDWITH, value);
	}
    /**
     * Adds a value to property WasAssociatedWith from an instance of Agent 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addWasAssociatedWith(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Agent value) {
		Base.add(model, instanceResource, WASASSOCIATEDWITH, value);
	}
	
    /**
     * Adds a value to property WasAssociatedWith from an instance of Agent 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addWasAssociatedWith(Agent value) {
		Base.add(this.model, this.getResource(), WASASSOCIATEDWITH, value);
	}
  

    /**
     * Sets a value of property WasAssociatedWith from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setWasAssociatedWith( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, WASASSOCIATEDWITH, value);
	}
	
    /**
     * Sets a value of property WasAssociatedWith from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setWasAssociatedWith( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), WASASSOCIATEDWITH, value);
	}
    /**
     * Sets a value of property WasAssociatedWith from an instance of Agent 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setWasAssociatedWith(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Agent value) {
		Base.set(model, instanceResource, WASASSOCIATEDWITH, value);
	}
	
    /**
     * Sets a value of property WasAssociatedWith from an instance of Agent 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setWasAssociatedWith(Agent value) {
		Base.set(this.model, this.getResource(), WASASSOCIATEDWITH, value);
	}
  


    /**
     * Removes a value of property WasAssociatedWith as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeWasAssociatedWith( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, WASASSOCIATEDWITH, value);
	}
	
    /**
     * Removes a value of property WasAssociatedWith as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeWasAssociatedWith( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), WASASSOCIATEDWITH, value);
	}
    /**
     * Removes a value of property WasAssociatedWith given as an instance of Agent 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeWasAssociatedWith(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Agent value) {
		Base.remove(model, instanceResource, WASASSOCIATEDWITH, value);
	}
	
    /**
     * Removes a value of property WasAssociatedWith given as an instance of Agent 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeWasAssociatedWith(Agent value) {
		Base.remove(this.model, this.getResource(), WASASSOCIATEDWITH, value);
	}
  
    /**
     * Removes all values of property WasAssociatedWith     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllWasAssociatedWith( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, WASASSOCIATEDWITH);
	}
	
    /**
     * Removes all values of property WasAssociatedWith	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllWasAssociatedWith() {
		Base.removeAll(this.model, this.getResource(), WASASSOCIATEDWITH);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@c572ae has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasWasEndedBy(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, WASENDEDBY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@c572ae has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasWasEndedBy() {
		return Base.has(this.model, this.getResource(), WASENDEDBY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@c572ae has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasWasEndedBy(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, WASENDEDBY, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@c572ae has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasWasEndedBy( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), WASENDEDBY, value);
	}

     /**
     * Get all values of property WasEndedBy as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllWasEndedBy_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, WASENDEDBY);
	}
	
    /**
     * Get all values of property WasEndedBy as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllWasEndedBy_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, WASENDEDBY, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property WasEndedBy as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllWasEndedBy_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), WASENDEDBY);
	}

    /**
     * Get all values of property WasEndedBy as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllWasEndedBy_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), WASENDEDBY, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property WasEndedBy     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Entity> getAllWasEndedBy(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, WASENDEDBY, Entity.class);
	}
	
    /**
     * Get all values of property WasEndedBy as a ReactorResult of Entity 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Entity> getAllWasEndedBy_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, WASENDEDBY, Entity.class);
	}

    /**
     * Get all values of property WasEndedBy     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Entity> getAllWasEndedBy() {
		return Base.getAll(this.model, this.getResource(), WASENDEDBY, Entity.class);
	}

    /**
     * Get all values of property WasEndedBy as a ReactorResult of Entity 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Entity> getAllWasEndedBy_as() {
		return Base.getAll_as(this.model, this.getResource(), WASENDEDBY, Entity.class);
	}
 
    /**
     * Adds a value to property WasEndedBy as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addWasEndedBy( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, WASENDEDBY, value);
	}
	
    /**
     * Adds a value to property WasEndedBy as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addWasEndedBy( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), WASENDEDBY, value);
	}
    /**
     * Adds a value to property WasEndedBy from an instance of Entity 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addWasEndedBy(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Entity value) {
		Base.add(model, instanceResource, WASENDEDBY, value);
	}
	
    /**
     * Adds a value to property WasEndedBy from an instance of Entity 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addWasEndedBy(Entity value) {
		Base.add(this.model, this.getResource(), WASENDEDBY, value);
	}
  

    /**
     * Sets a value of property WasEndedBy from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setWasEndedBy( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, WASENDEDBY, value);
	}
	
    /**
     * Sets a value of property WasEndedBy from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setWasEndedBy( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), WASENDEDBY, value);
	}
    /**
     * Sets a value of property WasEndedBy from an instance of Entity 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setWasEndedBy(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Entity value) {
		Base.set(model, instanceResource, WASENDEDBY, value);
	}
	
    /**
     * Sets a value of property WasEndedBy from an instance of Entity 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setWasEndedBy(Entity value) {
		Base.set(this.model, this.getResource(), WASENDEDBY, value);
	}
  


    /**
     * Removes a value of property WasEndedBy as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeWasEndedBy( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, WASENDEDBY, value);
	}
	
    /**
     * Removes a value of property WasEndedBy as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeWasEndedBy( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), WASENDEDBY, value);
	}
    /**
     * Removes a value of property WasEndedBy given as an instance of Entity 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeWasEndedBy(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Entity value) {
		Base.remove(model, instanceResource, WASENDEDBY, value);
	}
	
    /**
     * Removes a value of property WasEndedBy given as an instance of Entity 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeWasEndedBy(Entity value) {
		Base.remove(this.model, this.getResource(), WASENDEDBY, value);
	}
  
    /**
     * Removes all values of property WasEndedBy     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllWasEndedBy( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, WASENDEDBY);
	}
	
    /**
     * Removes all values of property WasEndedBy	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllWasEndedBy() {
		Base.removeAll(this.model, this.getResource(), WASENDEDBY);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@73c8a9 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasWasInformedBy(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, WASINFORMEDBY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@73c8a9 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasWasInformedBy() {
		return Base.has(this.model, this.getResource(), WASINFORMEDBY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@73c8a9 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasWasInformedBy(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, WASINFORMEDBY, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@73c8a9 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasWasInformedBy( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), WASINFORMEDBY, value);
	}

     /**
     * Get all values of property WasInformedBy as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllWasInformedBy_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, WASINFORMEDBY);
	}
	
    /**
     * Get all values of property WasInformedBy as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllWasInformedBy_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, WASINFORMEDBY, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property WasInformedBy as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllWasInformedBy_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), WASINFORMEDBY);
	}

    /**
     * Get all values of property WasInformedBy as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllWasInformedBy_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), WASINFORMEDBY, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property WasInformedBy     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Activity> getAllWasInformedBy(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, WASINFORMEDBY, Activity.class);
	}
	
    /**
     * Get all values of property WasInformedBy as a ReactorResult of Activity 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Activity> getAllWasInformedBy_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, WASINFORMEDBY, Activity.class);
	}

    /**
     * Get all values of property WasInformedBy     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Activity> getAllWasInformedBy() {
		return Base.getAll(this.model, this.getResource(), WASINFORMEDBY, Activity.class);
	}

    /**
     * Get all values of property WasInformedBy as a ReactorResult of Activity 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Activity> getAllWasInformedBy_as() {
		return Base.getAll_as(this.model, this.getResource(), WASINFORMEDBY, Activity.class);
	}
 
    /**
     * Adds a value to property WasInformedBy as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addWasInformedBy( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, WASINFORMEDBY, value);
	}
	
    /**
     * Adds a value to property WasInformedBy as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addWasInformedBy( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), WASINFORMEDBY, value);
	}
    /**
     * Adds a value to property WasInformedBy from an instance of Activity 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addWasInformedBy(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Activity value) {
		Base.add(model, instanceResource, WASINFORMEDBY, value);
	}
	
    /**
     * Adds a value to property WasInformedBy from an instance of Activity 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addWasInformedBy(Activity value) {
		Base.add(this.model, this.getResource(), WASINFORMEDBY, value);
	}
  

    /**
     * Sets a value of property WasInformedBy from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setWasInformedBy( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, WASINFORMEDBY, value);
	}
	
    /**
     * Sets a value of property WasInformedBy from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setWasInformedBy( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), WASINFORMEDBY, value);
	}
    /**
     * Sets a value of property WasInformedBy from an instance of Activity 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setWasInformedBy(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Activity value) {
		Base.set(model, instanceResource, WASINFORMEDBY, value);
	}
	
    /**
     * Sets a value of property WasInformedBy from an instance of Activity 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setWasInformedBy(Activity value) {
		Base.set(this.model, this.getResource(), WASINFORMEDBY, value);
	}
  


    /**
     * Removes a value of property WasInformedBy as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeWasInformedBy( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, WASINFORMEDBY, value);
	}
	
    /**
     * Removes a value of property WasInformedBy as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeWasInformedBy( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), WASINFORMEDBY, value);
	}
    /**
     * Removes a value of property WasInformedBy given as an instance of Activity 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeWasInformedBy(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Activity value) {
		Base.remove(model, instanceResource, WASINFORMEDBY, value);
	}
	
    /**
     * Removes a value of property WasInformedBy given as an instance of Activity 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeWasInformedBy(Activity value) {
		Base.remove(this.model, this.getResource(), WASINFORMEDBY, value);
	}
  
    /**
     * Removes all values of property WasInformedBy     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllWasInformedBy( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, WASINFORMEDBY);
	}
	
    /**
     * Removes all values of property WasInformedBy	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllWasInformedBy() {
		Base.removeAll(this.model, this.getResource(), WASINFORMEDBY);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4f5b6d has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasWasStartedBy(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, WASSTARTEDBY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4f5b6d has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasWasStartedBy() {
		return Base.has(this.model, this.getResource(), WASSTARTEDBY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4f5b6d has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasWasStartedBy(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, WASSTARTEDBY, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4f5b6d has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasWasStartedBy( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), WASSTARTEDBY, value);
	}

     /**
     * Get all values of property WasStartedBy as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllWasStartedBy_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, WASSTARTEDBY);
	}
	
    /**
     * Get all values of property WasStartedBy as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllWasStartedBy_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, WASSTARTEDBY, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property WasStartedBy as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllWasStartedBy_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), WASSTARTEDBY);
	}

    /**
     * Get all values of property WasStartedBy as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllWasStartedBy_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), WASSTARTEDBY, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property WasStartedBy     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Entity> getAllWasStartedBy(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, WASSTARTEDBY, Entity.class);
	}
	
    /**
     * Get all values of property WasStartedBy as a ReactorResult of Entity 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Entity> getAllWasStartedBy_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, WASSTARTEDBY, Entity.class);
	}

    /**
     * Get all values of property WasStartedBy     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Entity> getAllWasStartedBy() {
		return Base.getAll(this.model, this.getResource(), WASSTARTEDBY, Entity.class);
	}

    /**
     * Get all values of property WasStartedBy as a ReactorResult of Entity 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Entity> getAllWasStartedBy_as() {
		return Base.getAll_as(this.model, this.getResource(), WASSTARTEDBY, Entity.class);
	}
 
    /**
     * Adds a value to property WasStartedBy as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addWasStartedBy( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, WASSTARTEDBY, value);
	}
	
    /**
     * Adds a value to property WasStartedBy as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addWasStartedBy( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), WASSTARTEDBY, value);
	}
    /**
     * Adds a value to property WasStartedBy from an instance of Entity 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addWasStartedBy(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Entity value) {
		Base.add(model, instanceResource, WASSTARTEDBY, value);
	}
	
    /**
     * Adds a value to property WasStartedBy from an instance of Entity 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addWasStartedBy(Entity value) {
		Base.add(this.model, this.getResource(), WASSTARTEDBY, value);
	}
  

    /**
     * Sets a value of property WasStartedBy from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setWasStartedBy( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, WASSTARTEDBY, value);
	}
	
    /**
     * Sets a value of property WasStartedBy from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setWasStartedBy( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), WASSTARTEDBY, value);
	}
    /**
     * Sets a value of property WasStartedBy from an instance of Entity 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setWasStartedBy(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Entity value) {
		Base.set(model, instanceResource, WASSTARTEDBY, value);
	}
	
    /**
     * Sets a value of property WasStartedBy from an instance of Entity 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setWasStartedBy(Entity value) {
		Base.set(this.model, this.getResource(), WASSTARTEDBY, value);
	}
  


    /**
     * Removes a value of property WasStartedBy as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeWasStartedBy( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, WASSTARTEDBY, value);
	}
	
    /**
     * Removes a value of property WasStartedBy as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeWasStartedBy( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), WASSTARTEDBY, value);
	}
    /**
     * Removes a value of property WasStartedBy given as an instance of Entity 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeWasStartedBy(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Entity value) {
		Base.remove(model, instanceResource, WASSTARTEDBY, value);
	}
	
    /**
     * Removes a value of property WasStartedBy given as an instance of Entity 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeWasStartedBy(Entity value) {
		Base.remove(this.model, this.getResource(), WASSTARTEDBY, value);
	}
  
    /**
     * Removes all values of property WasStartedBy     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllWasStartedBy( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, WASSTARTEDBY);
	}
	
    /**
     * Removes all values of property WasStartedBy	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllWasStartedBy() {
		Base.removeAll(this.model, this.getResource(), WASSTARTEDBY);
	}
 }