/**
 * generated by http://RDFReactor.semweb4j.org ($Id: CodeGenerator.java 1765 2010-02-11 09:51:13Z max.at.xam.de $) on 10/2/12 2:28 PM
 */
package gov.nasa.jpl.cdp.provenance.prov;

import org.ontoware.aifbcommons.collection.ClosableIterator;
import org.ontoware.rdf2go.exception.ModelRuntimeException;
import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.BlankNode;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdfreactor.runtime.Base;
import org.ontoware.rdfreactor.runtime.ReactorResult;

/**
 * This class manages access to these properties:
 * <ul>
 *   <li> AnnotatedProperty </li>
 *   <li> AnnotatedSource </li>
 *   <li> AnnotatedTarget </li>
 *   <li> Aq </li>
 *   <li> Category </li>
 *   <li> Component </li>
 *   <li> Constraints </li>
 *   <li> Definition </li>
 *   <li> DisjointWith </li>
 *   <li> Dm </li>
 *   <li> EditorialNote </li>
 *   <li> EditorsDefinition </li>
 *   <li> Imports </li>
 *   <li> Influenced </li>
 *   <li> Inverse </li>
 *   <li> InverseOf </li>
 *   <li> MaxCardinality </li>
 *   <li> N </li>
 *   <li> OnProperty </li>
 *   <li> PropertyChainAxiom </li>
 *   <li> QualifiedForm </li>
 *   <li> SharesDefinitionWith </li>
 *   <li> TopObjectProperty </li>
 *   <li> UnionOf </li>
 *   <li> UnqualifiedForm </li>
 * </ul>
 *
 * This class was generated by <a href="http://RDFReactor.semweb4j.org">RDFReactor</a> on 10/2/12 2:28 PM
 */
public class Thing extends org.ontoware.rdfreactor.schema.rdfs.Class {

    /** http://www.w3.org/2000/01/rdf-schema#Class */
	@SuppressWarnings("hiding")
	public static final URI RDFS_CLASS = new URIImpl("http://www.w3.org/2000/01/rdf-schema#Class", false);

    /** http://www.w3.org/2002/07/owl#annotatedProperty */
	public static final URI ANNOTATEDPROPERTY = new URIImpl("http://www.w3.org/2002/07/owl#annotatedProperty",false);

    /** http://www.w3.org/2002/07/owl#annotatedSource */
	public static final URI ANNOTATEDSOURCE = new URIImpl("http://www.w3.org/2002/07/owl#annotatedSource",false);

    /** http://www.w3.org/2002/07/owl#annotatedTarget */
	public static final URI ANNOTATEDTARGET = new URIImpl("http://www.w3.org/2002/07/owl#annotatedTarget",false);

    /** http://www.w3.org/ns/prov#aq */
	public static final URI AQ = new URIImpl("http://www.w3.org/ns/prov#aq",false);

    /** http://www.w3.org/ns/prov#category */
	public static final URI CATEGORY = new URIImpl("http://www.w3.org/ns/prov#category",false);

    /** http://www.w3.org/ns/prov#component */
	public static final URI COMPONENT = new URIImpl("http://www.w3.org/ns/prov#component",false);

    /** http://www.w3.org/ns/prov#constraints */
	public static final URI CONSTRAINTS = new URIImpl("http://www.w3.org/ns/prov#constraints",false);

    /** http://www.w3.org/ns/prov#definition */
	public static final URI DEFINITION = new URIImpl("http://www.w3.org/ns/prov#definition",false);

    /** http://www.w3.org/2002/07/owl#disjointWith */
	public static final URI DISJOINTWITH = new URIImpl("http://www.w3.org/2002/07/owl#disjointWith",false);

    /** http://www.w3.org/ns/prov#dm */
	public static final URI DM = new URIImpl("http://www.w3.org/ns/prov#dm",false);

    /** http://www.w3.org/ns/prov#editorialNote */
	public static final URI EDITORIALNOTE = new URIImpl("http://www.w3.org/ns/prov#editorialNote",false);

    /** http://www.w3.org/ns/prov#editorsDefinition */
	public static final URI EDITORSDEFINITION = new URIImpl("http://www.w3.org/ns/prov#editorsDefinition",false);

    /** http://www.w3.org/2002/07/owl#imports */
	public static final URI IMPORTS = new URIImpl("http://www.w3.org/2002/07/owl#imports",false);

    /** http://www.w3.org/ns/prov#influenced */
	public static final URI INFLUENCED = new URIImpl("http://www.w3.org/ns/prov#influenced",false);

    /** http://www.w3.org/ns/prov#inverse */
	public static final URI INVERSE = new URIImpl("http://www.w3.org/ns/prov#inverse",false);

    /** http://www.w3.org/2002/07/owl#inverseOf */
	public static final URI INVERSEOF = new URIImpl("http://www.w3.org/2002/07/owl#inverseOf",false);

    /** http://www.w3.org/2002/07/owl#maxCardinality */
	public static final URI MAXCARDINALITY = new URIImpl("http://www.w3.org/2002/07/owl#maxCardinality",false);

    /** http://www.w3.org/ns/prov#n */
	public static final URI N = new URIImpl("http://www.w3.org/ns/prov#n",false);

    /** http://www.w3.org/2002/07/owl#onProperty */
	public static final URI ONPROPERTY = new URIImpl("http://www.w3.org/2002/07/owl#onProperty",false);

    /** http://www.w3.org/2002/07/owl#propertyChainAxiom */
	public static final URI PROPERTYCHAINAXIOM = new URIImpl("http://www.w3.org/2002/07/owl#propertyChainAxiom",false);

    /** http://www.w3.org/ns/prov#qualifiedForm */
	public static final URI QUALIFIEDFORM = new URIImpl("http://www.w3.org/ns/prov#qualifiedForm",false);

    /** http://www.w3.org/ns/prov#sharesDefinitionWith */
	public static final URI SHARESDEFINITIONWITH = new URIImpl("http://www.w3.org/ns/prov#sharesDefinitionWith",false);

    /** http://www.w3.org/2002/07/owl#topObjectProperty */
	public static final URI TOPOBJECTPROPERTY = new URIImpl("http://www.w3.org/2002/07/owl#topObjectProperty",false);

    /** http://www.w3.org/2002/07/owl#unionOf */
	public static final URI UNIONOF = new URIImpl("http://www.w3.org/2002/07/owl#unionOf",false);

    /** http://www.w3.org/ns/prov#unqualifiedForm */
	public static final URI UNQUALIFIEDFORM = new URIImpl("http://www.w3.org/ns/prov#unqualifiedForm",false);

    /** 
     * All property-URIs with this class as domain.
     * All properties of all super-classes are also available. 
     */
	@SuppressWarnings("hiding")
    public static final URI[] MANAGED_URIS = {
      new URIImpl("http://www.w3.org/2002/07/owl#annotatedProperty",false),
      new URIImpl("http://www.w3.org/2002/07/owl#annotatedSource",false),
      new URIImpl("http://www.w3.org/2002/07/owl#annotatedTarget",false),
      new URIImpl("http://www.w3.org/ns/prov#aq",false),
      new URIImpl("http://www.w3.org/ns/prov#category",false),
      new URIImpl("http://www.w3.org/ns/prov#component",false),
      new URIImpl("http://www.w3.org/ns/prov#constraints",false),
      new URIImpl("http://www.w3.org/ns/prov#definition",false),
      new URIImpl("http://www.w3.org/2002/07/owl#disjointWith",false),
      new URIImpl("http://www.w3.org/ns/prov#dm",false),
      new URIImpl("http://www.w3.org/ns/prov#editorialNote",false),
      new URIImpl("http://www.w3.org/ns/prov#editorsDefinition",false),
      new URIImpl("http://www.w3.org/2002/07/owl#imports",false),
      new URIImpl("http://www.w3.org/ns/prov#influenced",false),
      new URIImpl("http://www.w3.org/ns/prov#inverse",false),
      new URIImpl("http://www.w3.org/2002/07/owl#inverseOf",false),
      new URIImpl("http://www.w3.org/2002/07/owl#maxCardinality",false),
      new URIImpl("http://www.w3.org/ns/prov#n",false),
      new URIImpl("http://www.w3.org/2002/07/owl#onProperty",false),
      new URIImpl("http://www.w3.org/2002/07/owl#propertyChainAxiom",false),
      new URIImpl("http://www.w3.org/ns/prov#qualifiedForm",false),
      new URIImpl("http://www.w3.org/ns/prov#sharesDefinitionWith",false),
      new URIImpl("http://www.w3.org/2002/07/owl#topObjectProperty",false),
      new URIImpl("http://www.w3.org/2002/07/owl#unionOf",false),
      new URIImpl("http://www.w3.org/ns/prov#unqualifiedForm",false) 
    };


	// protected constructors needed for inheritance
	
	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.semweb4j.org
	 * @param classURI URI of RDFS class
	 * @param instanceIdentifier Resource that identifies this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c1] 
	 */
	protected Thing ( Model model, URI classURI, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, classURI, instanceIdentifier, write);
	}

	// public constructors

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param instanceIdentifier an RDF2Go Resource identifying this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c2] 
	 */
	public Thing ( Model model, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, RDFS_CLASS, instanceIdentifier, write);
	}


	/**
	 * Returns a Java wrapper over an RDF object, identified by a URI, given as a String.
	 * Creating two wrappers for the same URI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uriString a URI given as a String
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 * @throws ModelRuntimeException if URI syntax is wrong
	 *
	 * [Generated from RDFReactor template rule #c7] 
	 */
	public Thing ( Model model, String uriString, boolean write) throws ModelRuntimeException {
		super(model, RDFS_CLASS, new URIImpl(uriString,false), write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by a blank node.
	 * Creating two wrappers for the same blank node is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param bnode BlankNode of this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c8] 
	 */
	public Thing ( Model model, BlankNode bnode, boolean write ) {
		super(model, RDFS_CLASS, bnode, write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by 
	 * a randomly generated URI.
	 * Creating two wrappers results in different URIs.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c9] 
	 */
	public Thing ( Model model, boolean write ) {
		super(model, RDFS_CLASS, model.newRandomUniqueURI(), write);
	}

    ///////////////////////////////////////////////////////////////////
    // typing

	/**
	 * Return an existing instance of this class in the model. No statements are written.
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return an instance of Thing  or null if none existst
	 *
	 * [Generated from RDFReactor template rule #class0] 
	 */
	public static Thing  getInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getInstance(model, instanceResource, Thing.class);
	}

	/**
	 * Create a new instance of this class in the model. 
	 * That is, create the statement (instanceResource, RDF.type, http://www.w3.org/2000/01/rdf-schema#Class).
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class1] 
	 */
	public static void createInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.createInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return true if instanceResource is an instance of this class in the model
	 *
	 * [Generated from RDFReactor template rule #class2] 
	 */
	public static boolean hasInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.hasInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as RDF resources
	 *
	 * [Generated from RDFReactor template rule #class3] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInstances(Model model) {
		return Base.getAllInstances(model, RDFS_CLASS, org.ontoware.rdf2go.model.node.Resource.class);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as a ReactorResult,
	 * which can conveniently be converted to iterator, list or array.
	 *
	 * [Generated from RDFReactor template rule #class3-as] 
	 */
	public static ReactorResult<? extends Thing> getAllInstances_as(Model model) {
		return Base.getAllInstances_as(model, RDFS_CLASS, Thing.class );
	}

    /**
	 * Remove rdf:type Thing from this instance. Other triples are not affected.
	 * To delete more, use deleteAllProperties
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class4] 
	 */
	public static void deleteInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * Delete all (this, *, *), i.e. including rdf:type
	 * @param model an RDF2Go model
	 * @param resource
	 */
	public static void deleteAllProperties(Model model,	org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteAllProperties(model, instanceResource);
	}

    ///////////////////////////////////////////////////////////////////
    // property access methods

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'AnnotatedProperty' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllAnnotatedProperty_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.ANNOTATEDPROPERTY, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'AnnotatedProperty' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllAnnotatedProperty_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.ANNOTATEDPROPERTY, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'AnnotatedProperty' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllAnnotatedProperty_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.ANNOTATEDPROPERTY, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'AnnotatedSource' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllAnnotatedSource_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.ANNOTATEDSOURCE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'AnnotatedSource' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllAnnotatedSource_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.ANNOTATEDSOURCE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'AnnotatedSource' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllAnnotatedSource_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.ANNOTATEDSOURCE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'AnnotatedTarget' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllAnnotatedTarget_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.ANNOTATEDTARGET, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'AnnotatedTarget' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllAnnotatedTarget_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.ANNOTATEDTARGET, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'AnnotatedTarget' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllAnnotatedTarget_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.ANNOTATEDTARGET, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Aq' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllAq_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.AQ, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Aq' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllAq_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.AQ, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Aq' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllAq_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.AQ, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Category' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllCategory_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.CATEGORY, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Category' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllCategory_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.CATEGORY, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Category' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllCategory_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.CATEGORY, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Component' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllComponent_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.COMPONENT, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Component' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllComponent_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.COMPONENT, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Component' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllComponent_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.COMPONENT, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Constraints' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllConstraints_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.CONSTRAINTS, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Constraints' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllConstraints_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.CONSTRAINTS, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Constraints' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllConstraints_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.CONSTRAINTS, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Definition' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllDefinition_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.DEFINITION, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Definition' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllDefinition_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.DEFINITION, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Definition' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllDefinition_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.DEFINITION, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'DisjointWith' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllDisjointWith_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.DISJOINTWITH, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'DisjointWith' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllDisjointWith_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.DISJOINTWITH, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'DisjointWith' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllDisjointWith_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.DISJOINTWITH, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Dm' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllDm_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.DM, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Dm' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllDm_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.DM, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Dm' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllDm_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.DM, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'EditorialNote' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllEditorialNote_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.EDITORIALNOTE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'EditorialNote' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllEditorialNote_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.EDITORIALNOTE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'EditorialNote' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllEditorialNote_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.EDITORIALNOTE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'EditorsDefinition' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllEditorsDefinition_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.EDITORSDEFINITION, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'EditorsDefinition' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllEditorsDefinition_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.EDITORSDEFINITION, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'EditorsDefinition' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllEditorsDefinition_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.EDITORSDEFINITION, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Imports' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllImports_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.IMPORTS, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Imports' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllImports_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.IMPORTS, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Imports' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllImports_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.IMPORTS, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Influenced' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInfluenced_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.INFLUENCED, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Influenced' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInfluenced_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.INFLUENCED, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Influenced' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllInfluenced_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.INFLUENCED, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Inverse' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInverse_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.INVERSE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Inverse' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInverse_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.INVERSE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Inverse' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllInverse_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.INVERSE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'InverseOf' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInverseOf_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.INVERSEOF, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'InverseOf' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInverseOf_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.INVERSEOF, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'InverseOf' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllInverseOf_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.INVERSEOF, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'MaxCardinality' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllMaxCardinality_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.MAXCARDINALITY, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'MaxCardinality' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllMaxCardinality_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.MAXCARDINALITY, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'MaxCardinality' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllMaxCardinality_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.MAXCARDINALITY, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'N' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllN_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.N, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'N' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllN_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.N, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'N' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllN_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.N, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'OnProperty' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllOnProperty_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.ONPROPERTY, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'OnProperty' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllOnProperty_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.ONPROPERTY, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'OnProperty' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllOnProperty_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.ONPROPERTY, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'PropertyChainAxiom' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllPropertyChainAxiom_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.PROPERTYCHAINAXIOM, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'PropertyChainAxiom' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllPropertyChainAxiom_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.PROPERTYCHAINAXIOM, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'PropertyChainAxiom' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllPropertyChainAxiom_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.PROPERTYCHAINAXIOM, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'QualifiedForm' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllQualifiedForm_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.QUALIFIEDFORM, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'QualifiedForm' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllQualifiedForm_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.QUALIFIEDFORM, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'QualifiedForm' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllQualifiedForm_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.QUALIFIEDFORM, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'SharesDefinitionWith' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSharesDefinitionWith_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.SHARESDEFINITIONWITH, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'SharesDefinitionWith' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSharesDefinitionWith_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.SHARESDEFINITIONWITH, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'SharesDefinitionWith' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllSharesDefinitionWith_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.SHARESDEFINITIONWITH, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'TopObjectProperty' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllTopObjectProperty_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.TOPOBJECTPROPERTY, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'TopObjectProperty' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllTopObjectProperty_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.TOPOBJECTPROPERTY, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'TopObjectProperty' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllTopObjectProperty_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.TOPOBJECTPROPERTY, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'UnionOf' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllUnionOf_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.UNIONOF, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'UnionOf' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllUnionOf_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.UNIONOF, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'UnionOf' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllUnionOf_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.UNIONOF, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'UnqualifiedForm' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllUnqualifiedForm_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.UNQUALIFIEDFORM, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'UnqualifiedForm' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllUnqualifiedForm_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.UNQUALIFIEDFORM, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'UnqualifiedForm' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllUnqualifiedForm_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.UNQUALIFIEDFORM, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Value' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllValue_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Entity.VALUE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Value' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllValue_Inverse() {
		return Base.getAll_Inverse(this.model, Entity.VALUE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Value' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllValue_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Entity.VALUE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Influencer' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInfluencer_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Influence.INFLUENCER, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Influencer' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInfluencer_Inverse() {
		return Base.getAll_Inverse(this.model, Influence.INFLUENCER, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Influencer' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllInfluencer_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Influence.INFLUENCER, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}



    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@555cb7 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasAnnotatedProperty(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, ANNOTATEDPROPERTY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@555cb7 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasAnnotatedProperty() {
		return Base.has(this.model, this.getResource(), ANNOTATEDPROPERTY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@555cb7 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasAnnotatedProperty(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, ANNOTATEDPROPERTY, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@555cb7 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasAnnotatedProperty( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), ANNOTATEDPROPERTY, value);
	}

     /**
     * Get all values of property AnnotatedProperty as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllAnnotatedProperty_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, ANNOTATEDPROPERTY);
	}
	
    /**
     * Get all values of property AnnotatedProperty as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllAnnotatedProperty_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ANNOTATEDPROPERTY, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property AnnotatedProperty as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllAnnotatedProperty_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), ANNOTATEDPROPERTY);
	}

    /**
     * Get all values of property AnnotatedProperty as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllAnnotatedProperty_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), ANNOTATEDPROPERTY, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property AnnotatedProperty     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllAnnotatedProperty(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, ANNOTATEDPROPERTY, Thing.class);
	}
	
    /**
     * Get all values of property AnnotatedProperty as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllAnnotatedProperty_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ANNOTATEDPROPERTY, Thing.class);
	}

    /**
     * Get all values of property AnnotatedProperty     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllAnnotatedProperty() {
		return Base.getAll(this.model, this.getResource(), ANNOTATEDPROPERTY, Thing.class);
	}

    /**
     * Get all values of property AnnotatedProperty as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllAnnotatedProperty_as() {
		return Base.getAll_as(this.model, this.getResource(), ANNOTATEDPROPERTY, Thing.class);
	}
 
    /**
     * Adds a value to property AnnotatedProperty as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addAnnotatedProperty( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, ANNOTATEDPROPERTY, value);
	}
	
    /**
     * Adds a value to property AnnotatedProperty as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addAnnotatedProperty( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), ANNOTATEDPROPERTY, value);
	}
    /**
     * Adds a value to property AnnotatedProperty from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addAnnotatedProperty(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, ANNOTATEDPROPERTY, value);
	}
	
    /**
     * Adds a value to property AnnotatedProperty from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addAnnotatedProperty(Thing value) {
		Base.add(this.model, this.getResource(), ANNOTATEDPROPERTY, value);
	}
  

    /**
     * Sets a value of property AnnotatedProperty from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setAnnotatedProperty( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, ANNOTATEDPROPERTY, value);
	}
	
    /**
     * Sets a value of property AnnotatedProperty from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setAnnotatedProperty( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), ANNOTATEDPROPERTY, value);
	}
    /**
     * Sets a value of property AnnotatedProperty from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setAnnotatedProperty(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, ANNOTATEDPROPERTY, value);
	}
	
    /**
     * Sets a value of property AnnotatedProperty from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setAnnotatedProperty(Thing value) {
		Base.set(this.model, this.getResource(), ANNOTATEDPROPERTY, value);
	}
  


    /**
     * Removes a value of property AnnotatedProperty as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeAnnotatedProperty( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, ANNOTATEDPROPERTY, value);
	}
	
    /**
     * Removes a value of property AnnotatedProperty as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeAnnotatedProperty( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), ANNOTATEDPROPERTY, value);
	}
    /**
     * Removes a value of property AnnotatedProperty given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeAnnotatedProperty(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, ANNOTATEDPROPERTY, value);
	}
	
    /**
     * Removes a value of property AnnotatedProperty given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeAnnotatedProperty(Thing value) {
		Base.remove(this.model, this.getResource(), ANNOTATEDPROPERTY, value);
	}
  
    /**
     * Removes all values of property AnnotatedProperty     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllAnnotatedProperty( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, ANNOTATEDPROPERTY);
	}
	
    /**
     * Removes all values of property AnnotatedProperty	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllAnnotatedProperty() {
		Base.removeAll(this.model, this.getResource(), ANNOTATEDPROPERTY);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@c68af8 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasAnnotatedSource(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, ANNOTATEDSOURCE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@c68af8 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasAnnotatedSource() {
		return Base.has(this.model, this.getResource(), ANNOTATEDSOURCE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@c68af8 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasAnnotatedSource(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, ANNOTATEDSOURCE, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@c68af8 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasAnnotatedSource( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), ANNOTATEDSOURCE, value);
	}

     /**
     * Get all values of property AnnotatedSource as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllAnnotatedSource_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, ANNOTATEDSOURCE);
	}
	
    /**
     * Get all values of property AnnotatedSource as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllAnnotatedSource_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ANNOTATEDSOURCE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property AnnotatedSource as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllAnnotatedSource_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), ANNOTATEDSOURCE);
	}

    /**
     * Get all values of property AnnotatedSource as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllAnnotatedSource_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), ANNOTATEDSOURCE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property AnnotatedSource     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllAnnotatedSource(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, ANNOTATEDSOURCE, Thing.class);
	}
	
    /**
     * Get all values of property AnnotatedSource as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllAnnotatedSource_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ANNOTATEDSOURCE, Thing.class);
	}

    /**
     * Get all values of property AnnotatedSource     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllAnnotatedSource() {
		return Base.getAll(this.model, this.getResource(), ANNOTATEDSOURCE, Thing.class);
	}

    /**
     * Get all values of property AnnotatedSource as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllAnnotatedSource_as() {
		return Base.getAll_as(this.model, this.getResource(), ANNOTATEDSOURCE, Thing.class);
	}
 
    /**
     * Adds a value to property AnnotatedSource as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addAnnotatedSource( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, ANNOTATEDSOURCE, value);
	}
	
    /**
     * Adds a value to property AnnotatedSource as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addAnnotatedSource( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), ANNOTATEDSOURCE, value);
	}
    /**
     * Adds a value to property AnnotatedSource from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addAnnotatedSource(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, ANNOTATEDSOURCE, value);
	}
	
    /**
     * Adds a value to property AnnotatedSource from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addAnnotatedSource(Thing value) {
		Base.add(this.model, this.getResource(), ANNOTATEDSOURCE, value);
	}
  

    /**
     * Sets a value of property AnnotatedSource from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setAnnotatedSource( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, ANNOTATEDSOURCE, value);
	}
	
    /**
     * Sets a value of property AnnotatedSource from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setAnnotatedSource( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), ANNOTATEDSOURCE, value);
	}
    /**
     * Sets a value of property AnnotatedSource from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setAnnotatedSource(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, ANNOTATEDSOURCE, value);
	}
	
    /**
     * Sets a value of property AnnotatedSource from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setAnnotatedSource(Thing value) {
		Base.set(this.model, this.getResource(), ANNOTATEDSOURCE, value);
	}
  


    /**
     * Removes a value of property AnnotatedSource as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeAnnotatedSource( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, ANNOTATEDSOURCE, value);
	}
	
    /**
     * Removes a value of property AnnotatedSource as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeAnnotatedSource( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), ANNOTATEDSOURCE, value);
	}
    /**
     * Removes a value of property AnnotatedSource given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeAnnotatedSource(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, ANNOTATEDSOURCE, value);
	}
	
    /**
     * Removes a value of property AnnotatedSource given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeAnnotatedSource(Thing value) {
		Base.remove(this.model, this.getResource(), ANNOTATEDSOURCE, value);
	}
  
    /**
     * Removes all values of property AnnotatedSource     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllAnnotatedSource( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, ANNOTATEDSOURCE);
	}
	
    /**
     * Removes all values of property AnnotatedSource	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllAnnotatedSource() {
		Base.removeAll(this.model, this.getResource(), ANNOTATEDSOURCE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@299e34 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasAnnotatedTarget(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, ANNOTATEDTARGET);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@299e34 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasAnnotatedTarget() {
		return Base.has(this.model, this.getResource(), ANNOTATEDTARGET);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@299e34 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasAnnotatedTarget(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, ANNOTATEDTARGET, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@299e34 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasAnnotatedTarget( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), ANNOTATEDTARGET, value);
	}

     /**
     * Get all values of property AnnotatedTarget as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllAnnotatedTarget_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, ANNOTATEDTARGET);
	}
	
    /**
     * Get all values of property AnnotatedTarget as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllAnnotatedTarget_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ANNOTATEDTARGET, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property AnnotatedTarget as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllAnnotatedTarget_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), ANNOTATEDTARGET);
	}

    /**
     * Get all values of property AnnotatedTarget as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllAnnotatedTarget_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), ANNOTATEDTARGET, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property AnnotatedTarget     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllAnnotatedTarget(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, ANNOTATEDTARGET, Thing.class);
	}
	
    /**
     * Get all values of property AnnotatedTarget as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllAnnotatedTarget_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ANNOTATEDTARGET, Thing.class);
	}

    /**
     * Get all values of property AnnotatedTarget     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllAnnotatedTarget() {
		return Base.getAll(this.model, this.getResource(), ANNOTATEDTARGET, Thing.class);
	}

    /**
     * Get all values of property AnnotatedTarget as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllAnnotatedTarget_as() {
		return Base.getAll_as(this.model, this.getResource(), ANNOTATEDTARGET, Thing.class);
	}
 
    /**
     * Adds a value to property AnnotatedTarget as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addAnnotatedTarget( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, ANNOTATEDTARGET, value);
	}
	
    /**
     * Adds a value to property AnnotatedTarget as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addAnnotatedTarget( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), ANNOTATEDTARGET, value);
	}
    /**
     * Adds a value to property AnnotatedTarget from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addAnnotatedTarget(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, ANNOTATEDTARGET, value);
	}
	
    /**
     * Adds a value to property AnnotatedTarget from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addAnnotatedTarget(Thing value) {
		Base.add(this.model, this.getResource(), ANNOTATEDTARGET, value);
	}
  

    /**
     * Sets a value of property AnnotatedTarget from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setAnnotatedTarget( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, ANNOTATEDTARGET, value);
	}
	
    /**
     * Sets a value of property AnnotatedTarget from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setAnnotatedTarget( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), ANNOTATEDTARGET, value);
	}
    /**
     * Sets a value of property AnnotatedTarget from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setAnnotatedTarget(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, ANNOTATEDTARGET, value);
	}
	
    /**
     * Sets a value of property AnnotatedTarget from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setAnnotatedTarget(Thing value) {
		Base.set(this.model, this.getResource(), ANNOTATEDTARGET, value);
	}
  


    /**
     * Removes a value of property AnnotatedTarget as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeAnnotatedTarget( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, ANNOTATEDTARGET, value);
	}
	
    /**
     * Removes a value of property AnnotatedTarget as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeAnnotatedTarget( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), ANNOTATEDTARGET, value);
	}
    /**
     * Removes a value of property AnnotatedTarget given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeAnnotatedTarget(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, ANNOTATEDTARGET, value);
	}
	
    /**
     * Removes a value of property AnnotatedTarget given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeAnnotatedTarget(Thing value) {
		Base.remove(this.model, this.getResource(), ANNOTATEDTARGET, value);
	}
  
    /**
     * Removes all values of property AnnotatedTarget     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllAnnotatedTarget( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, ANNOTATEDTARGET);
	}
	
    /**
     * Removes all values of property AnnotatedTarget	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllAnnotatedTarget() {
		Base.removeAll(this.model, this.getResource(), ANNOTATEDTARGET);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@f60a7c has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasAq(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, AQ);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@f60a7c has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasAq() {
		return Base.has(this.model, this.getResource(), AQ);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@f60a7c has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasAq(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, AQ, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@f60a7c has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasAq( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), AQ, value);
	}

     /**
     * Get all values of property Aq as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllAq_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, AQ);
	}
	
    /**
     * Get all values of property Aq as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllAq_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, AQ, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Aq as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllAq_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), AQ);
	}

    /**
     * Get all values of property Aq as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllAq_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), AQ, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Aq     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllAq(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, AQ, Thing.class);
	}
	
    /**
     * Get all values of property Aq as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllAq_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, AQ, Thing.class);
	}

    /**
     * Get all values of property Aq     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllAq() {
		return Base.getAll(this.model, this.getResource(), AQ, Thing.class);
	}

    /**
     * Get all values of property Aq as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllAq_as() {
		return Base.getAll_as(this.model, this.getResource(), AQ, Thing.class);
	}
 
    /**
     * Adds a value to property Aq as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addAq( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, AQ, value);
	}
	
    /**
     * Adds a value to property Aq as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addAq( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), AQ, value);
	}
    /**
     * Adds a value to property Aq from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addAq(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, AQ, value);
	}
	
    /**
     * Adds a value to property Aq from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addAq(Thing value) {
		Base.add(this.model, this.getResource(), AQ, value);
	}
  

    /**
     * Sets a value of property Aq from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setAq( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, AQ, value);
	}
	
    /**
     * Sets a value of property Aq from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setAq( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), AQ, value);
	}
    /**
     * Sets a value of property Aq from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setAq(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, AQ, value);
	}
	
    /**
     * Sets a value of property Aq from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setAq(Thing value) {
		Base.set(this.model, this.getResource(), AQ, value);
	}
  


    /**
     * Removes a value of property Aq as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeAq( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, AQ, value);
	}
	
    /**
     * Removes a value of property Aq as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeAq( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), AQ, value);
	}
    /**
     * Removes a value of property Aq given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeAq(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, AQ, value);
	}
	
    /**
     * Removes a value of property Aq given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeAq(Thing value) {
		Base.remove(this.model, this.getResource(), AQ, value);
	}
  
    /**
     * Removes all values of property Aq     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllAq( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, AQ);
	}
	
    /**
     * Removes all values of property Aq	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllAq() {
		Base.removeAll(this.model, this.getResource(), AQ);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1d982e4 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasCategory(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, CATEGORY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1d982e4 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasCategory() {
		return Base.has(this.model, this.getResource(), CATEGORY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1d982e4 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasCategory(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, CATEGORY, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1d982e4 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasCategory( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), CATEGORY, value);
	}

     /**
     * Get all values of property Category as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllCategory_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, CATEGORY);
	}
	
    /**
     * Get all values of property Category as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllCategory_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CATEGORY, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Category as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllCategory_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), CATEGORY);
	}

    /**
     * Get all values of property Category as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllCategory_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), CATEGORY, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Category     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllCategory(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, CATEGORY, Thing.class);
	}
	
    /**
     * Get all values of property Category as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllCategory_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CATEGORY, Thing.class);
	}

    /**
     * Get all values of property Category     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllCategory() {
		return Base.getAll(this.model, this.getResource(), CATEGORY, Thing.class);
	}

    /**
     * Get all values of property Category as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllCategory_as() {
		return Base.getAll_as(this.model, this.getResource(), CATEGORY, Thing.class);
	}
 
    /**
     * Adds a value to property Category as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addCategory( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, CATEGORY, value);
	}
	
    /**
     * Adds a value to property Category as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addCategory( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), CATEGORY, value);
	}
    /**
     * Adds a value to property Category from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addCategory(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, CATEGORY, value);
	}
	
    /**
     * Adds a value to property Category from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addCategory(Thing value) {
		Base.add(this.model, this.getResource(), CATEGORY, value);
	}
  

    /**
     * Sets a value of property Category from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setCategory( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, CATEGORY, value);
	}
	
    /**
     * Sets a value of property Category from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setCategory( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), CATEGORY, value);
	}
    /**
     * Sets a value of property Category from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setCategory(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, CATEGORY, value);
	}
	
    /**
     * Sets a value of property Category from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setCategory(Thing value) {
		Base.set(this.model, this.getResource(), CATEGORY, value);
	}
  


    /**
     * Removes a value of property Category as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeCategory( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, CATEGORY, value);
	}
	
    /**
     * Removes a value of property Category as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeCategory( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), CATEGORY, value);
	}
    /**
     * Removes a value of property Category given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeCategory(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, CATEGORY, value);
	}
	
    /**
     * Removes a value of property Category given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeCategory(Thing value) {
		Base.remove(this.model, this.getResource(), CATEGORY, value);
	}
  
    /**
     * Removes all values of property Category     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllCategory( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, CATEGORY);
	}
	
    /**
     * Removes all values of property Category	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllCategory() {
		Base.removeAll(this.model, this.getResource(), CATEGORY);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@23cd88 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasComponent(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, COMPONENT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@23cd88 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasComponent() {
		return Base.has(this.model, this.getResource(), COMPONENT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@23cd88 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasComponent(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, COMPONENT, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@23cd88 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasComponent( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), COMPONENT, value);
	}

     /**
     * Get all values of property Component as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllComponent_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, COMPONENT);
	}
	
    /**
     * Get all values of property Component as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllComponent_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, COMPONENT, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Component as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllComponent_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), COMPONENT);
	}

    /**
     * Get all values of property Component as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllComponent_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), COMPONENT, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Component     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllComponent(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, COMPONENT, Thing.class);
	}
	
    /**
     * Get all values of property Component as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllComponent_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, COMPONENT, Thing.class);
	}

    /**
     * Get all values of property Component     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllComponent() {
		return Base.getAll(this.model, this.getResource(), COMPONENT, Thing.class);
	}

    /**
     * Get all values of property Component as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllComponent_as() {
		return Base.getAll_as(this.model, this.getResource(), COMPONENT, Thing.class);
	}
 
    /**
     * Adds a value to property Component as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addComponent( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, COMPONENT, value);
	}
	
    /**
     * Adds a value to property Component as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addComponent( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), COMPONENT, value);
	}
    /**
     * Adds a value to property Component from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addComponent(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, COMPONENT, value);
	}
	
    /**
     * Adds a value to property Component from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addComponent(Thing value) {
		Base.add(this.model, this.getResource(), COMPONENT, value);
	}
  

    /**
     * Sets a value of property Component from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setComponent( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, COMPONENT, value);
	}
	
    /**
     * Sets a value of property Component from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setComponent( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), COMPONENT, value);
	}
    /**
     * Sets a value of property Component from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setComponent(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, COMPONENT, value);
	}
	
    /**
     * Sets a value of property Component from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setComponent(Thing value) {
		Base.set(this.model, this.getResource(), COMPONENT, value);
	}
  


    /**
     * Removes a value of property Component as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeComponent( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, COMPONENT, value);
	}
	
    /**
     * Removes a value of property Component as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeComponent( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), COMPONENT, value);
	}
    /**
     * Removes a value of property Component given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeComponent(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, COMPONENT, value);
	}
	
    /**
     * Removes a value of property Component given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeComponent(Thing value) {
		Base.remove(this.model, this.getResource(), COMPONENT, value);
	}
  
    /**
     * Removes all values of property Component     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllComponent( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, COMPONENT);
	}
	
    /**
     * Removes all values of property Component	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllComponent() {
		Base.removeAll(this.model, this.getResource(), COMPONENT);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5fbef7 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasConstraints(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, CONSTRAINTS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5fbef7 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasConstraints() {
		return Base.has(this.model, this.getResource(), CONSTRAINTS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5fbef7 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasConstraints(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, CONSTRAINTS, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5fbef7 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasConstraints( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), CONSTRAINTS, value);
	}

     /**
     * Get all values of property Constraints as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllConstraints_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, CONSTRAINTS);
	}
	
    /**
     * Get all values of property Constraints as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllConstraints_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CONSTRAINTS, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Constraints as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllConstraints_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), CONSTRAINTS);
	}

    /**
     * Get all values of property Constraints as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllConstraints_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), CONSTRAINTS, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Constraints     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllConstraints(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, CONSTRAINTS, Thing.class);
	}
	
    /**
     * Get all values of property Constraints as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllConstraints_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CONSTRAINTS, Thing.class);
	}

    /**
     * Get all values of property Constraints     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllConstraints() {
		return Base.getAll(this.model, this.getResource(), CONSTRAINTS, Thing.class);
	}

    /**
     * Get all values of property Constraints as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllConstraints_as() {
		return Base.getAll_as(this.model, this.getResource(), CONSTRAINTS, Thing.class);
	}
 
    /**
     * Adds a value to property Constraints as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addConstraints( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, CONSTRAINTS, value);
	}
	
    /**
     * Adds a value to property Constraints as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addConstraints( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), CONSTRAINTS, value);
	}
    /**
     * Adds a value to property Constraints from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addConstraints(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, CONSTRAINTS, value);
	}
	
    /**
     * Adds a value to property Constraints from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addConstraints(Thing value) {
		Base.add(this.model, this.getResource(), CONSTRAINTS, value);
	}
  

    /**
     * Sets a value of property Constraints from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setConstraints( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, CONSTRAINTS, value);
	}
	
    /**
     * Sets a value of property Constraints from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setConstraints( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), CONSTRAINTS, value);
	}
    /**
     * Sets a value of property Constraints from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setConstraints(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, CONSTRAINTS, value);
	}
	
    /**
     * Sets a value of property Constraints from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setConstraints(Thing value) {
		Base.set(this.model, this.getResource(), CONSTRAINTS, value);
	}
  


    /**
     * Removes a value of property Constraints as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeConstraints( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, CONSTRAINTS, value);
	}
	
    /**
     * Removes a value of property Constraints as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeConstraints( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), CONSTRAINTS, value);
	}
    /**
     * Removes a value of property Constraints given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeConstraints(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, CONSTRAINTS, value);
	}
	
    /**
     * Removes a value of property Constraints given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeConstraints(Thing value) {
		Base.remove(this.model, this.getResource(), CONSTRAINTS, value);
	}
  
    /**
     * Removes all values of property Constraints     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllConstraints( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, CONSTRAINTS);
	}
	
    /**
     * Removes all values of property Constraints	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllConstraints() {
		Base.removeAll(this.model, this.getResource(), CONSTRAINTS);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@310d66 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasDefinition(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, DEFINITION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@310d66 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasDefinition() {
		return Base.has(this.model, this.getResource(), DEFINITION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@310d66 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasDefinition(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, DEFINITION, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@310d66 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasDefinition( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), DEFINITION, value);
	}

     /**
     * Get all values of property Definition as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDefinition_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, DEFINITION);
	}
	
    /**
     * Get all values of property Definition as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllDefinition_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, DEFINITION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Definition as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDefinition_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), DEFINITION);
	}

    /**
     * Get all values of property Definition as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllDefinition_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), DEFINITION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Definition     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllDefinition(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, DEFINITION, Thing.class);
	}
	
    /**
     * Get all values of property Definition as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllDefinition_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, DEFINITION, Thing.class);
	}

    /**
     * Get all values of property Definition     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllDefinition() {
		return Base.getAll(this.model, this.getResource(), DEFINITION, Thing.class);
	}

    /**
     * Get all values of property Definition as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllDefinition_as() {
		return Base.getAll_as(this.model, this.getResource(), DEFINITION, Thing.class);
	}
 
    /**
     * Adds a value to property Definition as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addDefinition( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, DEFINITION, value);
	}
	
    /**
     * Adds a value to property Definition as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addDefinition( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), DEFINITION, value);
	}
    /**
     * Adds a value to property Definition from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addDefinition(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, DEFINITION, value);
	}
	
    /**
     * Adds a value to property Definition from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addDefinition(Thing value) {
		Base.add(this.model, this.getResource(), DEFINITION, value);
	}
  

    /**
     * Sets a value of property Definition from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setDefinition( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, DEFINITION, value);
	}
	
    /**
     * Sets a value of property Definition from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setDefinition( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), DEFINITION, value);
	}
    /**
     * Sets a value of property Definition from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setDefinition(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, DEFINITION, value);
	}
	
    /**
     * Sets a value of property Definition from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setDefinition(Thing value) {
		Base.set(this.model, this.getResource(), DEFINITION, value);
	}
  


    /**
     * Removes a value of property Definition as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeDefinition( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, DEFINITION, value);
	}
	
    /**
     * Removes a value of property Definition as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeDefinition( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), DEFINITION, value);
	}
    /**
     * Removes a value of property Definition given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeDefinition(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, DEFINITION, value);
	}
	
    /**
     * Removes a value of property Definition given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeDefinition(Thing value) {
		Base.remove(this.model, this.getResource(), DEFINITION, value);
	}
  
    /**
     * Removes all values of property Definition     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllDefinition( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, DEFINITION);
	}
	
    /**
     * Removes all values of property Definition	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllDefinition() {
		Base.removeAll(this.model, this.getResource(), DEFINITION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1e5fd87 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasDisjointWith(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, DISJOINTWITH);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1e5fd87 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasDisjointWith() {
		return Base.has(this.model, this.getResource(), DISJOINTWITH);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1e5fd87 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasDisjointWith(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, DISJOINTWITH, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1e5fd87 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasDisjointWith( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), DISJOINTWITH, value);
	}

     /**
     * Get all values of property DisjointWith as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDisjointWith_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, DISJOINTWITH);
	}
	
    /**
     * Get all values of property DisjointWith as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllDisjointWith_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, DISJOINTWITH, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property DisjointWith as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDisjointWith_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), DISJOINTWITH);
	}

    /**
     * Get all values of property DisjointWith as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllDisjointWith_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), DISJOINTWITH, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property DisjointWith     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllDisjointWith(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, DISJOINTWITH, Thing.class);
	}
	
    /**
     * Get all values of property DisjointWith as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllDisjointWith_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, DISJOINTWITH, Thing.class);
	}

    /**
     * Get all values of property DisjointWith     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllDisjointWith() {
		return Base.getAll(this.model, this.getResource(), DISJOINTWITH, Thing.class);
	}

    /**
     * Get all values of property DisjointWith as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllDisjointWith_as() {
		return Base.getAll_as(this.model, this.getResource(), DISJOINTWITH, Thing.class);
	}
 
    /**
     * Adds a value to property DisjointWith as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addDisjointWith( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, DISJOINTWITH, value);
	}
	
    /**
     * Adds a value to property DisjointWith as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addDisjointWith( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), DISJOINTWITH, value);
	}
    /**
     * Adds a value to property DisjointWith from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addDisjointWith(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, DISJOINTWITH, value);
	}
	
    /**
     * Adds a value to property DisjointWith from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addDisjointWith(Thing value) {
		Base.add(this.model, this.getResource(), DISJOINTWITH, value);
	}
  

    /**
     * Sets a value of property DisjointWith from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setDisjointWith( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, DISJOINTWITH, value);
	}
	
    /**
     * Sets a value of property DisjointWith from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setDisjointWith( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), DISJOINTWITH, value);
	}
    /**
     * Sets a value of property DisjointWith from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setDisjointWith(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, DISJOINTWITH, value);
	}
	
    /**
     * Sets a value of property DisjointWith from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setDisjointWith(Thing value) {
		Base.set(this.model, this.getResource(), DISJOINTWITH, value);
	}
  


    /**
     * Removes a value of property DisjointWith as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeDisjointWith( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, DISJOINTWITH, value);
	}
	
    /**
     * Removes a value of property DisjointWith as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeDisjointWith( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), DISJOINTWITH, value);
	}
    /**
     * Removes a value of property DisjointWith given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeDisjointWith(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, DISJOINTWITH, value);
	}
	
    /**
     * Removes a value of property DisjointWith given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeDisjointWith(Thing value) {
		Base.remove(this.model, this.getResource(), DISJOINTWITH, value);
	}
  
    /**
     * Removes all values of property DisjointWith     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllDisjointWith( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, DISJOINTWITH);
	}
	
    /**
     * Removes all values of property DisjointWith	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllDisjointWith() {
		Base.removeAll(this.model, this.getResource(), DISJOINTWITH);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@17f1dbd has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasDm(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, DM);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@17f1dbd has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasDm() {
		return Base.has(this.model, this.getResource(), DM);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@17f1dbd has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasDm(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, DM, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@17f1dbd has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasDm( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), DM, value);
	}

     /**
     * Get all values of property Dm as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDm_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, DM);
	}
	
    /**
     * Get all values of property Dm as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllDm_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, DM, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Dm as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDm_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), DM);
	}

    /**
     * Get all values of property Dm as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllDm_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), DM, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Dm     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllDm(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, DM, Thing.class);
	}
	
    /**
     * Get all values of property Dm as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllDm_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, DM, Thing.class);
	}

    /**
     * Get all values of property Dm     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllDm() {
		return Base.getAll(this.model, this.getResource(), DM, Thing.class);
	}

    /**
     * Get all values of property Dm as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllDm_as() {
		return Base.getAll_as(this.model, this.getResource(), DM, Thing.class);
	}
 
    /**
     * Adds a value to property Dm as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addDm( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, DM, value);
	}
	
    /**
     * Adds a value to property Dm as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addDm( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), DM, value);
	}
    /**
     * Adds a value to property Dm from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addDm(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, DM, value);
	}
	
    /**
     * Adds a value to property Dm from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addDm(Thing value) {
		Base.add(this.model, this.getResource(), DM, value);
	}
  

    /**
     * Sets a value of property Dm from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setDm( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, DM, value);
	}
	
    /**
     * Sets a value of property Dm from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setDm( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), DM, value);
	}
    /**
     * Sets a value of property Dm from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setDm(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, DM, value);
	}
	
    /**
     * Sets a value of property Dm from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setDm(Thing value) {
		Base.set(this.model, this.getResource(), DM, value);
	}
  


    /**
     * Removes a value of property Dm as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeDm( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, DM, value);
	}
	
    /**
     * Removes a value of property Dm as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeDm( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), DM, value);
	}
    /**
     * Removes a value of property Dm given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeDm(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, DM, value);
	}
	
    /**
     * Removes a value of property Dm given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeDm(Thing value) {
		Base.remove(this.model, this.getResource(), DM, value);
	}
  
    /**
     * Removes all values of property Dm     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllDm( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, DM);
	}
	
    /**
     * Removes all values of property Dm	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllDm() {
		Base.removeAll(this.model, this.getResource(), DM);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1a2cfbc has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasEditorialNote(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EDITORIALNOTE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1a2cfbc has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasEditorialNote() {
		return Base.has(this.model, this.getResource(), EDITORIALNOTE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1a2cfbc has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasEditorialNote(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EDITORIALNOTE, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1a2cfbc has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasEditorialNote( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EDITORIALNOTE, value);
	}

     /**
     * Get all values of property EditorialNote as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllEditorialNote_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EDITORIALNOTE);
	}
	
    /**
     * Get all values of property EditorialNote as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllEditorialNote_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EDITORIALNOTE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property EditorialNote as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllEditorialNote_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EDITORIALNOTE);
	}

    /**
     * Get all values of property EditorialNote as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllEditorialNote_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EDITORIALNOTE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property EditorialNote     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllEditorialNote(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EDITORIALNOTE, Thing.class);
	}
	
    /**
     * Get all values of property EditorialNote as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllEditorialNote_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EDITORIALNOTE, Thing.class);
	}

    /**
     * Get all values of property EditorialNote     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllEditorialNote() {
		return Base.getAll(this.model, this.getResource(), EDITORIALNOTE, Thing.class);
	}

    /**
     * Get all values of property EditorialNote as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllEditorialNote_as() {
		return Base.getAll_as(this.model, this.getResource(), EDITORIALNOTE, Thing.class);
	}
 
    /**
     * Adds a value to property EditorialNote as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addEditorialNote( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EDITORIALNOTE, value);
	}
	
    /**
     * Adds a value to property EditorialNote as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addEditorialNote( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EDITORIALNOTE, value);
	}
    /**
     * Adds a value to property EditorialNote from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addEditorialNote(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, EDITORIALNOTE, value);
	}
	
    /**
     * Adds a value to property EditorialNote from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addEditorialNote(Thing value) {
		Base.add(this.model, this.getResource(), EDITORIALNOTE, value);
	}
  

    /**
     * Sets a value of property EditorialNote from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setEditorialNote( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EDITORIALNOTE, value);
	}
	
    /**
     * Sets a value of property EditorialNote from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setEditorialNote( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EDITORIALNOTE, value);
	}
    /**
     * Sets a value of property EditorialNote from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setEditorialNote(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, EDITORIALNOTE, value);
	}
	
    /**
     * Sets a value of property EditorialNote from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setEditorialNote(Thing value) {
		Base.set(this.model, this.getResource(), EDITORIALNOTE, value);
	}
  


    /**
     * Removes a value of property EditorialNote as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeEditorialNote( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EDITORIALNOTE, value);
	}
	
    /**
     * Removes a value of property EditorialNote as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeEditorialNote( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EDITORIALNOTE, value);
	}
    /**
     * Removes a value of property EditorialNote given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeEditorialNote(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, EDITORIALNOTE, value);
	}
	
    /**
     * Removes a value of property EditorialNote given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeEditorialNote(Thing value) {
		Base.remove(this.model, this.getResource(), EDITORIALNOTE, value);
	}
  
    /**
     * Removes all values of property EditorialNote     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllEditorialNote( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EDITORIALNOTE);
	}
	
    /**
     * Removes all values of property EditorialNote	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllEditorialNote() {
		Base.removeAll(this.model, this.getResource(), EDITORIALNOTE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@12eafbf has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasEditorsDefinition(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EDITORSDEFINITION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@12eafbf has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasEditorsDefinition() {
		return Base.has(this.model, this.getResource(), EDITORSDEFINITION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@12eafbf has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasEditorsDefinition(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EDITORSDEFINITION, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@12eafbf has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasEditorsDefinition( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EDITORSDEFINITION, value);
	}

     /**
     * Get all values of property EditorsDefinition as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllEditorsDefinition_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EDITORSDEFINITION);
	}
	
    /**
     * Get all values of property EditorsDefinition as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllEditorsDefinition_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EDITORSDEFINITION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property EditorsDefinition as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllEditorsDefinition_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EDITORSDEFINITION);
	}

    /**
     * Get all values of property EditorsDefinition as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllEditorsDefinition_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EDITORSDEFINITION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property EditorsDefinition     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllEditorsDefinition(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EDITORSDEFINITION, Thing.class);
	}
	
    /**
     * Get all values of property EditorsDefinition as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllEditorsDefinition_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EDITORSDEFINITION, Thing.class);
	}

    /**
     * Get all values of property EditorsDefinition     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllEditorsDefinition() {
		return Base.getAll(this.model, this.getResource(), EDITORSDEFINITION, Thing.class);
	}

    /**
     * Get all values of property EditorsDefinition as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllEditorsDefinition_as() {
		return Base.getAll_as(this.model, this.getResource(), EDITORSDEFINITION, Thing.class);
	}
 
    /**
     * Adds a value to property EditorsDefinition as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addEditorsDefinition( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EDITORSDEFINITION, value);
	}
	
    /**
     * Adds a value to property EditorsDefinition as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addEditorsDefinition( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EDITORSDEFINITION, value);
	}
    /**
     * Adds a value to property EditorsDefinition from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addEditorsDefinition(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, EDITORSDEFINITION, value);
	}
	
    /**
     * Adds a value to property EditorsDefinition from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addEditorsDefinition(Thing value) {
		Base.add(this.model, this.getResource(), EDITORSDEFINITION, value);
	}
  

    /**
     * Sets a value of property EditorsDefinition from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setEditorsDefinition( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EDITORSDEFINITION, value);
	}
	
    /**
     * Sets a value of property EditorsDefinition from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setEditorsDefinition( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EDITORSDEFINITION, value);
	}
    /**
     * Sets a value of property EditorsDefinition from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setEditorsDefinition(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, EDITORSDEFINITION, value);
	}
	
    /**
     * Sets a value of property EditorsDefinition from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setEditorsDefinition(Thing value) {
		Base.set(this.model, this.getResource(), EDITORSDEFINITION, value);
	}
  


    /**
     * Removes a value of property EditorsDefinition as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeEditorsDefinition( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EDITORSDEFINITION, value);
	}
	
    /**
     * Removes a value of property EditorsDefinition as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeEditorsDefinition( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EDITORSDEFINITION, value);
	}
    /**
     * Removes a value of property EditorsDefinition given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeEditorsDefinition(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, EDITORSDEFINITION, value);
	}
	
    /**
     * Removes a value of property EditorsDefinition given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeEditorsDefinition(Thing value) {
		Base.remove(this.model, this.getResource(), EDITORSDEFINITION, value);
	}
  
    /**
     * Removes all values of property EditorsDefinition     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllEditorsDefinition( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EDITORSDEFINITION);
	}
	
    /**
     * Removes all values of property EditorsDefinition	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllEditorsDefinition() {
		Base.removeAll(this.model, this.getResource(), EDITORSDEFINITION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@175718c has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasImports(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, IMPORTS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@175718c has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasImports() {
		return Base.has(this.model, this.getResource(), IMPORTS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@175718c has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasImports(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, IMPORTS, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@175718c has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasImports( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), IMPORTS, value);
	}

     /**
     * Get all values of property Imports as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllImports_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, IMPORTS);
	}
	
    /**
     * Get all values of property Imports as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllImports_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, IMPORTS, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Imports as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllImports_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), IMPORTS);
	}

    /**
     * Get all values of property Imports as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllImports_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), IMPORTS, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Imports     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllImports(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, IMPORTS, Thing.class);
	}
	
    /**
     * Get all values of property Imports as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllImports_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, IMPORTS, Thing.class);
	}

    /**
     * Get all values of property Imports     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllImports() {
		return Base.getAll(this.model, this.getResource(), IMPORTS, Thing.class);
	}

    /**
     * Get all values of property Imports as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllImports_as() {
		return Base.getAll_as(this.model, this.getResource(), IMPORTS, Thing.class);
	}
 
    /**
     * Adds a value to property Imports as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addImports( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, IMPORTS, value);
	}
	
    /**
     * Adds a value to property Imports as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addImports( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), IMPORTS, value);
	}
    /**
     * Adds a value to property Imports from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addImports(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, IMPORTS, value);
	}
	
    /**
     * Adds a value to property Imports from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addImports(Thing value) {
		Base.add(this.model, this.getResource(), IMPORTS, value);
	}
  

    /**
     * Sets a value of property Imports from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setImports( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, IMPORTS, value);
	}
	
    /**
     * Sets a value of property Imports from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setImports( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), IMPORTS, value);
	}
    /**
     * Sets a value of property Imports from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setImports(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, IMPORTS, value);
	}
	
    /**
     * Sets a value of property Imports from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setImports(Thing value) {
		Base.set(this.model, this.getResource(), IMPORTS, value);
	}
  


    /**
     * Removes a value of property Imports as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeImports( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, IMPORTS, value);
	}
	
    /**
     * Removes a value of property Imports as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeImports( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), IMPORTS, value);
	}
    /**
     * Removes a value of property Imports given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeImports(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, IMPORTS, value);
	}
	
    /**
     * Removes a value of property Imports given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeImports(Thing value) {
		Base.remove(this.model, this.getResource(), IMPORTS, value);
	}
  
    /**
     * Removes all values of property Imports     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllImports( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, IMPORTS);
	}
	
    /**
     * Removes all values of property Imports	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllImports() {
		Base.removeAll(this.model, this.getResource(), IMPORTS);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@b7c24 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasInfluenced(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, INFLUENCED);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@b7c24 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasInfluenced() {
		return Base.has(this.model, this.getResource(), INFLUENCED);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@b7c24 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasInfluenced(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, INFLUENCED, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@b7c24 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasInfluenced( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), INFLUENCED, value);
	}

     /**
     * Get all values of property Influenced as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllInfluenced_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, INFLUENCED);
	}
	
    /**
     * Get all values of property Influenced as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllInfluenced_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, INFLUENCED, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Influenced as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllInfluenced_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), INFLUENCED);
	}

    /**
     * Get all values of property Influenced as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllInfluenced_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), INFLUENCED, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Influenced     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllInfluenced(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, INFLUENCED, Thing.class);
	}
	
    /**
     * Get all values of property Influenced as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllInfluenced_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, INFLUENCED, Thing.class);
	}

    /**
     * Get all values of property Influenced     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllInfluenced() {
		return Base.getAll(this.model, this.getResource(), INFLUENCED, Thing.class);
	}

    /**
     * Get all values of property Influenced as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllInfluenced_as() {
		return Base.getAll_as(this.model, this.getResource(), INFLUENCED, Thing.class);
	}
 
    /**
     * Adds a value to property Influenced as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addInfluenced( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, INFLUENCED, value);
	}
	
    /**
     * Adds a value to property Influenced as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addInfluenced( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), INFLUENCED, value);
	}
    /**
     * Adds a value to property Influenced from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addInfluenced(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, INFLUENCED, value);
	}
	
    /**
     * Adds a value to property Influenced from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addInfluenced(Thing value) {
		Base.add(this.model, this.getResource(), INFLUENCED, value);
	}
  

    /**
     * Sets a value of property Influenced from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setInfluenced( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, INFLUENCED, value);
	}
	
    /**
     * Sets a value of property Influenced from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setInfluenced( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), INFLUENCED, value);
	}
    /**
     * Sets a value of property Influenced from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setInfluenced(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, INFLUENCED, value);
	}
	
    /**
     * Sets a value of property Influenced from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setInfluenced(Thing value) {
		Base.set(this.model, this.getResource(), INFLUENCED, value);
	}
  


    /**
     * Removes a value of property Influenced as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeInfluenced( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, INFLUENCED, value);
	}
	
    /**
     * Removes a value of property Influenced as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeInfluenced( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), INFLUENCED, value);
	}
    /**
     * Removes a value of property Influenced given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeInfluenced(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, INFLUENCED, value);
	}
	
    /**
     * Removes a value of property Influenced given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeInfluenced(Thing value) {
		Base.remove(this.model, this.getResource(), INFLUENCED, value);
	}
  
    /**
     * Removes all values of property Influenced     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllInfluenced( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, INFLUENCED);
	}
	
    /**
     * Removes all values of property Influenced	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllInfluenced() {
		Base.removeAll(this.model, this.getResource(), INFLUENCED);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@82d811 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasInverse(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, INVERSE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@82d811 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasInverse() {
		return Base.has(this.model, this.getResource(), INVERSE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@82d811 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasInverse(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, INVERSE, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@82d811 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasInverse( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), INVERSE, value);
	}

     /**
     * Get all values of property Inverse as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllInverse_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, INVERSE);
	}
	
    /**
     * Get all values of property Inverse as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllInverse_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, INVERSE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Inverse as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllInverse_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), INVERSE);
	}

    /**
     * Get all values of property Inverse as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllInverse_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), INVERSE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Inverse     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllInverse(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, INVERSE, Thing.class);
	}
	
    /**
     * Get all values of property Inverse as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllInverse_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, INVERSE, Thing.class);
	}

    /**
     * Get all values of property Inverse     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllInverse() {
		return Base.getAll(this.model, this.getResource(), INVERSE, Thing.class);
	}

    /**
     * Get all values of property Inverse as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllInverse_as() {
		return Base.getAll_as(this.model, this.getResource(), INVERSE, Thing.class);
	}
 
    /**
     * Adds a value to property Inverse as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addInverse( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, INVERSE, value);
	}
	
    /**
     * Adds a value to property Inverse as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addInverse( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), INVERSE, value);
	}
    /**
     * Adds a value to property Inverse from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addInverse(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, INVERSE, value);
	}
	
    /**
     * Adds a value to property Inverse from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addInverse(Thing value) {
		Base.add(this.model, this.getResource(), INVERSE, value);
	}
  

    /**
     * Sets a value of property Inverse from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setInverse( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, INVERSE, value);
	}
	
    /**
     * Sets a value of property Inverse from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setInverse( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), INVERSE, value);
	}
    /**
     * Sets a value of property Inverse from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setInverse(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, INVERSE, value);
	}
	
    /**
     * Sets a value of property Inverse from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setInverse(Thing value) {
		Base.set(this.model, this.getResource(), INVERSE, value);
	}
  


    /**
     * Removes a value of property Inverse as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeInverse( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, INVERSE, value);
	}
	
    /**
     * Removes a value of property Inverse as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeInverse( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), INVERSE, value);
	}
    /**
     * Removes a value of property Inverse given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeInverse(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, INVERSE, value);
	}
	
    /**
     * Removes a value of property Inverse given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeInverse(Thing value) {
		Base.remove(this.model, this.getResource(), INVERSE, value);
	}
  
    /**
     * Removes all values of property Inverse     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllInverse( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, INVERSE);
	}
	
    /**
     * Removes all values of property Inverse	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllInverse() {
		Base.removeAll(this.model, this.getResource(), INVERSE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@d1581c has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasInverseOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, INVERSEOF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@d1581c has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasInverseOf() {
		return Base.has(this.model, this.getResource(), INVERSEOF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@d1581c has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasInverseOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, INVERSEOF, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@d1581c has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasInverseOf( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), INVERSEOF, value);
	}

     /**
     * Get all values of property InverseOf as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllInverseOf_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, INVERSEOF);
	}
	
    /**
     * Get all values of property InverseOf as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllInverseOf_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, INVERSEOF, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property InverseOf as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllInverseOf_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), INVERSEOF);
	}

    /**
     * Get all values of property InverseOf as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllInverseOf_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), INVERSEOF, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property InverseOf     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllInverseOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, INVERSEOF, Thing.class);
	}
	
    /**
     * Get all values of property InverseOf as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllInverseOf_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, INVERSEOF, Thing.class);
	}

    /**
     * Get all values of property InverseOf     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllInverseOf() {
		return Base.getAll(this.model, this.getResource(), INVERSEOF, Thing.class);
	}

    /**
     * Get all values of property InverseOf as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllInverseOf_as() {
		return Base.getAll_as(this.model, this.getResource(), INVERSEOF, Thing.class);
	}
 
    /**
     * Adds a value to property InverseOf as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addInverseOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, INVERSEOF, value);
	}
	
    /**
     * Adds a value to property InverseOf as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addInverseOf( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), INVERSEOF, value);
	}
    /**
     * Adds a value to property InverseOf from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addInverseOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, INVERSEOF, value);
	}
	
    /**
     * Adds a value to property InverseOf from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addInverseOf(Thing value) {
		Base.add(this.model, this.getResource(), INVERSEOF, value);
	}
  

    /**
     * Sets a value of property InverseOf from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setInverseOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, INVERSEOF, value);
	}
	
    /**
     * Sets a value of property InverseOf from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setInverseOf( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), INVERSEOF, value);
	}
    /**
     * Sets a value of property InverseOf from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setInverseOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, INVERSEOF, value);
	}
	
    /**
     * Sets a value of property InverseOf from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setInverseOf(Thing value) {
		Base.set(this.model, this.getResource(), INVERSEOF, value);
	}
  


    /**
     * Removes a value of property InverseOf as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeInverseOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, INVERSEOF, value);
	}
	
    /**
     * Removes a value of property InverseOf as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeInverseOf( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), INVERSEOF, value);
	}
    /**
     * Removes a value of property InverseOf given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeInverseOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, INVERSEOF, value);
	}
	
    /**
     * Removes a value of property InverseOf given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeInverseOf(Thing value) {
		Base.remove(this.model, this.getResource(), INVERSEOF, value);
	}
  
    /**
     * Removes all values of property InverseOf     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllInverseOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, INVERSEOF);
	}
	
    /**
     * Removes all values of property InverseOf	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllInverseOf() {
		Base.removeAll(this.model, this.getResource(), INVERSEOF);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1ce1eed has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasMaxCardinality(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, MAXCARDINALITY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1ce1eed has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasMaxCardinality() {
		return Base.has(this.model, this.getResource(), MAXCARDINALITY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1ce1eed has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasMaxCardinality(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, MAXCARDINALITY, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1ce1eed has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasMaxCardinality( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), MAXCARDINALITY, value);
	}

     /**
     * Get all values of property MaxCardinality as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllMaxCardinality_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, MAXCARDINALITY);
	}
	
    /**
     * Get all values of property MaxCardinality as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllMaxCardinality_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, MAXCARDINALITY, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property MaxCardinality as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllMaxCardinality_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), MAXCARDINALITY);
	}

    /**
     * Get all values of property MaxCardinality as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllMaxCardinality_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), MAXCARDINALITY, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property MaxCardinality     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllMaxCardinality(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, MAXCARDINALITY, Thing.class);
	}
	
    /**
     * Get all values of property MaxCardinality as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllMaxCardinality_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, MAXCARDINALITY, Thing.class);
	}

    /**
     * Get all values of property MaxCardinality     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllMaxCardinality() {
		return Base.getAll(this.model, this.getResource(), MAXCARDINALITY, Thing.class);
	}

    /**
     * Get all values of property MaxCardinality as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllMaxCardinality_as() {
		return Base.getAll_as(this.model, this.getResource(), MAXCARDINALITY, Thing.class);
	}
 
    /**
     * Adds a value to property MaxCardinality as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addMaxCardinality( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, MAXCARDINALITY, value);
	}
	
    /**
     * Adds a value to property MaxCardinality as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addMaxCardinality( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), MAXCARDINALITY, value);
	}
    /**
     * Adds a value to property MaxCardinality from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addMaxCardinality(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, MAXCARDINALITY, value);
	}
	
    /**
     * Adds a value to property MaxCardinality from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addMaxCardinality(Thing value) {
		Base.add(this.model, this.getResource(), MAXCARDINALITY, value);
	}
  

    /**
     * Sets a value of property MaxCardinality from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setMaxCardinality( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, MAXCARDINALITY, value);
	}
	
    /**
     * Sets a value of property MaxCardinality from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setMaxCardinality( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), MAXCARDINALITY, value);
	}
    /**
     * Sets a value of property MaxCardinality from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setMaxCardinality(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, MAXCARDINALITY, value);
	}
	
    /**
     * Sets a value of property MaxCardinality from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setMaxCardinality(Thing value) {
		Base.set(this.model, this.getResource(), MAXCARDINALITY, value);
	}
  


    /**
     * Removes a value of property MaxCardinality as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeMaxCardinality( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, MAXCARDINALITY, value);
	}
	
    /**
     * Removes a value of property MaxCardinality as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeMaxCardinality( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), MAXCARDINALITY, value);
	}
    /**
     * Removes a value of property MaxCardinality given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeMaxCardinality(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, MAXCARDINALITY, value);
	}
	
    /**
     * Removes a value of property MaxCardinality given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeMaxCardinality(Thing value) {
		Base.remove(this.model, this.getResource(), MAXCARDINALITY, value);
	}
  
    /**
     * Removes all values of property MaxCardinality     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllMaxCardinality( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, MAXCARDINALITY);
	}
	
    /**
     * Removes all values of property MaxCardinality	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllMaxCardinality() {
		Base.removeAll(this.model, this.getResource(), MAXCARDINALITY);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@9ccf7c has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasN(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, N);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@9ccf7c has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasN() {
		return Base.has(this.model, this.getResource(), N);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@9ccf7c has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasN(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, N, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@9ccf7c has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasN( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), N, value);
	}

     /**
     * Get all values of property N as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllN_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, N);
	}
	
    /**
     * Get all values of property N as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllN_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, N, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property N as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllN_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), N);
	}

    /**
     * Get all values of property N as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllN_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), N, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property N     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllN(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, N, Thing.class);
	}
	
    /**
     * Get all values of property N as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllN_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, N, Thing.class);
	}

    /**
     * Get all values of property N     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllN() {
		return Base.getAll(this.model, this.getResource(), N, Thing.class);
	}

    /**
     * Get all values of property N as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllN_as() {
		return Base.getAll_as(this.model, this.getResource(), N, Thing.class);
	}
 
    /**
     * Adds a value to property N as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addN( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, N, value);
	}
	
    /**
     * Adds a value to property N as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addN( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), N, value);
	}
    /**
     * Adds a value to property N from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addN(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, N, value);
	}
	
    /**
     * Adds a value to property N from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addN(Thing value) {
		Base.add(this.model, this.getResource(), N, value);
	}
  

    /**
     * Sets a value of property N from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setN( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, N, value);
	}
	
    /**
     * Sets a value of property N from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setN( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), N, value);
	}
    /**
     * Sets a value of property N from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setN(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, N, value);
	}
	
    /**
     * Sets a value of property N from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setN(Thing value) {
		Base.set(this.model, this.getResource(), N, value);
	}
  


    /**
     * Removes a value of property N as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeN( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, N, value);
	}
	
    /**
     * Removes a value of property N as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeN( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), N, value);
	}
    /**
     * Removes a value of property N given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeN(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, N, value);
	}
	
    /**
     * Removes a value of property N given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeN(Thing value) {
		Base.remove(this.model, this.getResource(), N, value);
	}
  
    /**
     * Removes all values of property N     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllN( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, N);
	}
	
    /**
     * Removes all values of property N	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllN() {
		Base.removeAll(this.model, this.getResource(), N);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@14fb4eb has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasOnProperty(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, ONPROPERTY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@14fb4eb has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasOnProperty() {
		return Base.has(this.model, this.getResource(), ONPROPERTY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@14fb4eb has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasOnProperty(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, ONPROPERTY, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@14fb4eb has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasOnProperty( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), ONPROPERTY, value);
	}

     /**
     * Get all values of property OnProperty as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllOnProperty_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, ONPROPERTY);
	}
	
    /**
     * Get all values of property OnProperty as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllOnProperty_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ONPROPERTY, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property OnProperty as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllOnProperty_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), ONPROPERTY);
	}

    /**
     * Get all values of property OnProperty as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllOnProperty_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), ONPROPERTY, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property OnProperty     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllOnProperty(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, ONPROPERTY, Thing.class);
	}
	
    /**
     * Get all values of property OnProperty as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllOnProperty_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ONPROPERTY, Thing.class);
	}

    /**
     * Get all values of property OnProperty     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllOnProperty() {
		return Base.getAll(this.model, this.getResource(), ONPROPERTY, Thing.class);
	}

    /**
     * Get all values of property OnProperty as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllOnProperty_as() {
		return Base.getAll_as(this.model, this.getResource(), ONPROPERTY, Thing.class);
	}
 
    /**
     * Adds a value to property OnProperty as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addOnProperty( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, ONPROPERTY, value);
	}
	
    /**
     * Adds a value to property OnProperty as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addOnProperty( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), ONPROPERTY, value);
	}
    /**
     * Adds a value to property OnProperty from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addOnProperty(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, ONPROPERTY, value);
	}
	
    /**
     * Adds a value to property OnProperty from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addOnProperty(Thing value) {
		Base.add(this.model, this.getResource(), ONPROPERTY, value);
	}
  

    /**
     * Sets a value of property OnProperty from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setOnProperty( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, ONPROPERTY, value);
	}
	
    /**
     * Sets a value of property OnProperty from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setOnProperty( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), ONPROPERTY, value);
	}
    /**
     * Sets a value of property OnProperty from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setOnProperty(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, ONPROPERTY, value);
	}
	
    /**
     * Sets a value of property OnProperty from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setOnProperty(Thing value) {
		Base.set(this.model, this.getResource(), ONPROPERTY, value);
	}
  


    /**
     * Removes a value of property OnProperty as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeOnProperty( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, ONPROPERTY, value);
	}
	
    /**
     * Removes a value of property OnProperty as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeOnProperty( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), ONPROPERTY, value);
	}
    /**
     * Removes a value of property OnProperty given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeOnProperty(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, ONPROPERTY, value);
	}
	
    /**
     * Removes a value of property OnProperty given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeOnProperty(Thing value) {
		Base.remove(this.model, this.getResource(), ONPROPERTY, value);
	}
  
    /**
     * Removes all values of property OnProperty     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllOnProperty( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, ONPROPERTY);
	}
	
    /**
     * Removes all values of property OnProperty	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllOnProperty() {
		Base.removeAll(this.model, this.getResource(), ONPROPERTY);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1c69070 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasPropertyChainAxiom(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, PROPERTYCHAINAXIOM);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1c69070 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasPropertyChainAxiom() {
		return Base.has(this.model, this.getResource(), PROPERTYCHAINAXIOM);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1c69070 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasPropertyChainAxiom(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, PROPERTYCHAINAXIOM, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1c69070 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasPropertyChainAxiom( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), PROPERTYCHAINAXIOM, value);
	}

     /**
     * Get all values of property PropertyChainAxiom as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPropertyChainAxiom_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, PROPERTYCHAINAXIOM);
	}
	
    /**
     * Get all values of property PropertyChainAxiom as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPropertyChainAxiom_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PROPERTYCHAINAXIOM, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property PropertyChainAxiom as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPropertyChainAxiom_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), PROPERTYCHAINAXIOM);
	}

    /**
     * Get all values of property PropertyChainAxiom as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPropertyChainAxiom_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), PROPERTYCHAINAXIOM, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property PropertyChainAxiom     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllPropertyChainAxiom(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, PROPERTYCHAINAXIOM, Thing.class);
	}
	
    /**
     * Get all values of property PropertyChainAxiom as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllPropertyChainAxiom_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PROPERTYCHAINAXIOM, Thing.class);
	}

    /**
     * Get all values of property PropertyChainAxiom     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllPropertyChainAxiom() {
		return Base.getAll(this.model, this.getResource(), PROPERTYCHAINAXIOM, Thing.class);
	}

    /**
     * Get all values of property PropertyChainAxiom as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllPropertyChainAxiom_as() {
		return Base.getAll_as(this.model, this.getResource(), PROPERTYCHAINAXIOM, Thing.class);
	}
 
    /**
     * Adds a value to property PropertyChainAxiom as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addPropertyChainAxiom( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, PROPERTYCHAINAXIOM, value);
	}
	
    /**
     * Adds a value to property PropertyChainAxiom as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addPropertyChainAxiom( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), PROPERTYCHAINAXIOM, value);
	}
    /**
     * Adds a value to property PropertyChainAxiom from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addPropertyChainAxiom(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, PROPERTYCHAINAXIOM, value);
	}
	
    /**
     * Adds a value to property PropertyChainAxiom from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addPropertyChainAxiom(Thing value) {
		Base.add(this.model, this.getResource(), PROPERTYCHAINAXIOM, value);
	}
  

    /**
     * Sets a value of property PropertyChainAxiom from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setPropertyChainAxiom( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, PROPERTYCHAINAXIOM, value);
	}
	
    /**
     * Sets a value of property PropertyChainAxiom from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setPropertyChainAxiom( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), PROPERTYCHAINAXIOM, value);
	}
    /**
     * Sets a value of property PropertyChainAxiom from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setPropertyChainAxiom(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, PROPERTYCHAINAXIOM, value);
	}
	
    /**
     * Sets a value of property PropertyChainAxiom from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setPropertyChainAxiom(Thing value) {
		Base.set(this.model, this.getResource(), PROPERTYCHAINAXIOM, value);
	}
  


    /**
     * Removes a value of property PropertyChainAxiom as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removePropertyChainAxiom( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, PROPERTYCHAINAXIOM, value);
	}
	
    /**
     * Removes a value of property PropertyChainAxiom as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removePropertyChainAxiom( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), PROPERTYCHAINAXIOM, value);
	}
    /**
     * Removes a value of property PropertyChainAxiom given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removePropertyChainAxiom(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, PROPERTYCHAINAXIOM, value);
	}
	
    /**
     * Removes a value of property PropertyChainAxiom given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removePropertyChainAxiom(Thing value) {
		Base.remove(this.model, this.getResource(), PROPERTYCHAINAXIOM, value);
	}
  
    /**
     * Removes all values of property PropertyChainAxiom     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllPropertyChainAxiom( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, PROPERTYCHAINAXIOM);
	}
	
    /**
     * Removes all values of property PropertyChainAxiom	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllPropertyChainAxiom() {
		Base.removeAll(this.model, this.getResource(), PROPERTYCHAINAXIOM);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@9a7571 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasQualifiedForm(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, QUALIFIEDFORM);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@9a7571 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasQualifiedForm() {
		return Base.has(this.model, this.getResource(), QUALIFIEDFORM);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@9a7571 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasQualifiedForm(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, QUALIFIEDFORM, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@9a7571 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasQualifiedForm( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), QUALIFIEDFORM, value);
	}

     /**
     * Get all values of property QualifiedForm as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllQualifiedForm_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, QUALIFIEDFORM);
	}
	
    /**
     * Get all values of property QualifiedForm as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllQualifiedForm_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, QUALIFIEDFORM, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property QualifiedForm as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllQualifiedForm_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), QUALIFIEDFORM);
	}

    /**
     * Get all values of property QualifiedForm as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllQualifiedForm_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), QUALIFIEDFORM, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property QualifiedForm     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllQualifiedForm(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, QUALIFIEDFORM, Thing.class);
	}
	
    /**
     * Get all values of property QualifiedForm as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllQualifiedForm_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, QUALIFIEDFORM, Thing.class);
	}

    /**
     * Get all values of property QualifiedForm     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllQualifiedForm() {
		return Base.getAll(this.model, this.getResource(), QUALIFIEDFORM, Thing.class);
	}

    /**
     * Get all values of property QualifiedForm as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllQualifiedForm_as() {
		return Base.getAll_as(this.model, this.getResource(), QUALIFIEDFORM, Thing.class);
	}
 
    /**
     * Adds a value to property QualifiedForm as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addQualifiedForm( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, QUALIFIEDFORM, value);
	}
	
    /**
     * Adds a value to property QualifiedForm as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addQualifiedForm( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), QUALIFIEDFORM, value);
	}
    /**
     * Adds a value to property QualifiedForm from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addQualifiedForm(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, QUALIFIEDFORM, value);
	}
	
    /**
     * Adds a value to property QualifiedForm from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addQualifiedForm(Thing value) {
		Base.add(this.model, this.getResource(), QUALIFIEDFORM, value);
	}
  

    /**
     * Sets a value of property QualifiedForm from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setQualifiedForm( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, QUALIFIEDFORM, value);
	}
	
    /**
     * Sets a value of property QualifiedForm from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setQualifiedForm( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), QUALIFIEDFORM, value);
	}
    /**
     * Sets a value of property QualifiedForm from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setQualifiedForm(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, QUALIFIEDFORM, value);
	}
	
    /**
     * Sets a value of property QualifiedForm from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setQualifiedForm(Thing value) {
		Base.set(this.model, this.getResource(), QUALIFIEDFORM, value);
	}
  


    /**
     * Removes a value of property QualifiedForm as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeQualifiedForm( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, QUALIFIEDFORM, value);
	}
	
    /**
     * Removes a value of property QualifiedForm as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeQualifiedForm( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), QUALIFIEDFORM, value);
	}
    /**
     * Removes a value of property QualifiedForm given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeQualifiedForm(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, QUALIFIEDFORM, value);
	}
	
    /**
     * Removes a value of property QualifiedForm given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeQualifiedForm(Thing value) {
		Base.remove(this.model, this.getResource(), QUALIFIEDFORM, value);
	}
  
    /**
     * Removes all values of property QualifiedForm     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllQualifiedForm( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, QUALIFIEDFORM);
	}
	
    /**
     * Removes all values of property QualifiedForm	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllQualifiedForm() {
		Base.removeAll(this.model, this.getResource(), QUALIFIEDFORM);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@a3f072 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSharesDefinitionWith(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, SHARESDEFINITIONWITH);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@a3f072 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSharesDefinitionWith() {
		return Base.has(this.model, this.getResource(), SHARESDEFINITIONWITH);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@a3f072 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSharesDefinitionWith(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, SHARESDEFINITIONWITH, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@a3f072 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSharesDefinitionWith( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), SHARESDEFINITIONWITH, value);
	}

     /**
     * Get all values of property SharesDefinitionWith as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSharesDefinitionWith_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SHARESDEFINITIONWITH);
	}
	
    /**
     * Get all values of property SharesDefinitionWith as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSharesDefinitionWith_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SHARESDEFINITIONWITH, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property SharesDefinitionWith as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSharesDefinitionWith_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SHARESDEFINITIONWITH);
	}

    /**
     * Get all values of property SharesDefinitionWith as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSharesDefinitionWith_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SHARESDEFINITIONWITH, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property SharesDefinitionWith     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllSharesDefinitionWith(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, SHARESDEFINITIONWITH, Thing.class);
	}
	
    /**
     * Get all values of property SharesDefinitionWith as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllSharesDefinitionWith_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SHARESDEFINITIONWITH, Thing.class);
	}

    /**
     * Get all values of property SharesDefinitionWith     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllSharesDefinitionWith() {
		return Base.getAll(this.model, this.getResource(), SHARESDEFINITIONWITH, Thing.class);
	}

    /**
     * Get all values of property SharesDefinitionWith as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllSharesDefinitionWith_as() {
		return Base.getAll_as(this.model, this.getResource(), SHARESDEFINITIONWITH, Thing.class);
	}
 
    /**
     * Adds a value to property SharesDefinitionWith as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSharesDefinitionWith( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, SHARESDEFINITIONWITH, value);
	}
	
    /**
     * Adds a value to property SharesDefinitionWith as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSharesDefinitionWith( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), SHARESDEFINITIONWITH, value);
	}
    /**
     * Adds a value to property SharesDefinitionWith from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSharesDefinitionWith(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, SHARESDEFINITIONWITH, value);
	}
	
    /**
     * Adds a value to property SharesDefinitionWith from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSharesDefinitionWith(Thing value) {
		Base.add(this.model, this.getResource(), SHARESDEFINITIONWITH, value);
	}
  

    /**
     * Sets a value of property SharesDefinitionWith from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSharesDefinitionWith( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, SHARESDEFINITIONWITH, value);
	}
	
    /**
     * Sets a value of property SharesDefinitionWith from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSharesDefinitionWith( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), SHARESDEFINITIONWITH, value);
	}
    /**
     * Sets a value of property SharesDefinitionWith from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSharesDefinitionWith(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, SHARESDEFINITIONWITH, value);
	}
	
    /**
     * Sets a value of property SharesDefinitionWith from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSharesDefinitionWith(Thing value) {
		Base.set(this.model, this.getResource(), SHARESDEFINITIONWITH, value);
	}
  


    /**
     * Removes a value of property SharesDefinitionWith as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSharesDefinitionWith( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, SHARESDEFINITIONWITH, value);
	}
	
    /**
     * Removes a value of property SharesDefinitionWith as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSharesDefinitionWith( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), SHARESDEFINITIONWITH, value);
	}
    /**
     * Removes a value of property SharesDefinitionWith given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSharesDefinitionWith(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, SHARESDEFINITIONWITH, value);
	}
	
    /**
     * Removes a value of property SharesDefinitionWith given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSharesDefinitionWith(Thing value) {
		Base.remove(this.model, this.getResource(), SHARESDEFINITIONWITH, value);
	}
  
    /**
     * Removes all values of property SharesDefinitionWith     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSharesDefinitionWith( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, SHARESDEFINITIONWITH);
	}
	
    /**
     * Removes all values of property SharesDefinitionWith	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSharesDefinitionWith() {
		Base.removeAll(this.model, this.getResource(), SHARESDEFINITIONWITH);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5ea9e1 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasTopObjectProperty(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, TOPOBJECTPROPERTY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5ea9e1 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasTopObjectProperty() {
		return Base.has(this.model, this.getResource(), TOPOBJECTPROPERTY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5ea9e1 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasTopObjectProperty(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, TOPOBJECTPROPERTY, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5ea9e1 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasTopObjectProperty( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), TOPOBJECTPROPERTY, value);
	}

     /**
     * Get all values of property TopObjectProperty as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllTopObjectProperty_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, TOPOBJECTPROPERTY);
	}
	
    /**
     * Get all values of property TopObjectProperty as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllTopObjectProperty_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TOPOBJECTPROPERTY, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property TopObjectProperty as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllTopObjectProperty_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), TOPOBJECTPROPERTY);
	}

    /**
     * Get all values of property TopObjectProperty as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllTopObjectProperty_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), TOPOBJECTPROPERTY, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property TopObjectProperty     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllTopObjectProperty(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, TOPOBJECTPROPERTY, Thing.class);
	}
	
    /**
     * Get all values of property TopObjectProperty as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllTopObjectProperty_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TOPOBJECTPROPERTY, Thing.class);
	}

    /**
     * Get all values of property TopObjectProperty     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllTopObjectProperty() {
		return Base.getAll(this.model, this.getResource(), TOPOBJECTPROPERTY, Thing.class);
	}

    /**
     * Get all values of property TopObjectProperty as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllTopObjectProperty_as() {
		return Base.getAll_as(this.model, this.getResource(), TOPOBJECTPROPERTY, Thing.class);
	}
 
    /**
     * Adds a value to property TopObjectProperty as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addTopObjectProperty( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, TOPOBJECTPROPERTY, value);
	}
	
    /**
     * Adds a value to property TopObjectProperty as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addTopObjectProperty( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), TOPOBJECTPROPERTY, value);
	}
    /**
     * Adds a value to property TopObjectProperty from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addTopObjectProperty(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, TOPOBJECTPROPERTY, value);
	}
	
    /**
     * Adds a value to property TopObjectProperty from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addTopObjectProperty(Thing value) {
		Base.add(this.model, this.getResource(), TOPOBJECTPROPERTY, value);
	}
  

    /**
     * Sets a value of property TopObjectProperty from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setTopObjectProperty( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, TOPOBJECTPROPERTY, value);
	}
	
    /**
     * Sets a value of property TopObjectProperty from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setTopObjectProperty( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), TOPOBJECTPROPERTY, value);
	}
    /**
     * Sets a value of property TopObjectProperty from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setTopObjectProperty(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, TOPOBJECTPROPERTY, value);
	}
	
    /**
     * Sets a value of property TopObjectProperty from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setTopObjectProperty(Thing value) {
		Base.set(this.model, this.getResource(), TOPOBJECTPROPERTY, value);
	}
  


    /**
     * Removes a value of property TopObjectProperty as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeTopObjectProperty( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, TOPOBJECTPROPERTY, value);
	}
	
    /**
     * Removes a value of property TopObjectProperty as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeTopObjectProperty( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), TOPOBJECTPROPERTY, value);
	}
    /**
     * Removes a value of property TopObjectProperty given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeTopObjectProperty(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, TOPOBJECTPROPERTY, value);
	}
	
    /**
     * Removes a value of property TopObjectProperty given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeTopObjectProperty(Thing value) {
		Base.remove(this.model, this.getResource(), TOPOBJECTPROPERTY, value);
	}
  
    /**
     * Removes all values of property TopObjectProperty     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllTopObjectProperty( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, TOPOBJECTPROPERTY);
	}
	
    /**
     * Removes all values of property TopObjectProperty	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllTopObjectProperty() {
		Base.removeAll(this.model, this.getResource(), TOPOBJECTPROPERTY);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1d9e3d9 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasUnionOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, UNIONOF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1d9e3d9 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasUnionOf() {
		return Base.has(this.model, this.getResource(), UNIONOF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1d9e3d9 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasUnionOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, UNIONOF, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1d9e3d9 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasUnionOf( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), UNIONOF, value);
	}

     /**
     * Get all values of property UnionOf as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllUnionOf_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, UNIONOF);
	}
	
    /**
     * Get all values of property UnionOf as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllUnionOf_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, UNIONOF, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property UnionOf as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllUnionOf_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), UNIONOF);
	}

    /**
     * Get all values of property UnionOf as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllUnionOf_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), UNIONOF, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property UnionOf     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllUnionOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, UNIONOF, Thing.class);
	}
	
    /**
     * Get all values of property UnionOf as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllUnionOf_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, UNIONOF, Thing.class);
	}

    /**
     * Get all values of property UnionOf     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllUnionOf() {
		return Base.getAll(this.model, this.getResource(), UNIONOF, Thing.class);
	}

    /**
     * Get all values of property UnionOf as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllUnionOf_as() {
		return Base.getAll_as(this.model, this.getResource(), UNIONOF, Thing.class);
	}
 
    /**
     * Adds a value to property UnionOf as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addUnionOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, UNIONOF, value);
	}
	
    /**
     * Adds a value to property UnionOf as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addUnionOf( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), UNIONOF, value);
	}
    /**
     * Adds a value to property UnionOf from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addUnionOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, UNIONOF, value);
	}
	
    /**
     * Adds a value to property UnionOf from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addUnionOf(Thing value) {
		Base.add(this.model, this.getResource(), UNIONOF, value);
	}
  

    /**
     * Sets a value of property UnionOf from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setUnionOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, UNIONOF, value);
	}
	
    /**
     * Sets a value of property UnionOf from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setUnionOf( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), UNIONOF, value);
	}
    /**
     * Sets a value of property UnionOf from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setUnionOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, UNIONOF, value);
	}
	
    /**
     * Sets a value of property UnionOf from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setUnionOf(Thing value) {
		Base.set(this.model, this.getResource(), UNIONOF, value);
	}
  


    /**
     * Removes a value of property UnionOf as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeUnionOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, UNIONOF, value);
	}
	
    /**
     * Removes a value of property UnionOf as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeUnionOf( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), UNIONOF, value);
	}
    /**
     * Removes a value of property UnionOf given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeUnionOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, UNIONOF, value);
	}
	
    /**
     * Removes a value of property UnionOf given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeUnionOf(Thing value) {
		Base.remove(this.model, this.getResource(), UNIONOF, value);
	}
  
    /**
     * Removes all values of property UnionOf     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllUnionOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, UNIONOF);
	}
	
    /**
     * Removes all values of property UnionOf	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllUnionOf() {
		Base.removeAll(this.model, this.getResource(), UNIONOF);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@674ca has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasUnqualifiedForm(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, UNQUALIFIEDFORM);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@674ca has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasUnqualifiedForm() {
		return Base.has(this.model, this.getResource(), UNQUALIFIEDFORM);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@674ca has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasUnqualifiedForm(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, UNQUALIFIEDFORM, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@674ca has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasUnqualifiedForm( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), UNQUALIFIEDFORM, value);
	}

     /**
     * Get all values of property UnqualifiedForm as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllUnqualifiedForm_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, UNQUALIFIEDFORM);
	}
	
    /**
     * Get all values of property UnqualifiedForm as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllUnqualifiedForm_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, UNQUALIFIEDFORM, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property UnqualifiedForm as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllUnqualifiedForm_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), UNQUALIFIEDFORM);
	}

    /**
     * Get all values of property UnqualifiedForm as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllUnqualifiedForm_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), UNQUALIFIEDFORM, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property UnqualifiedForm     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllUnqualifiedForm(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, UNQUALIFIEDFORM, Thing.class);
	}
	
    /**
     * Get all values of property UnqualifiedForm as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllUnqualifiedForm_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, UNQUALIFIEDFORM, Thing.class);
	}

    /**
     * Get all values of property UnqualifiedForm     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllUnqualifiedForm() {
		return Base.getAll(this.model, this.getResource(), UNQUALIFIEDFORM, Thing.class);
	}

    /**
     * Get all values of property UnqualifiedForm as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllUnqualifiedForm_as() {
		return Base.getAll_as(this.model, this.getResource(), UNQUALIFIEDFORM, Thing.class);
	}
 
    /**
     * Adds a value to property UnqualifiedForm as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addUnqualifiedForm( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, UNQUALIFIEDFORM, value);
	}
	
    /**
     * Adds a value to property UnqualifiedForm as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addUnqualifiedForm( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), UNQUALIFIEDFORM, value);
	}
    /**
     * Adds a value to property UnqualifiedForm from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addUnqualifiedForm(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, UNQUALIFIEDFORM, value);
	}
	
    /**
     * Adds a value to property UnqualifiedForm from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addUnqualifiedForm(Thing value) {
		Base.add(this.model, this.getResource(), UNQUALIFIEDFORM, value);
	}
  

    /**
     * Sets a value of property UnqualifiedForm from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setUnqualifiedForm( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, UNQUALIFIEDFORM, value);
	}
	
    /**
     * Sets a value of property UnqualifiedForm from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setUnqualifiedForm( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), UNQUALIFIEDFORM, value);
	}
    /**
     * Sets a value of property UnqualifiedForm from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setUnqualifiedForm(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, UNQUALIFIEDFORM, value);
	}
	
    /**
     * Sets a value of property UnqualifiedForm from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setUnqualifiedForm(Thing value) {
		Base.set(this.model, this.getResource(), UNQUALIFIEDFORM, value);
	}
  


    /**
     * Removes a value of property UnqualifiedForm as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeUnqualifiedForm( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, UNQUALIFIEDFORM, value);
	}
	
    /**
     * Removes a value of property UnqualifiedForm as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeUnqualifiedForm( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), UNQUALIFIEDFORM, value);
	}
    /**
     * Removes a value of property UnqualifiedForm given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeUnqualifiedForm(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, UNQUALIFIEDFORM, value);
	}
	
    /**
     * Removes a value of property UnqualifiedForm given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeUnqualifiedForm(Thing value) {
		Base.remove(this.model, this.getResource(), UNQUALIFIEDFORM, value);
	}
  
    /**
     * Removes all values of property UnqualifiedForm     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllUnqualifiedForm( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, UNQUALIFIEDFORM);
	}
	
    /**
     * Removes all values of property UnqualifiedForm	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllUnqualifiedForm() {
		Base.removeAll(this.model, this.getResource(), UNQUALIFIEDFORM);
	}
 }