/**
 * generated by http://RDFReactor.semweb4j.org ($Id: CodeGenerator.java 1765 2010-02-11 09:51:13Z max.at.xam.de $) on 2/21/12 8:19 AM
 */
package gov.nasa.jpl.cdp.provenance.opmo_es;

import org.ontoware.aifbcommons.collection.ClosableIterator;
import org.ontoware.rdf2go.exception.ModelRuntimeException;
import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.BlankNode;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdfreactor.runtime.Base;
import org.ontoware.rdfreactor.runtime.ReactorResult;

/**
 * This class manages access to these properties:
 * <ul>
 *   <li> EffectUsedInverse </li>
 *   <li> EffectWasControlledByInverse </li>
 *   <li> EffectWasTriggeredByInverse </li>
 *   <li> Used_ </li>
 * </ul>
 *
 * This class was generated by <a href="http://RDFReactor.semweb4j.org">RDFReactor</a> on 2/21/12 8:19 AM
 */
public class Process extends Node {

    /** http://purl.org/net/opmv/ns#Process */
	@SuppressWarnings("hiding")
	public static final URI RDFS_CLASS = new URIImpl("http://purl.org/net/opmv/ns#Process", false);

    /** http://openprovenance.org/model/opmo#effectUsedInverse */
	public static final URI EFFECTUSEDINVERSE = new URIImpl("http://openprovenance.org/model/opmo#effectUsedInverse",false);

    /** http://openprovenance.org/model/opmo#effectWasControlledByInverse */
	public static final URI EFFECTWASCONTROLLEDBYINVERSE = new URIImpl("http://openprovenance.org/model/opmo#effectWasControlledByInverse",false);

    /** http://openprovenance.org/model/opmo#effectWasTriggeredByInverse */
	public static final URI EFFECTWASTRIGGEREDBYINVERSE = new URIImpl("http://openprovenance.org/model/opmo#effectWasTriggeredByInverse",false);

    /** http://openprovenance.org/model/opmo#usedStar */
	public static final URI USED_ = new URIImpl("http://openprovenance.org/model/opmo#usedStar",false);

    /** 
     * All property-URIs with this class as domain.
     * All properties of all super-classes are also available. 
     */
	@SuppressWarnings("hiding")
    public static final URI[] MANAGED_URIS = {
      new URIImpl("http://openprovenance.org/model/opmo#effectUsedInverse",false),
      new URIImpl("http://openprovenance.org/model/opmo#effectWasControlledByInverse",false),
      new URIImpl("http://openprovenance.org/model/opmo#effectWasTriggeredByInverse",false),
      new URIImpl("http://openprovenance.org/model/opmo#usedStar",false) 
    };


	// protected constructors needed for inheritance
	
	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.semweb4j.org
	 * @param classURI URI of RDFS class
	 * @param instanceIdentifier Resource that identifies this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c1] 
	 */
	protected Process ( Model model, URI classURI, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, classURI, instanceIdentifier, write);
	}

	// public constructors

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param instanceIdentifier an RDF2Go Resource identifying this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c2] 
	 */
	public Process ( Model model, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, RDFS_CLASS, instanceIdentifier, write);
	}


	/**
	 * Returns a Java wrapper over an RDF object, identified by a URI, given as a String.
	 * Creating two wrappers for the same URI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uriString a URI given as a String
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 * @throws ModelRuntimeException if URI syntax is wrong
	 *
	 * [Generated from RDFReactor template rule #c7] 
	 */
	public Process ( Model model, String uriString, boolean write) throws ModelRuntimeException {
		super(model, RDFS_CLASS, new URIImpl(uriString,false), write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by a blank node.
	 * Creating two wrappers for the same blank node is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param bnode BlankNode of this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c8] 
	 */
	public Process ( Model model, BlankNode bnode, boolean write ) {
		super(model, RDFS_CLASS, bnode, write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by 
	 * a randomly generated URI.
	 * Creating two wrappers results in different URIs.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c9] 
	 */
	public Process ( Model model, boolean write ) {
		super(model, RDFS_CLASS, model.newRandomUniqueURI(), write);
	}

    ///////////////////////////////////////////////////////////////////
    // typing

	/**
	 * Return an existing instance of this class in the model. No statements are written.
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return an instance of Process  or null if none existst
	 *
	 * [Generated from RDFReactor template rule #class0] 
	 */
	public static Process  getInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getInstance(model, instanceResource, Process.class);
	}

	/**
	 * Create a new instance of this class in the model. 
	 * That is, create the statement (instanceResource, RDF.type, http://purl.org/net/opmv/ns#Process).
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class1] 
	 */
	public static void createInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.createInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return true if instanceResource is an instance of this class in the model
	 *
	 * [Generated from RDFReactor template rule #class2] 
	 */
	public static boolean hasInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.hasInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as RDF resources
	 *
	 * [Generated from RDFReactor template rule #class3] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInstances(Model model) {
		return Base.getAllInstances(model, RDFS_CLASS, org.ontoware.rdf2go.model.node.Resource.class);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as a ReactorResult,
	 * which can conveniently be converted to iterator, list or array.
	 *
	 * [Generated from RDFReactor template rule #class3-as] 
	 */
	public static ReactorResult<? extends Process> getAllInstances_as(Model model) {
		return Base.getAllInstances_as(model, RDFS_CLASS, Process.class );
	}

    /**
	 * Remove rdf:type Process from this instance. Other triples are not affected.
	 * To delete more, use deleteAllProperties
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class4] 
	 */
	public static void deleteInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * Delete all (this, *, *), i.e. including rdf:type
	 * @param model an RDF2Go model
	 * @param resource
	 */
	public static void deleteAllProperties(Model model,	org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteAllProperties(model, instanceResource);
	}

    ///////////////////////////////////////////////////////////////////
    // property access methods

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'HasProcess' to this Process instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllHasProcess_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, OPMGraph.HASPROCESS, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'HasProcess' to this Process instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllHasProcess_Inverse() {
		return Base.getAll_Inverse(this.model, OPMGraph.HASPROCESS, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'HasProcess' to this Process instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllHasProcess_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, OPMGraph.HASPROCESS, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'EffectWasControlledBy' to this Process instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllEffectWasControlledBy_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, WasControlledBy.EFFECTWASCONTROLLEDBY, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'EffectWasControlledBy' to this Process instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllEffectWasControlledBy_Inverse() {
		return Base.getAll_Inverse(this.model, WasControlledBy.EFFECTWASCONTROLLEDBY, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'EffectWasControlledBy' to this Process instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllEffectWasControlledBy_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, WasControlledBy.EFFECTWASCONTROLLEDBY, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'CauseWasGeneratedBy' to this Process instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllCauseWasGeneratedBy_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, WasGeneratedBy.CAUSEWASGENERATEDBY, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'CauseWasGeneratedBy' to this Process instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllCauseWasGeneratedBy_Inverse() {
		return Base.getAll_Inverse(this.model, WasGeneratedBy.CAUSEWASGENERATEDBY, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'CauseWasGeneratedBy' to this Process instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllCauseWasGeneratedBy_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, WasGeneratedBy.CAUSEWASGENERATEDBY, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'EffectUsed' to this Process instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllEffectUsed_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Used.EFFECTUSED, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'EffectUsed' to this Process instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllEffectUsed_Inverse() {
		return Base.getAll_Inverse(this.model, Used.EFFECTUSED, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'EffectUsed' to this Process instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllEffectUsed_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Used.EFFECTUSED, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'WasGeneratedBy_' to this Process instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllWasGeneratedBy__Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Artifact.WASGENERATEDBY_, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'WasGeneratedBy_' to this Process instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllWasGeneratedBy__Inverse() {
		return Base.getAll_Inverse(this.model, Artifact.WASGENERATEDBY_, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'WasGeneratedBy_' to this Process instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllWasGeneratedBy__Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Artifact.WASGENERATEDBY_, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'CauseWasTriggeredBy' to this Process instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllCauseWasTriggeredBy_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, WasTriggeredBy.CAUSEWASTRIGGEREDBY, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'CauseWasTriggeredBy' to this Process instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllCauseWasTriggeredBy_Inverse() {
		return Base.getAll_Inverse(this.model, WasTriggeredBy.CAUSEWASTRIGGEREDBY, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'CauseWasTriggeredBy' to this Process instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllCauseWasTriggeredBy_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, WasTriggeredBy.CAUSEWASTRIGGEREDBY, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'EffectWasTriggeredBy' to this Process instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllEffectWasTriggeredBy_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, WasTriggeredBy.EFFECTWASTRIGGEREDBY, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'EffectWasTriggeredBy' to this Process instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllEffectWasTriggeredBy_Inverse() {
		return Base.getAll_Inverse(this.model, WasTriggeredBy.EFFECTWASTRIGGEREDBY, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'EffectWasTriggeredBy' to this Process instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllEffectWasTriggeredBy_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, WasTriggeredBy.EFFECTWASTRIGGEREDBY, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}



    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@46883e has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasEffectUsedInverse(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EFFECTUSEDINVERSE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@46883e has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasEffectUsedInverse() {
		return Base.has(this.model, this.getResource(), EFFECTUSEDINVERSE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@46883e has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasEffectUsedInverse(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EFFECTUSEDINVERSE, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@46883e has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasEffectUsedInverse( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EFFECTUSEDINVERSE, value);
	}

     /**
     * Get all values of property EffectUsedInverse as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllEffectUsedInverse_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EFFECTUSEDINVERSE);
	}
	
    /**
     * Get all values of property EffectUsedInverse as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllEffectUsedInverse_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EFFECTUSEDINVERSE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property EffectUsedInverse as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllEffectUsedInverse_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EFFECTUSEDINVERSE);
	}

    /**
     * Get all values of property EffectUsedInverse as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllEffectUsedInverse_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EFFECTUSEDINVERSE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property EffectUsedInverse     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Used> getAllEffectUsedInverse(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EFFECTUSEDINVERSE, Used.class);
	}
	
    /**
     * Get all values of property EffectUsedInverse as a ReactorResult of Used 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Used> getAllEffectUsedInverse_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EFFECTUSEDINVERSE, Used.class);
	}

    /**
     * Get all values of property EffectUsedInverse     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Used> getAllEffectUsedInverse() {
		return Base.getAll(this.model, this.getResource(), EFFECTUSEDINVERSE, Used.class);
	}

    /**
     * Get all values of property EffectUsedInverse as a ReactorResult of Used 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Used> getAllEffectUsedInverse_as() {
		return Base.getAll_as(this.model, this.getResource(), EFFECTUSEDINVERSE, Used.class);
	}
 
    /**
     * Adds a value to property EffectUsedInverse as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addEffectUsedInverse( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EFFECTUSEDINVERSE, value);
	}
	
    /**
     * Adds a value to property EffectUsedInverse as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addEffectUsedInverse( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EFFECTUSEDINVERSE, value);
	}
    /**
     * Adds a value to property EffectUsedInverse from an instance of Used 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addEffectUsedInverse(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Used value) {
		Base.add(model, instanceResource, EFFECTUSEDINVERSE, value);
	}
	
    /**
     * Adds a value to property EffectUsedInverse from an instance of Used 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addEffectUsedInverse(Used value) {
		Base.add(this.model, this.getResource(), EFFECTUSEDINVERSE, value);
	}
  

    /**
     * Sets a value of property EffectUsedInverse from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setEffectUsedInverse( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EFFECTUSEDINVERSE, value);
	}
	
    /**
     * Sets a value of property EffectUsedInverse from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setEffectUsedInverse( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EFFECTUSEDINVERSE, value);
	}
    /**
     * Sets a value of property EffectUsedInverse from an instance of Used 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setEffectUsedInverse(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Used value) {
		Base.set(model, instanceResource, EFFECTUSEDINVERSE, value);
	}
	
    /**
     * Sets a value of property EffectUsedInverse from an instance of Used 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setEffectUsedInverse(Used value) {
		Base.set(this.model, this.getResource(), EFFECTUSEDINVERSE, value);
	}
  


    /**
     * Removes a value of property EffectUsedInverse as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeEffectUsedInverse( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EFFECTUSEDINVERSE, value);
	}
	
    /**
     * Removes a value of property EffectUsedInverse as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeEffectUsedInverse( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EFFECTUSEDINVERSE, value);
	}
    /**
     * Removes a value of property EffectUsedInverse given as an instance of Used 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeEffectUsedInverse(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Used value) {
		Base.remove(model, instanceResource, EFFECTUSEDINVERSE, value);
	}
	
    /**
     * Removes a value of property EffectUsedInverse given as an instance of Used 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeEffectUsedInverse(Used value) {
		Base.remove(this.model, this.getResource(), EFFECTUSEDINVERSE, value);
	}
  
    /**
     * Removes all values of property EffectUsedInverse     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllEffectUsedInverse( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EFFECTUSEDINVERSE);
	}
	
    /**
     * Removes all values of property EffectUsedInverse	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllEffectUsedInverse() {
		Base.removeAll(this.model, this.getResource(), EFFECTUSEDINVERSE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1e930b8 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasEffectWasControlledByInverse(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EFFECTWASCONTROLLEDBYINVERSE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1e930b8 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasEffectWasControlledByInverse() {
		return Base.has(this.model, this.getResource(), EFFECTWASCONTROLLEDBYINVERSE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1e930b8 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasEffectWasControlledByInverse(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EFFECTWASCONTROLLEDBYINVERSE, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1e930b8 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasEffectWasControlledByInverse( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EFFECTWASCONTROLLEDBYINVERSE, value);
	}

     /**
     * Get all values of property EffectWasControlledByInverse as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllEffectWasControlledByInverse_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EFFECTWASCONTROLLEDBYINVERSE);
	}
	
    /**
     * Get all values of property EffectWasControlledByInverse as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllEffectWasControlledByInverse_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EFFECTWASCONTROLLEDBYINVERSE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property EffectWasControlledByInverse as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllEffectWasControlledByInverse_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EFFECTWASCONTROLLEDBYINVERSE);
	}

    /**
     * Get all values of property EffectWasControlledByInverse as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllEffectWasControlledByInverse_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EFFECTWASCONTROLLEDBYINVERSE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property EffectWasControlledByInverse     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<WasControlledBy> getAllEffectWasControlledByInverse(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EFFECTWASCONTROLLEDBYINVERSE, WasControlledBy.class);
	}
	
    /**
     * Get all values of property EffectWasControlledByInverse as a ReactorResult of WasControlledBy 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<WasControlledBy> getAllEffectWasControlledByInverse_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EFFECTWASCONTROLLEDBYINVERSE, WasControlledBy.class);
	}

    /**
     * Get all values of property EffectWasControlledByInverse     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<WasControlledBy> getAllEffectWasControlledByInverse() {
		return Base.getAll(this.model, this.getResource(), EFFECTWASCONTROLLEDBYINVERSE, WasControlledBy.class);
	}

    /**
     * Get all values of property EffectWasControlledByInverse as a ReactorResult of WasControlledBy 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<WasControlledBy> getAllEffectWasControlledByInverse_as() {
		return Base.getAll_as(this.model, this.getResource(), EFFECTWASCONTROLLEDBYINVERSE, WasControlledBy.class);
	}
 
    /**
     * Adds a value to property EffectWasControlledByInverse as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addEffectWasControlledByInverse( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EFFECTWASCONTROLLEDBYINVERSE, value);
	}
	
    /**
     * Adds a value to property EffectWasControlledByInverse as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addEffectWasControlledByInverse( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EFFECTWASCONTROLLEDBYINVERSE, value);
	}
    /**
     * Adds a value to property EffectWasControlledByInverse from an instance of WasControlledBy 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addEffectWasControlledByInverse(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, WasControlledBy value) {
		Base.add(model, instanceResource, EFFECTWASCONTROLLEDBYINVERSE, value);
	}
	
    /**
     * Adds a value to property EffectWasControlledByInverse from an instance of WasControlledBy 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addEffectWasControlledByInverse(WasControlledBy value) {
		Base.add(this.model, this.getResource(), EFFECTWASCONTROLLEDBYINVERSE, value);
	}
  

    /**
     * Sets a value of property EffectWasControlledByInverse from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setEffectWasControlledByInverse( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EFFECTWASCONTROLLEDBYINVERSE, value);
	}
	
    /**
     * Sets a value of property EffectWasControlledByInverse from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setEffectWasControlledByInverse( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EFFECTWASCONTROLLEDBYINVERSE, value);
	}
    /**
     * Sets a value of property EffectWasControlledByInverse from an instance of WasControlledBy 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setEffectWasControlledByInverse(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, WasControlledBy value) {
		Base.set(model, instanceResource, EFFECTWASCONTROLLEDBYINVERSE, value);
	}
	
    /**
     * Sets a value of property EffectWasControlledByInverse from an instance of WasControlledBy 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setEffectWasControlledByInverse(WasControlledBy value) {
		Base.set(this.model, this.getResource(), EFFECTWASCONTROLLEDBYINVERSE, value);
	}
  


    /**
     * Removes a value of property EffectWasControlledByInverse as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeEffectWasControlledByInverse( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EFFECTWASCONTROLLEDBYINVERSE, value);
	}
	
    /**
     * Removes a value of property EffectWasControlledByInverse as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeEffectWasControlledByInverse( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EFFECTWASCONTROLLEDBYINVERSE, value);
	}
    /**
     * Removes a value of property EffectWasControlledByInverse given as an instance of WasControlledBy 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeEffectWasControlledByInverse(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, WasControlledBy value) {
		Base.remove(model, instanceResource, EFFECTWASCONTROLLEDBYINVERSE, value);
	}
	
    /**
     * Removes a value of property EffectWasControlledByInverse given as an instance of WasControlledBy 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeEffectWasControlledByInverse(WasControlledBy value) {
		Base.remove(this.model, this.getResource(), EFFECTWASCONTROLLEDBYINVERSE, value);
	}
  
    /**
     * Removes all values of property EffectWasControlledByInverse     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllEffectWasControlledByInverse( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EFFECTWASCONTROLLEDBYINVERSE);
	}
	
    /**
     * Removes all values of property EffectWasControlledByInverse	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllEffectWasControlledByInverse() {
		Base.removeAll(this.model, this.getResource(), EFFECTWASCONTROLLEDBYINVERSE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6cf504 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasEffectWasTriggeredByInverse(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EFFECTWASTRIGGEREDBYINVERSE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6cf504 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasEffectWasTriggeredByInverse() {
		return Base.has(this.model, this.getResource(), EFFECTWASTRIGGEREDBYINVERSE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6cf504 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasEffectWasTriggeredByInverse(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EFFECTWASTRIGGEREDBYINVERSE, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6cf504 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasEffectWasTriggeredByInverse( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EFFECTWASTRIGGEREDBYINVERSE, value);
	}

     /**
     * Get all values of property EffectWasTriggeredByInverse as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllEffectWasTriggeredByInverse_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EFFECTWASTRIGGEREDBYINVERSE);
	}
	
    /**
     * Get all values of property EffectWasTriggeredByInverse as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllEffectWasTriggeredByInverse_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EFFECTWASTRIGGEREDBYINVERSE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property EffectWasTriggeredByInverse as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllEffectWasTriggeredByInverse_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EFFECTWASTRIGGEREDBYINVERSE);
	}

    /**
     * Get all values of property EffectWasTriggeredByInverse as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllEffectWasTriggeredByInverse_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EFFECTWASTRIGGEREDBYINVERSE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property EffectWasTriggeredByInverse     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<WasTriggeredBy> getAllEffectWasTriggeredByInverse(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EFFECTWASTRIGGEREDBYINVERSE, WasTriggeredBy.class);
	}
	
    /**
     * Get all values of property EffectWasTriggeredByInverse as a ReactorResult of WasTriggeredBy 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<WasTriggeredBy> getAllEffectWasTriggeredByInverse_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EFFECTWASTRIGGEREDBYINVERSE, WasTriggeredBy.class);
	}

    /**
     * Get all values of property EffectWasTriggeredByInverse     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<WasTriggeredBy> getAllEffectWasTriggeredByInverse() {
		return Base.getAll(this.model, this.getResource(), EFFECTWASTRIGGEREDBYINVERSE, WasTriggeredBy.class);
	}

    /**
     * Get all values of property EffectWasTriggeredByInverse as a ReactorResult of WasTriggeredBy 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<WasTriggeredBy> getAllEffectWasTriggeredByInverse_as() {
		return Base.getAll_as(this.model, this.getResource(), EFFECTWASTRIGGEREDBYINVERSE, WasTriggeredBy.class);
	}
 
    /**
     * Adds a value to property EffectWasTriggeredByInverse as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addEffectWasTriggeredByInverse( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EFFECTWASTRIGGEREDBYINVERSE, value);
	}
	
    /**
     * Adds a value to property EffectWasTriggeredByInverse as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addEffectWasTriggeredByInverse( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EFFECTWASTRIGGEREDBYINVERSE, value);
	}
    /**
     * Adds a value to property EffectWasTriggeredByInverse from an instance of WasTriggeredBy 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addEffectWasTriggeredByInverse(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, WasTriggeredBy value) {
		Base.add(model, instanceResource, EFFECTWASTRIGGEREDBYINVERSE, value);
	}
	
    /**
     * Adds a value to property EffectWasTriggeredByInverse from an instance of WasTriggeredBy 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addEffectWasTriggeredByInverse(WasTriggeredBy value) {
		Base.add(this.model, this.getResource(), EFFECTWASTRIGGEREDBYINVERSE, value);
	}
  

    /**
     * Sets a value of property EffectWasTriggeredByInverse from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setEffectWasTriggeredByInverse( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EFFECTWASTRIGGEREDBYINVERSE, value);
	}
	
    /**
     * Sets a value of property EffectWasTriggeredByInverse from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setEffectWasTriggeredByInverse( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EFFECTWASTRIGGEREDBYINVERSE, value);
	}
    /**
     * Sets a value of property EffectWasTriggeredByInverse from an instance of WasTriggeredBy 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setEffectWasTriggeredByInverse(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, WasTriggeredBy value) {
		Base.set(model, instanceResource, EFFECTWASTRIGGEREDBYINVERSE, value);
	}
	
    /**
     * Sets a value of property EffectWasTriggeredByInverse from an instance of WasTriggeredBy 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setEffectWasTriggeredByInverse(WasTriggeredBy value) {
		Base.set(this.model, this.getResource(), EFFECTWASTRIGGEREDBYINVERSE, value);
	}
  


    /**
     * Removes a value of property EffectWasTriggeredByInverse as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeEffectWasTriggeredByInverse( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EFFECTWASTRIGGEREDBYINVERSE, value);
	}
	
    /**
     * Removes a value of property EffectWasTriggeredByInverse as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeEffectWasTriggeredByInverse( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EFFECTWASTRIGGEREDBYINVERSE, value);
	}
    /**
     * Removes a value of property EffectWasTriggeredByInverse given as an instance of WasTriggeredBy 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeEffectWasTriggeredByInverse(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, WasTriggeredBy value) {
		Base.remove(model, instanceResource, EFFECTWASTRIGGEREDBYINVERSE, value);
	}
	
    /**
     * Removes a value of property EffectWasTriggeredByInverse given as an instance of WasTriggeredBy 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeEffectWasTriggeredByInverse(WasTriggeredBy value) {
		Base.remove(this.model, this.getResource(), EFFECTWASTRIGGEREDBYINVERSE, value);
	}
  
    /**
     * Removes all values of property EffectWasTriggeredByInverse     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllEffectWasTriggeredByInverse( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EFFECTWASTRIGGEREDBYINVERSE);
	}
	
    /**
     * Removes all values of property EffectWasTriggeredByInverse	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllEffectWasTriggeredByInverse() {
		Base.removeAll(this.model, this.getResource(), EFFECTWASTRIGGEREDBYINVERSE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1d351fc has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasUsed_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, USED_);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1d351fc has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasUsed_() {
		return Base.has(this.model, this.getResource(), USED_);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1d351fc has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasUsed_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, USED_, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1d351fc has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasUsed_( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), USED_, value);
	}

     /**
     * Get all values of property Used_ as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllUsed__asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, USED_);
	}
	
    /**
     * Get all values of property Used_ as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllUsed__asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, USED_, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Used_ as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllUsed__asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), USED_);
	}

    /**
     * Get all values of property Used_ as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllUsed__asNode_() {
		return Base.getAll_as(this.model, this.getResource(), USED_, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Used_     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Artifact> getAllUsed_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, USED_, Artifact.class);
	}
	
    /**
     * Get all values of property Used_ as a ReactorResult of Artifact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Artifact> getAllUsed__as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, USED_, Artifact.class);
	}

    /**
     * Get all values of property Used_     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Artifact> getAllUsed_() {
		return Base.getAll(this.model, this.getResource(), USED_, Artifact.class);
	}

    /**
     * Get all values of property Used_ as a ReactorResult of Artifact 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Artifact> getAllUsed__as() {
		return Base.getAll_as(this.model, this.getResource(), USED_, Artifact.class);
	}
 
    /**
     * Adds a value to property Used_ as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addUsed_( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, USED_, value);
	}
	
    /**
     * Adds a value to property Used_ as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addUsed_( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), USED_, value);
	}
    /**
     * Adds a value to property Used_ from an instance of Artifact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addUsed_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Artifact value) {
		Base.add(model, instanceResource, USED_, value);
	}
	
    /**
     * Adds a value to property Used_ from an instance of Artifact 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addUsed_(Artifact value) {
		Base.add(this.model, this.getResource(), USED_, value);
	}
  

    /**
     * Sets a value of property Used_ from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setUsed_( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, USED_, value);
	}
	
    /**
     * Sets a value of property Used_ from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setUsed_( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), USED_, value);
	}
    /**
     * Sets a value of property Used_ from an instance of Artifact 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setUsed_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Artifact value) {
		Base.set(model, instanceResource, USED_, value);
	}
	
    /**
     * Sets a value of property Used_ from an instance of Artifact 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setUsed_(Artifact value) {
		Base.set(this.model, this.getResource(), USED_, value);
	}
  


    /**
     * Removes a value of property Used_ as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeUsed_( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, USED_, value);
	}
	
    /**
     * Removes a value of property Used_ as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeUsed_( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), USED_, value);
	}
    /**
     * Removes a value of property Used_ given as an instance of Artifact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeUsed_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Artifact value) {
		Base.remove(model, instanceResource, USED_, value);
	}
	
    /**
     * Removes a value of property Used_ given as an instance of Artifact 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeUsed_(Artifact value) {
		Base.remove(this.model, this.getResource(), USED_, value);
	}
  
    /**
     * Removes all values of property Used_     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllUsed_( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, USED_);
	}
	
    /**
     * Removes all values of property Used_	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllUsed_() {
		Base.removeAll(this.model, this.getResource(), USED_);
	}
 }