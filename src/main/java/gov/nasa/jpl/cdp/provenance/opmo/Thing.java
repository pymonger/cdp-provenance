/**
 * generated by http://RDFReactor.semweb4j.org ($Id: CodeGenerator.java 1765 2010-02-11 09:51:13Z max.at.xam.de $) on 6/29/11 10:57 AM
 */
package gov.nasa.jpl.cdp.provenance.opmo;

import org.ontoware.aifbcommons.collection.ClosableIterator;
import org.ontoware.rdf2go.exception.ModelRuntimeException;
import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.BlankNode;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdfreactor.runtime.Base;
import org.ontoware.rdfreactor.runtime.ReactorResult;

/**
 * This class manages access to these properties:
 * <ul>
 *   <li> AllValuesFrom </li>
 *   <li> Contributor </li>
 *   <li> Created </li>
 *   <li> DisjointWith </li>
 *   <li> Elements1_1Title </li>
 *   <li> EquivalentClass </li>
 *   <li> ExampleResource </li>
 *   <li> Imports </li>
 *   <li> InverseOf </li>
 *   <li> Members </li>
 *   <li> Modified </li>
 *   <li> OnProperty </li>
 *   <li> PropertyChainAxiom </li>
 *   <li> SomeValuesFrom </li>
 *   <li> Title </li>
 *   <li> UnionOf </li>
 *   <li> Used </li>
 *   <li> WasDerivedFrom </li>
 *   <li> WasGeneratedBy </li>
 * </ul>
 *
 * This class was generated by <a href="http://RDFReactor.semweb4j.org">RDFReactor</a> on 6/29/11 10:57 AM
 */
public class Thing extends org.ontoware.rdfreactor.schema.rdfs.Class {

    /** http://www.w3.org/2000/01/rdf-schema#Class */
	@SuppressWarnings("hiding")
	public static final URI RDFS_CLASS = new URIImpl("http://www.w3.org/2000/01/rdf-schema#Class", false);

    /** http://www.w3.org/2002/07/owl#allValuesFrom */
	public static final URI ALLVALUESFROM = new URIImpl("http://www.w3.org/2002/07/owl#allValuesFrom",false);

    /** http://purl.org/dc/elements/1.1/contributor */
	public static final URI CONTRIBUTOR = new URIImpl("http://purl.org/dc/elements/1.1/contributor",false);

    /** http://purl.org/dc/terms/created */
	public static final URI CREATED = new URIImpl("http://purl.org/dc/terms/created",false);

    /** http://www.w3.org/2002/07/owl#disjointWith */
	public static final URI DISJOINTWITH = new URIImpl("http://www.w3.org/2002/07/owl#disjointWith",false);

    /** http://purl.org/dc/elements/1.1/title */
	public static final URI ELEMENTS1_1TITLE = new URIImpl("http://purl.org/dc/elements/1.1/title",false);

    /** http://www.w3.org/2002/07/owl#equivalentClass */
	public static final URI EQUIVALENTCLASS = new URIImpl("http://www.w3.org/2002/07/owl#equivalentClass",false);

    /** http://rdfs.org/ns/void#exampleResource */
	public static final URI EXAMPLERESOURCE = new URIImpl("http://rdfs.org/ns/void#exampleResource",false);

    /** http://www.w3.org/2002/07/owl#imports */
	public static final URI IMPORTS = new URIImpl("http://www.w3.org/2002/07/owl#imports",false);

    /** http://www.w3.org/2002/07/owl#inverseOf */
	public static final URI INVERSEOF = new URIImpl("http://www.w3.org/2002/07/owl#inverseOf",false);

    /** http://www.w3.org/2002/07/owl#members */
	public static final URI MEMBERS = new URIImpl("http://www.w3.org/2002/07/owl#members",false);

    /** http://purl.org/dc/terms/modified */
	public static final URI MODIFIED = new URIImpl("http://purl.org/dc/terms/modified",false);

    /** http://www.w3.org/2002/07/owl#onProperty */
	public static final URI ONPROPERTY = new URIImpl("http://www.w3.org/2002/07/owl#onProperty",false);

    /** http://www.w3.org/2002/07/owl#propertyChainAxiom */
	public static final URI PROPERTYCHAINAXIOM = new URIImpl("http://www.w3.org/2002/07/owl#propertyChainAxiom",false);

    /** http://www.w3.org/2002/07/owl#someValuesFrom */
	public static final URI SOMEVALUESFROM = new URIImpl("http://www.w3.org/2002/07/owl#someValuesFrom",false);

    /** http://purl.org/dc/terms/title */
	public static final URI TITLE = new URIImpl("http://purl.org/dc/terms/title",false);

    /** http://www.w3.org/2002/07/owl#unionOf */
	public static final URI UNIONOF = new URIImpl("http://www.w3.org/2002/07/owl#unionOf",false);

    /** http://purl.org/net/opmv/ns#used */
	public static final URI USED = new URIImpl("http://purl.org/net/opmv/ns#used",false);

    /** http://purl.org/net/opmv/ns#wasDerivedFrom */
	public static final URI WASDERIVEDFROM = new URIImpl("http://purl.org/net/opmv/ns#wasDerivedFrom",false);

    /** http://purl.org/net/opmv/ns#wasGeneratedBy */
	public static final URI WASGENERATEDBY = new URIImpl("http://purl.org/net/opmv/ns#wasGeneratedBy",false);

    /** 
     * All property-URIs with this class as domain.
     * All properties of all super-classes are also available. 
     */
	@SuppressWarnings("hiding")
    public static final URI[] MANAGED_URIS = {
      new URIImpl("http://www.w3.org/2002/07/owl#allValuesFrom",false),
      new URIImpl("http://purl.org/dc/elements/1.1/contributor",false),
      new URIImpl("http://purl.org/dc/terms/created",false),
      new URIImpl("http://www.w3.org/2002/07/owl#disjointWith",false),
      new URIImpl("http://purl.org/dc/elements/1.1/title",false),
      new URIImpl("http://www.w3.org/2002/07/owl#equivalentClass",false),
      new URIImpl("http://rdfs.org/ns/void#exampleResource",false),
      new URIImpl("http://www.w3.org/2002/07/owl#imports",false),
      new URIImpl("http://www.w3.org/2002/07/owl#inverseOf",false),
      new URIImpl("http://www.w3.org/2002/07/owl#members",false),
      new URIImpl("http://purl.org/dc/terms/modified",false),
      new URIImpl("http://www.w3.org/2002/07/owl#onProperty",false),
      new URIImpl("http://www.w3.org/2002/07/owl#propertyChainAxiom",false),
      new URIImpl("http://www.w3.org/2002/07/owl#someValuesFrom",false),
      new URIImpl("http://purl.org/dc/terms/title",false),
      new URIImpl("http://www.w3.org/2002/07/owl#unionOf",false),
      new URIImpl("http://purl.org/net/opmv/ns#used",false),
      new URIImpl("http://purl.org/net/opmv/ns#wasDerivedFrom",false),
      new URIImpl("http://purl.org/net/opmv/ns#wasGeneratedBy",false) 
    };


	// protected constructors needed for inheritance
	
	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.semweb4j.org
	 * @param classURI URI of RDFS class
	 * @param instanceIdentifier Resource that identifies this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c1] 
	 */
	protected Thing ( Model model, URI classURI, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, classURI, instanceIdentifier, write);
	}

	// public constructors

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param instanceIdentifier an RDF2Go Resource identifying this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c2] 
	 */
	public Thing ( Model model, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, RDFS_CLASS, instanceIdentifier, write);
	}


	/**
	 * Returns a Java wrapper over an RDF object, identified by a URI, given as a String.
	 * Creating two wrappers for the same URI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uriString a URI given as a String
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 * @throws ModelRuntimeException if URI syntax is wrong
	 *
	 * [Generated from RDFReactor template rule #c7] 
	 */
	public Thing ( Model model, String uriString, boolean write) throws ModelRuntimeException {
		super(model, RDFS_CLASS, new URIImpl(uriString,false), write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by a blank node.
	 * Creating two wrappers for the same blank node is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param bnode BlankNode of this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c8] 
	 */
	public Thing ( Model model, BlankNode bnode, boolean write ) {
		super(model, RDFS_CLASS, bnode, write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by 
	 * a randomly generated URI.
	 * Creating two wrappers results in different URIs.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c9] 
	 */
	public Thing ( Model model, boolean write ) {
		super(model, RDFS_CLASS, model.newRandomUniqueURI(), write);
	}

    ///////////////////////////////////////////////////////////////////
    // typing

	/**
	 * Return an existing instance of this class in the model. No statements are written.
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return an instance of Thing  or null if none existst
	 *
	 * [Generated from RDFReactor template rule #class0] 
	 */
	public static Thing  getInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getInstance(model, instanceResource, Thing.class);
	}

	/**
	 * Create a new instance of this class in the model. 
	 * That is, create the statement (instanceResource, RDF.type, http://www.w3.org/2000/01/rdf-schema#Class).
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class1] 
	 */
	public static void createInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.createInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return true if instanceResource is an instance of this class in the model
	 *
	 * [Generated from RDFReactor template rule #class2] 
	 */
	public static boolean hasInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.hasInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as RDF resources
	 *
	 * [Generated from RDFReactor template rule #class3] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInstances(Model model) {
		return Base.getAllInstances(model, RDFS_CLASS, org.ontoware.rdf2go.model.node.Resource.class);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as a ReactorResult,
	 * which can conveniently be converted to iterator, list or array.
	 *
	 * [Generated from RDFReactor template rule #class3-as] 
	 */
	public static ReactorResult<? extends Thing> getAllInstances_as(Model model) {
		return Base.getAllInstances_as(model, RDFS_CLASS, Thing.class );
	}

    /**
	 * Remove rdf:type Thing from this instance. Other triples are not affected.
	 * To delete more, use deleteAllProperties
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class4] 
	 */
	public static void deleteInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * Delete all (this, *, *), i.e. including rdf:type
	 * @param model an RDF2Go model
	 * @param resource
	 */
	public static void deleteAllProperties(Model model,	org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteAllProperties(model, instanceResource);
	}

    ///////////////////////////////////////////////////////////////////
    // property access methods

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'AllValuesFrom' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllAllValuesFrom_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.ALLVALUESFROM, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'AllValuesFrom' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllAllValuesFrom_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.ALLVALUESFROM, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'AllValuesFrom' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllAllValuesFrom_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.ALLVALUESFROM, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Contributor' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllContributor_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.CONTRIBUTOR, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Contributor' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllContributor_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.CONTRIBUTOR, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Contributor' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllContributor_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.CONTRIBUTOR, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Created' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllCreated_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.CREATED, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Created' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllCreated_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.CREATED, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Created' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllCreated_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.CREATED, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'DisjointWith' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllDisjointWith_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.DISJOINTWITH, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'DisjointWith' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllDisjointWith_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.DISJOINTWITH, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'DisjointWith' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllDisjointWith_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.DISJOINTWITH, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Elements1_1Title' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllElements1_1Title_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.ELEMENTS1_1TITLE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Elements1_1Title' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllElements1_1Title_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.ELEMENTS1_1TITLE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Elements1_1Title' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllElements1_1Title_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.ELEMENTS1_1TITLE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'EquivalentClass' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllEquivalentClass_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.EQUIVALENTCLASS, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'EquivalentClass' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllEquivalentClass_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.EQUIVALENTCLASS, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'EquivalentClass' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllEquivalentClass_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.EQUIVALENTCLASS, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExampleResource' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExampleResource_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.EXAMPLERESOURCE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExampleResource' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExampleResource_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.EXAMPLERESOURCE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExampleResource' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExampleResource_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.EXAMPLERESOURCE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Imports' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllImports_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.IMPORTS, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Imports' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllImports_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.IMPORTS, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Imports' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllImports_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.IMPORTS, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'InverseOf' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInverseOf_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.INVERSEOF, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'InverseOf' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInverseOf_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.INVERSEOF, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'InverseOf' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllInverseOf_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.INVERSEOF, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Members' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllMembers_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.MEMBERS, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Members' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllMembers_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.MEMBERS, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Members' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllMembers_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.MEMBERS, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Modified' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllModified_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.MODIFIED, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Modified' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllModified_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.MODIFIED, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Modified' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllModified_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.MODIFIED, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'OnProperty' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllOnProperty_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.ONPROPERTY, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'OnProperty' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllOnProperty_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.ONPROPERTY, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'OnProperty' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllOnProperty_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.ONPROPERTY, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'PropertyChainAxiom' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllPropertyChainAxiom_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.PROPERTYCHAINAXIOM, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'PropertyChainAxiom' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllPropertyChainAxiom_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.PROPERTYCHAINAXIOM, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'PropertyChainAxiom' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllPropertyChainAxiom_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.PROPERTYCHAINAXIOM, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'SomeValuesFrom' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSomeValuesFrom_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.SOMEVALUESFROM, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'SomeValuesFrom' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSomeValuesFrom_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.SOMEVALUESFROM, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'SomeValuesFrom' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllSomeValuesFrom_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.SOMEVALUESFROM, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Title' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllTitle_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.TITLE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Title' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllTitle_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.TITLE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Title' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllTitle_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.TITLE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'UnionOf' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllUnionOf_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.UNIONOF, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'UnionOf' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllUnionOf_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.UNIONOF, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'UnionOf' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllUnionOf_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.UNIONOF, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Used' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllUsed_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.USED, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Used' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllUsed_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.USED, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Used' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllUsed_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.USED, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'WasDerivedFrom' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllWasDerivedFrom_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.WASDERIVEDFROM, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'WasDerivedFrom' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllWasDerivedFrom_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.WASDERIVEDFROM, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'WasDerivedFrom' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllWasDerivedFrom_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.WASDERIVEDFROM, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'WasGeneratedBy' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllWasGeneratedBy_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.WASGENERATEDBY, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'WasGeneratedBy' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllWasGeneratedBy_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.WASGENERATEDBY, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'WasGeneratedBy' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllWasGeneratedBy_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.WASGENERATEDBY, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Value' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllValue_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, A_1.VALUE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Value' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllValue_Inverse() {
		return Base.getAll_Inverse(this.model, A_1.VALUE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Value' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllValue_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, A_1.VALUE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'DatapropertyAbbreviation' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllDatapropertyAbbreviation_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Annotable.DATAPROPERTYABBREVIATION, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'DatapropertyAbbreviation' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllDatapropertyAbbreviation_Inverse() {
		return Base.getAll_Inverse(this.model, Annotable.DATAPROPERTYABBREVIATION, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'DatapropertyAbbreviation' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllDatapropertyAbbreviation_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Annotable.DATAPROPERTYABBREVIATION, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Key' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllKey_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Property.KEY, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Key' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllKey_Inverse() {
		return Base.getAll_Inverse(this.model, Property.KEY, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Key' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllKey_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Property.KEY, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'HasContituent' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllHasContituent_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, OPMGraph.HASCONTITUENT, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'HasContituent' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllHasContituent_Inverse() {
		return Base.getAll_Inverse(this.model, OPMGraph.HASCONTITUENT, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'HasContituent' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllHasContituent_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, OPMGraph.HASCONTITUENT, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}



    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7e140bf has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasAllValuesFrom(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, ALLVALUESFROM);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7e140bf has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasAllValuesFrom() {
		return Base.has(this.model, this.getResource(), ALLVALUESFROM);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7e140bf has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasAllValuesFrom(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, ALLVALUESFROM, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7e140bf has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasAllValuesFrom( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), ALLVALUESFROM, value);
	}

     /**
     * Get all values of property AllValuesFrom as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllAllValuesFrom_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, ALLVALUESFROM);
	}
	
    /**
     * Get all values of property AllValuesFrom as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllAllValuesFrom_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ALLVALUESFROM, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property AllValuesFrom as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllAllValuesFrom_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), ALLVALUESFROM);
	}

    /**
     * Get all values of property AllValuesFrom as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllAllValuesFrom_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), ALLVALUESFROM, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property AllValuesFrom     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllAllValuesFrom(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, ALLVALUESFROM, Thing.class);
	}
	
    /**
     * Get all values of property AllValuesFrom as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllAllValuesFrom_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ALLVALUESFROM, Thing.class);
	}

    /**
     * Get all values of property AllValuesFrom     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllAllValuesFrom() {
		return Base.getAll(this.model, this.getResource(), ALLVALUESFROM, Thing.class);
	}

    /**
     * Get all values of property AllValuesFrom as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllAllValuesFrom_as() {
		return Base.getAll_as(this.model, this.getResource(), ALLVALUESFROM, Thing.class);
	}
 
    /**
     * Adds a value to property AllValuesFrom as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addAllValuesFrom( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, ALLVALUESFROM, value);
	}
	
    /**
     * Adds a value to property AllValuesFrom as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addAllValuesFrom( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), ALLVALUESFROM, value);
	}
    /**
     * Adds a value to property AllValuesFrom from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addAllValuesFrom(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, ALLVALUESFROM, value);
	}
	
    /**
     * Adds a value to property AllValuesFrom from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addAllValuesFrom(Thing value) {
		Base.add(this.model, this.getResource(), ALLVALUESFROM, value);
	}
  

    /**
     * Sets a value of property AllValuesFrom from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setAllValuesFrom( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, ALLVALUESFROM, value);
	}
	
    /**
     * Sets a value of property AllValuesFrom from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setAllValuesFrom( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), ALLVALUESFROM, value);
	}
    /**
     * Sets a value of property AllValuesFrom from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setAllValuesFrom(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, ALLVALUESFROM, value);
	}
	
    /**
     * Sets a value of property AllValuesFrom from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setAllValuesFrom(Thing value) {
		Base.set(this.model, this.getResource(), ALLVALUESFROM, value);
	}
  


    /**
     * Removes a value of property AllValuesFrom as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeAllValuesFrom( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, ALLVALUESFROM, value);
	}
	
    /**
     * Removes a value of property AllValuesFrom as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeAllValuesFrom( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), ALLVALUESFROM, value);
	}
    /**
     * Removes a value of property AllValuesFrom given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeAllValuesFrom(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, ALLVALUESFROM, value);
	}
	
    /**
     * Removes a value of property AllValuesFrom given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeAllValuesFrom(Thing value) {
		Base.remove(this.model, this.getResource(), ALLVALUESFROM, value);
	}
  
    /**
     * Removes all values of property AllValuesFrom     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllAllValuesFrom( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, ALLVALUESFROM);
	}
	
    /**
     * Removes all values of property AllValuesFrom	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllAllValuesFrom() {
		Base.removeAll(this.model, this.getResource(), ALLVALUESFROM);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@8746d23 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasContributor(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, CONTRIBUTOR);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@8746d23 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasContributor() {
		return Base.has(this.model, this.getResource(), CONTRIBUTOR);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@8746d23 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasContributor(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, CONTRIBUTOR, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@8746d23 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasContributor( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), CONTRIBUTOR, value);
	}

     /**
     * Get all values of property Contributor as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllContributor_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, CONTRIBUTOR);
	}
	
    /**
     * Get all values of property Contributor as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllContributor_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CONTRIBUTOR, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Contributor as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllContributor_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), CONTRIBUTOR);
	}

    /**
     * Get all values of property Contributor as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllContributor_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), CONTRIBUTOR, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Contributor     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllContributor(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, CONTRIBUTOR, Thing.class);
	}
	
    /**
     * Get all values of property Contributor as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllContributor_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CONTRIBUTOR, Thing.class);
	}

    /**
     * Get all values of property Contributor     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllContributor() {
		return Base.getAll(this.model, this.getResource(), CONTRIBUTOR, Thing.class);
	}

    /**
     * Get all values of property Contributor as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllContributor_as() {
		return Base.getAll_as(this.model, this.getResource(), CONTRIBUTOR, Thing.class);
	}
 
    /**
     * Adds a value to property Contributor as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addContributor( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, CONTRIBUTOR, value);
	}
	
    /**
     * Adds a value to property Contributor as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addContributor( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), CONTRIBUTOR, value);
	}
    /**
     * Adds a value to property Contributor from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addContributor(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, CONTRIBUTOR, value);
	}
	
    /**
     * Adds a value to property Contributor from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addContributor(Thing value) {
		Base.add(this.model, this.getResource(), CONTRIBUTOR, value);
	}
  

    /**
     * Sets a value of property Contributor from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setContributor( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, CONTRIBUTOR, value);
	}
	
    /**
     * Sets a value of property Contributor from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setContributor( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), CONTRIBUTOR, value);
	}
    /**
     * Sets a value of property Contributor from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setContributor(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, CONTRIBUTOR, value);
	}
	
    /**
     * Sets a value of property Contributor from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setContributor(Thing value) {
		Base.set(this.model, this.getResource(), CONTRIBUTOR, value);
	}
  


    /**
     * Removes a value of property Contributor as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeContributor( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, CONTRIBUTOR, value);
	}
	
    /**
     * Removes a value of property Contributor as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeContributor( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), CONTRIBUTOR, value);
	}
    /**
     * Removes a value of property Contributor given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeContributor(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, CONTRIBUTOR, value);
	}
	
    /**
     * Removes a value of property Contributor given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeContributor(Thing value) {
		Base.remove(this.model, this.getResource(), CONTRIBUTOR, value);
	}
  
    /**
     * Removes all values of property Contributor     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllContributor( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, CONTRIBUTOR);
	}
	
    /**
     * Removes all values of property Contributor	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllContributor() {
		Base.removeAll(this.model, this.getResource(), CONTRIBUTOR);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@143b9a5f has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasCreated(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, CREATED);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@143b9a5f has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasCreated() {
		return Base.has(this.model, this.getResource(), CREATED);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@143b9a5f has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasCreated(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, CREATED, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@143b9a5f has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasCreated( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), CREATED, value);
	}

     /**
     * Get all values of property Created as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllCreated_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, CREATED);
	}
	
    /**
     * Get all values of property Created as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllCreated_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CREATED, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Created as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllCreated_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), CREATED);
	}

    /**
     * Get all values of property Created as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllCreated_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), CREATED, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Created     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllCreated(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, CREATED, Thing.class);
	}
	
    /**
     * Get all values of property Created as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllCreated_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CREATED, Thing.class);
	}

    /**
     * Get all values of property Created     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllCreated() {
		return Base.getAll(this.model, this.getResource(), CREATED, Thing.class);
	}

    /**
     * Get all values of property Created as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllCreated_as() {
		return Base.getAll_as(this.model, this.getResource(), CREATED, Thing.class);
	}
 
    /**
     * Adds a value to property Created as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addCreated( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, CREATED, value);
	}
	
    /**
     * Adds a value to property Created as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addCreated( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), CREATED, value);
	}
    /**
     * Adds a value to property Created from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addCreated(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, CREATED, value);
	}
	
    /**
     * Adds a value to property Created from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addCreated(Thing value) {
		Base.add(this.model, this.getResource(), CREATED, value);
	}
  

    /**
     * Sets a value of property Created from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setCreated( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, CREATED, value);
	}
	
    /**
     * Sets a value of property Created from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setCreated( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), CREATED, value);
	}
    /**
     * Sets a value of property Created from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setCreated(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, CREATED, value);
	}
	
    /**
     * Sets a value of property Created from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setCreated(Thing value) {
		Base.set(this.model, this.getResource(), CREATED, value);
	}
  


    /**
     * Removes a value of property Created as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeCreated( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, CREATED, value);
	}
	
    /**
     * Removes a value of property Created as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeCreated( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), CREATED, value);
	}
    /**
     * Removes a value of property Created given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeCreated(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, CREATED, value);
	}
	
    /**
     * Removes a value of property Created given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeCreated(Thing value) {
		Base.remove(this.model, this.getResource(), CREATED, value);
	}
  
    /**
     * Removes all values of property Created     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllCreated( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, CREATED);
	}
	
    /**
     * Removes all values of property Created	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllCreated() {
		Base.removeAll(this.model, this.getResource(), CREATED);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2677622b has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasDisjointWith(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, DISJOINTWITH);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2677622b has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasDisjointWith() {
		return Base.has(this.model, this.getResource(), DISJOINTWITH);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2677622b has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasDisjointWith(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, DISJOINTWITH, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2677622b has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasDisjointWith( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), DISJOINTWITH, value);
	}

     /**
     * Get all values of property DisjointWith as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDisjointWith_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, DISJOINTWITH);
	}
	
    /**
     * Get all values of property DisjointWith as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllDisjointWith_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, DISJOINTWITH, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property DisjointWith as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDisjointWith_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), DISJOINTWITH);
	}

    /**
     * Get all values of property DisjointWith as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllDisjointWith_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), DISJOINTWITH, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property DisjointWith     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllDisjointWith(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, DISJOINTWITH, Thing.class);
	}
	
    /**
     * Get all values of property DisjointWith as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllDisjointWith_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, DISJOINTWITH, Thing.class);
	}

    /**
     * Get all values of property DisjointWith     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllDisjointWith() {
		return Base.getAll(this.model, this.getResource(), DISJOINTWITH, Thing.class);
	}

    /**
     * Get all values of property DisjointWith as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllDisjointWith_as() {
		return Base.getAll_as(this.model, this.getResource(), DISJOINTWITH, Thing.class);
	}
 
    /**
     * Adds a value to property DisjointWith as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addDisjointWith( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, DISJOINTWITH, value);
	}
	
    /**
     * Adds a value to property DisjointWith as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addDisjointWith( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), DISJOINTWITH, value);
	}
    /**
     * Adds a value to property DisjointWith from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addDisjointWith(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, DISJOINTWITH, value);
	}
	
    /**
     * Adds a value to property DisjointWith from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addDisjointWith(Thing value) {
		Base.add(this.model, this.getResource(), DISJOINTWITH, value);
	}
  

    /**
     * Sets a value of property DisjointWith from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setDisjointWith( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, DISJOINTWITH, value);
	}
	
    /**
     * Sets a value of property DisjointWith from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setDisjointWith( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), DISJOINTWITH, value);
	}
    /**
     * Sets a value of property DisjointWith from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setDisjointWith(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, DISJOINTWITH, value);
	}
	
    /**
     * Sets a value of property DisjointWith from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setDisjointWith(Thing value) {
		Base.set(this.model, this.getResource(), DISJOINTWITH, value);
	}
  


    /**
     * Removes a value of property DisjointWith as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeDisjointWith( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, DISJOINTWITH, value);
	}
	
    /**
     * Removes a value of property DisjointWith as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeDisjointWith( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), DISJOINTWITH, value);
	}
    /**
     * Removes a value of property DisjointWith given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeDisjointWith(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, DISJOINTWITH, value);
	}
	
    /**
     * Removes a value of property DisjointWith given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeDisjointWith(Thing value) {
		Base.remove(this.model, this.getResource(), DISJOINTWITH, value);
	}
  
    /**
     * Removes all values of property DisjointWith     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllDisjointWith( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, DISJOINTWITH);
	}
	
    /**
     * Removes all values of property DisjointWith	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllDisjointWith() {
		Base.removeAll(this.model, this.getResource(), DISJOINTWITH);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7d41cd01 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasElements1_1Title(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, ELEMENTS1_1TITLE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7d41cd01 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasElements1_1Title() {
		return Base.has(this.model, this.getResource(), ELEMENTS1_1TITLE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7d41cd01 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasElements1_1Title(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, ELEMENTS1_1TITLE, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7d41cd01 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasElements1_1Title( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), ELEMENTS1_1TITLE, value);
	}

     /**
     * Get all values of property Elements1_1Title as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllElements1_1Title_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, ELEMENTS1_1TITLE);
	}
	
    /**
     * Get all values of property Elements1_1Title as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllElements1_1Title_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ELEMENTS1_1TITLE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Elements1_1Title as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllElements1_1Title_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), ELEMENTS1_1TITLE);
	}

    /**
     * Get all values of property Elements1_1Title as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllElements1_1Title_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), ELEMENTS1_1TITLE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Elements1_1Title     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllElements1_1Title(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, ELEMENTS1_1TITLE, Thing.class);
	}
	
    /**
     * Get all values of property Elements1_1Title as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllElements1_1Title_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ELEMENTS1_1TITLE, Thing.class);
	}

    /**
     * Get all values of property Elements1_1Title     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllElements1_1Title() {
		return Base.getAll(this.model, this.getResource(), ELEMENTS1_1TITLE, Thing.class);
	}

    /**
     * Get all values of property Elements1_1Title as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllElements1_1Title_as() {
		return Base.getAll_as(this.model, this.getResource(), ELEMENTS1_1TITLE, Thing.class);
	}
 
    /**
     * Adds a value to property Elements1_1Title as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addElements1_1Title( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, ELEMENTS1_1TITLE, value);
	}
	
    /**
     * Adds a value to property Elements1_1Title as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addElements1_1Title( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), ELEMENTS1_1TITLE, value);
	}
    /**
     * Adds a value to property Elements1_1Title from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addElements1_1Title(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, ELEMENTS1_1TITLE, value);
	}
	
    /**
     * Adds a value to property Elements1_1Title from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addElements1_1Title(Thing value) {
		Base.add(this.model, this.getResource(), ELEMENTS1_1TITLE, value);
	}
  

    /**
     * Sets a value of property Elements1_1Title from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setElements1_1Title( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, ELEMENTS1_1TITLE, value);
	}
	
    /**
     * Sets a value of property Elements1_1Title from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setElements1_1Title( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), ELEMENTS1_1TITLE, value);
	}
    /**
     * Sets a value of property Elements1_1Title from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setElements1_1Title(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, ELEMENTS1_1TITLE, value);
	}
	
    /**
     * Sets a value of property Elements1_1Title from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setElements1_1Title(Thing value) {
		Base.set(this.model, this.getResource(), ELEMENTS1_1TITLE, value);
	}
  


    /**
     * Removes a value of property Elements1_1Title as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeElements1_1Title( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, ELEMENTS1_1TITLE, value);
	}
	
    /**
     * Removes a value of property Elements1_1Title as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeElements1_1Title( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), ELEMENTS1_1TITLE, value);
	}
    /**
     * Removes a value of property Elements1_1Title given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeElements1_1Title(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, ELEMENTS1_1TITLE, value);
	}
	
    /**
     * Removes a value of property Elements1_1Title given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeElements1_1Title(Thing value) {
		Base.remove(this.model, this.getResource(), ELEMENTS1_1TITLE, value);
	}
  
    /**
     * Removes all values of property Elements1_1Title     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllElements1_1Title( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, ELEMENTS1_1TITLE);
	}
	
    /**
     * Removes all values of property Elements1_1Title	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllElements1_1Title() {
		Base.removeAll(this.model, this.getResource(), ELEMENTS1_1TITLE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@72d86c58 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasEquivalentClass(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EQUIVALENTCLASS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@72d86c58 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasEquivalentClass() {
		return Base.has(this.model, this.getResource(), EQUIVALENTCLASS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@72d86c58 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasEquivalentClass(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EQUIVALENTCLASS, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@72d86c58 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasEquivalentClass( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EQUIVALENTCLASS, value);
	}

     /**
     * Get all values of property EquivalentClass as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllEquivalentClass_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EQUIVALENTCLASS);
	}
	
    /**
     * Get all values of property EquivalentClass as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllEquivalentClass_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EQUIVALENTCLASS, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property EquivalentClass as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllEquivalentClass_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EQUIVALENTCLASS);
	}

    /**
     * Get all values of property EquivalentClass as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllEquivalentClass_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EQUIVALENTCLASS, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property EquivalentClass     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllEquivalentClass(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EQUIVALENTCLASS, Thing.class);
	}
	
    /**
     * Get all values of property EquivalentClass as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllEquivalentClass_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EQUIVALENTCLASS, Thing.class);
	}

    /**
     * Get all values of property EquivalentClass     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllEquivalentClass() {
		return Base.getAll(this.model, this.getResource(), EQUIVALENTCLASS, Thing.class);
	}

    /**
     * Get all values of property EquivalentClass as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllEquivalentClass_as() {
		return Base.getAll_as(this.model, this.getResource(), EQUIVALENTCLASS, Thing.class);
	}
 
    /**
     * Adds a value to property EquivalentClass as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addEquivalentClass( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EQUIVALENTCLASS, value);
	}
	
    /**
     * Adds a value to property EquivalentClass as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addEquivalentClass( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EQUIVALENTCLASS, value);
	}
    /**
     * Adds a value to property EquivalentClass from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addEquivalentClass(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, EQUIVALENTCLASS, value);
	}
	
    /**
     * Adds a value to property EquivalentClass from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addEquivalentClass(Thing value) {
		Base.add(this.model, this.getResource(), EQUIVALENTCLASS, value);
	}
  

    /**
     * Sets a value of property EquivalentClass from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setEquivalentClass( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EQUIVALENTCLASS, value);
	}
	
    /**
     * Sets a value of property EquivalentClass from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setEquivalentClass( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EQUIVALENTCLASS, value);
	}
    /**
     * Sets a value of property EquivalentClass from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setEquivalentClass(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, EQUIVALENTCLASS, value);
	}
	
    /**
     * Sets a value of property EquivalentClass from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setEquivalentClass(Thing value) {
		Base.set(this.model, this.getResource(), EQUIVALENTCLASS, value);
	}
  


    /**
     * Removes a value of property EquivalentClass as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeEquivalentClass( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EQUIVALENTCLASS, value);
	}
	
    /**
     * Removes a value of property EquivalentClass as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeEquivalentClass( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EQUIVALENTCLASS, value);
	}
    /**
     * Removes a value of property EquivalentClass given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeEquivalentClass(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, EQUIVALENTCLASS, value);
	}
	
    /**
     * Removes a value of property EquivalentClass given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeEquivalentClass(Thing value) {
		Base.remove(this.model, this.getResource(), EQUIVALENTCLASS, value);
	}
  
    /**
     * Removes all values of property EquivalentClass     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllEquivalentClass( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EQUIVALENTCLASS);
	}
	
    /**
     * Removes all values of property EquivalentClass	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllEquivalentClass() {
		Base.removeAll(this.model, this.getResource(), EQUIVALENTCLASS);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@270ad7c0 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExampleResource(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXAMPLERESOURCE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@270ad7c0 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExampleResource() {
		return Base.has(this.model, this.getResource(), EXAMPLERESOURCE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@270ad7c0 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExampleResource(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXAMPLERESOURCE, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@270ad7c0 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExampleResource( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXAMPLERESOURCE, value);
	}

     /**
     * Get all values of property ExampleResource as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExampleResource_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXAMPLERESOURCE);
	}
	
    /**
     * Get all values of property ExampleResource as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExampleResource_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXAMPLERESOURCE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExampleResource as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExampleResource_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXAMPLERESOURCE);
	}

    /**
     * Get all values of property ExampleResource as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExampleResource_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXAMPLERESOURCE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExampleResource     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllExampleResource(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXAMPLERESOURCE, Thing.class);
	}
	
    /**
     * Get all values of property ExampleResource as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllExampleResource_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXAMPLERESOURCE, Thing.class);
	}

    /**
     * Get all values of property ExampleResource     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllExampleResource() {
		return Base.getAll(this.model, this.getResource(), EXAMPLERESOURCE, Thing.class);
	}

    /**
     * Get all values of property ExampleResource as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllExampleResource_as() {
		return Base.getAll_as(this.model, this.getResource(), EXAMPLERESOURCE, Thing.class);
	}
 
    /**
     * Adds a value to property ExampleResource as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExampleResource( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXAMPLERESOURCE, value);
	}
	
    /**
     * Adds a value to property ExampleResource as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExampleResource( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXAMPLERESOURCE, value);
	}
    /**
     * Adds a value to property ExampleResource from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExampleResource(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, EXAMPLERESOURCE, value);
	}
	
    /**
     * Adds a value to property ExampleResource from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExampleResource(Thing value) {
		Base.add(this.model, this.getResource(), EXAMPLERESOURCE, value);
	}
  

    /**
     * Sets a value of property ExampleResource from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExampleResource( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXAMPLERESOURCE, value);
	}
	
    /**
     * Sets a value of property ExampleResource from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExampleResource( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXAMPLERESOURCE, value);
	}
    /**
     * Sets a value of property ExampleResource from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExampleResource(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, EXAMPLERESOURCE, value);
	}
	
    /**
     * Sets a value of property ExampleResource from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExampleResource(Thing value) {
		Base.set(this.model, this.getResource(), EXAMPLERESOURCE, value);
	}
  


    /**
     * Removes a value of property ExampleResource as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExampleResource( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXAMPLERESOURCE, value);
	}
	
    /**
     * Removes a value of property ExampleResource as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExampleResource( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXAMPLERESOURCE, value);
	}
    /**
     * Removes a value of property ExampleResource given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExampleResource(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, EXAMPLERESOURCE, value);
	}
	
    /**
     * Removes a value of property ExampleResource given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExampleResource(Thing value) {
		Base.remove(this.model, this.getResource(), EXAMPLERESOURCE, value);
	}
  
    /**
     * Removes all values of property ExampleResource     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExampleResource( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXAMPLERESOURCE);
	}
	
    /**
     * Removes all values of property ExampleResource	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExampleResource() {
		Base.removeAll(this.model, this.getResource(), EXAMPLERESOURCE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@32e0c07c has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasImports(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, IMPORTS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@32e0c07c has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasImports() {
		return Base.has(this.model, this.getResource(), IMPORTS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@32e0c07c has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasImports(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, IMPORTS, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@32e0c07c has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasImports( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), IMPORTS, value);
	}

     /**
     * Get all values of property Imports as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllImports_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, IMPORTS);
	}
	
    /**
     * Get all values of property Imports as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllImports_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, IMPORTS, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Imports as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllImports_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), IMPORTS);
	}

    /**
     * Get all values of property Imports as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllImports_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), IMPORTS, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Imports     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllImports(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, IMPORTS, Thing.class);
	}
	
    /**
     * Get all values of property Imports as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllImports_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, IMPORTS, Thing.class);
	}

    /**
     * Get all values of property Imports     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllImports() {
		return Base.getAll(this.model, this.getResource(), IMPORTS, Thing.class);
	}

    /**
     * Get all values of property Imports as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllImports_as() {
		return Base.getAll_as(this.model, this.getResource(), IMPORTS, Thing.class);
	}
 
    /**
     * Adds a value to property Imports as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addImports( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, IMPORTS, value);
	}
	
    /**
     * Adds a value to property Imports as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addImports( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), IMPORTS, value);
	}
    /**
     * Adds a value to property Imports from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addImports(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, IMPORTS, value);
	}
	
    /**
     * Adds a value to property Imports from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addImports(Thing value) {
		Base.add(this.model, this.getResource(), IMPORTS, value);
	}
  

    /**
     * Sets a value of property Imports from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setImports( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, IMPORTS, value);
	}
	
    /**
     * Sets a value of property Imports from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setImports( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), IMPORTS, value);
	}
    /**
     * Sets a value of property Imports from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setImports(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, IMPORTS, value);
	}
	
    /**
     * Sets a value of property Imports from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setImports(Thing value) {
		Base.set(this.model, this.getResource(), IMPORTS, value);
	}
  


    /**
     * Removes a value of property Imports as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeImports( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, IMPORTS, value);
	}
	
    /**
     * Removes a value of property Imports as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeImports( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), IMPORTS, value);
	}
    /**
     * Removes a value of property Imports given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeImports(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, IMPORTS, value);
	}
	
    /**
     * Removes a value of property Imports given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeImports(Thing value) {
		Base.remove(this.model, this.getResource(), IMPORTS, value);
	}
  
    /**
     * Removes all values of property Imports     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllImports( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, IMPORTS);
	}
	
    /**
     * Removes all values of property Imports	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllImports() {
		Base.removeAll(this.model, this.getResource(), IMPORTS);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5ce345c2 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasInverseOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, INVERSEOF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5ce345c2 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasInverseOf() {
		return Base.has(this.model, this.getResource(), INVERSEOF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5ce345c2 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasInverseOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, INVERSEOF, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5ce345c2 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasInverseOf( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), INVERSEOF, value);
	}

     /**
     * Get all values of property InverseOf as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllInverseOf_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, INVERSEOF);
	}
	
    /**
     * Get all values of property InverseOf as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllInverseOf_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, INVERSEOF, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property InverseOf as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllInverseOf_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), INVERSEOF);
	}

    /**
     * Get all values of property InverseOf as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllInverseOf_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), INVERSEOF, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property InverseOf     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllInverseOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, INVERSEOF, Thing.class);
	}
	
    /**
     * Get all values of property InverseOf as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllInverseOf_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, INVERSEOF, Thing.class);
	}

    /**
     * Get all values of property InverseOf     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllInverseOf() {
		return Base.getAll(this.model, this.getResource(), INVERSEOF, Thing.class);
	}

    /**
     * Get all values of property InverseOf as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllInverseOf_as() {
		return Base.getAll_as(this.model, this.getResource(), INVERSEOF, Thing.class);
	}
 
    /**
     * Adds a value to property InverseOf as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addInverseOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, INVERSEOF, value);
	}
	
    /**
     * Adds a value to property InverseOf as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addInverseOf( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), INVERSEOF, value);
	}
    /**
     * Adds a value to property InverseOf from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addInverseOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, INVERSEOF, value);
	}
	
    /**
     * Adds a value to property InverseOf from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addInverseOf(Thing value) {
		Base.add(this.model, this.getResource(), INVERSEOF, value);
	}
  

    /**
     * Sets a value of property InverseOf from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setInverseOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, INVERSEOF, value);
	}
	
    /**
     * Sets a value of property InverseOf from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setInverseOf( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), INVERSEOF, value);
	}
    /**
     * Sets a value of property InverseOf from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setInverseOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, INVERSEOF, value);
	}
	
    /**
     * Sets a value of property InverseOf from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setInverseOf(Thing value) {
		Base.set(this.model, this.getResource(), INVERSEOF, value);
	}
  


    /**
     * Removes a value of property InverseOf as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeInverseOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, INVERSEOF, value);
	}
	
    /**
     * Removes a value of property InverseOf as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeInverseOf( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), INVERSEOF, value);
	}
    /**
     * Removes a value of property InverseOf given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeInverseOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, INVERSEOF, value);
	}
	
    /**
     * Removes a value of property InverseOf given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeInverseOf(Thing value) {
		Base.remove(this.model, this.getResource(), INVERSEOF, value);
	}
  
    /**
     * Removes all values of property InverseOf     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllInverseOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, INVERSEOF);
	}
	
    /**
     * Removes all values of property InverseOf	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllInverseOf() {
		Base.removeAll(this.model, this.getResource(), INVERSEOF);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@31ccbefe has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasMembers(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, MEMBERS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@31ccbefe has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasMembers() {
		return Base.has(this.model, this.getResource(), MEMBERS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@31ccbefe has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasMembers(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, MEMBERS, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@31ccbefe has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasMembers( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), MEMBERS, value);
	}

     /**
     * Get all values of property Members as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllMembers_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, MEMBERS);
	}
	
    /**
     * Get all values of property Members as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllMembers_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, MEMBERS, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Members as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllMembers_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), MEMBERS);
	}

    /**
     * Get all values of property Members as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllMembers_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), MEMBERS, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Members     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllMembers(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, MEMBERS, Thing.class);
	}
	
    /**
     * Get all values of property Members as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllMembers_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, MEMBERS, Thing.class);
	}

    /**
     * Get all values of property Members     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllMembers() {
		return Base.getAll(this.model, this.getResource(), MEMBERS, Thing.class);
	}

    /**
     * Get all values of property Members as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllMembers_as() {
		return Base.getAll_as(this.model, this.getResource(), MEMBERS, Thing.class);
	}
 
    /**
     * Adds a value to property Members as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addMembers( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, MEMBERS, value);
	}
	
    /**
     * Adds a value to property Members as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addMembers( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), MEMBERS, value);
	}
    /**
     * Adds a value to property Members from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addMembers(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, MEMBERS, value);
	}
	
    /**
     * Adds a value to property Members from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addMembers(Thing value) {
		Base.add(this.model, this.getResource(), MEMBERS, value);
	}
  

    /**
     * Sets a value of property Members from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setMembers( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, MEMBERS, value);
	}
	
    /**
     * Sets a value of property Members from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setMembers( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), MEMBERS, value);
	}
    /**
     * Sets a value of property Members from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setMembers(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, MEMBERS, value);
	}
	
    /**
     * Sets a value of property Members from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setMembers(Thing value) {
		Base.set(this.model, this.getResource(), MEMBERS, value);
	}
  


    /**
     * Removes a value of property Members as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeMembers( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, MEMBERS, value);
	}
	
    /**
     * Removes a value of property Members as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeMembers( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), MEMBERS, value);
	}
    /**
     * Removes a value of property Members given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeMembers(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, MEMBERS, value);
	}
	
    /**
     * Removes a value of property Members given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeMembers(Thing value) {
		Base.remove(this.model, this.getResource(), MEMBERS, value);
	}
  
    /**
     * Removes all values of property Members     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllMembers( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, MEMBERS);
	}
	
    /**
     * Removes all values of property Members	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllMembers() {
		Base.removeAll(this.model, this.getResource(), MEMBERS);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5a2264c has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasModified(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, MODIFIED);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5a2264c has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasModified() {
		return Base.has(this.model, this.getResource(), MODIFIED);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5a2264c has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasModified(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, MODIFIED, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5a2264c has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasModified( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), MODIFIED, value);
	}

     /**
     * Get all values of property Modified as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllModified_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, MODIFIED);
	}
	
    /**
     * Get all values of property Modified as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllModified_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, MODIFIED, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Modified as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllModified_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), MODIFIED);
	}

    /**
     * Get all values of property Modified as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllModified_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), MODIFIED, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Modified     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllModified(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, MODIFIED, Thing.class);
	}
	
    /**
     * Get all values of property Modified as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllModified_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, MODIFIED, Thing.class);
	}

    /**
     * Get all values of property Modified     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllModified() {
		return Base.getAll(this.model, this.getResource(), MODIFIED, Thing.class);
	}

    /**
     * Get all values of property Modified as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllModified_as() {
		return Base.getAll_as(this.model, this.getResource(), MODIFIED, Thing.class);
	}
 
    /**
     * Adds a value to property Modified as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addModified( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, MODIFIED, value);
	}
	
    /**
     * Adds a value to property Modified as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addModified( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), MODIFIED, value);
	}
    /**
     * Adds a value to property Modified from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addModified(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, MODIFIED, value);
	}
	
    /**
     * Adds a value to property Modified from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addModified(Thing value) {
		Base.add(this.model, this.getResource(), MODIFIED, value);
	}
  

    /**
     * Sets a value of property Modified from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setModified( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, MODIFIED, value);
	}
	
    /**
     * Sets a value of property Modified from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setModified( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), MODIFIED, value);
	}
    /**
     * Sets a value of property Modified from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setModified(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, MODIFIED, value);
	}
	
    /**
     * Sets a value of property Modified from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setModified(Thing value) {
		Base.set(this.model, this.getResource(), MODIFIED, value);
	}
  


    /**
     * Removes a value of property Modified as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeModified( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, MODIFIED, value);
	}
	
    /**
     * Removes a value of property Modified as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeModified( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), MODIFIED, value);
	}
    /**
     * Removes a value of property Modified given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeModified(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, MODIFIED, value);
	}
	
    /**
     * Removes a value of property Modified given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeModified(Thing value) {
		Base.remove(this.model, this.getResource(), MODIFIED, value);
	}
  
    /**
     * Removes all values of property Modified     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllModified( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, MODIFIED);
	}
	
    /**
     * Removes all values of property Modified	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllModified() {
		Base.removeAll(this.model, this.getResource(), MODIFIED);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6b38dba has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasOnProperty(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, ONPROPERTY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6b38dba has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasOnProperty() {
		return Base.has(this.model, this.getResource(), ONPROPERTY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6b38dba has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasOnProperty(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, ONPROPERTY, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6b38dba has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasOnProperty( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), ONPROPERTY, value);
	}

     /**
     * Get all values of property OnProperty as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllOnProperty_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, ONPROPERTY);
	}
	
    /**
     * Get all values of property OnProperty as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllOnProperty_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ONPROPERTY, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property OnProperty as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllOnProperty_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), ONPROPERTY);
	}

    /**
     * Get all values of property OnProperty as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllOnProperty_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), ONPROPERTY, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property OnProperty     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllOnProperty(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, ONPROPERTY, Thing.class);
	}
	
    /**
     * Get all values of property OnProperty as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllOnProperty_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ONPROPERTY, Thing.class);
	}

    /**
     * Get all values of property OnProperty     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllOnProperty() {
		return Base.getAll(this.model, this.getResource(), ONPROPERTY, Thing.class);
	}

    /**
     * Get all values of property OnProperty as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllOnProperty_as() {
		return Base.getAll_as(this.model, this.getResource(), ONPROPERTY, Thing.class);
	}
 
    /**
     * Adds a value to property OnProperty as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addOnProperty( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, ONPROPERTY, value);
	}
	
    /**
     * Adds a value to property OnProperty as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addOnProperty( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), ONPROPERTY, value);
	}
    /**
     * Adds a value to property OnProperty from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addOnProperty(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, ONPROPERTY, value);
	}
	
    /**
     * Adds a value to property OnProperty from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addOnProperty(Thing value) {
		Base.add(this.model, this.getResource(), ONPROPERTY, value);
	}
  

    /**
     * Sets a value of property OnProperty from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setOnProperty( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, ONPROPERTY, value);
	}
	
    /**
     * Sets a value of property OnProperty from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setOnProperty( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), ONPROPERTY, value);
	}
    /**
     * Sets a value of property OnProperty from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setOnProperty(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, ONPROPERTY, value);
	}
	
    /**
     * Sets a value of property OnProperty from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setOnProperty(Thing value) {
		Base.set(this.model, this.getResource(), ONPROPERTY, value);
	}
  


    /**
     * Removes a value of property OnProperty as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeOnProperty( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, ONPROPERTY, value);
	}
	
    /**
     * Removes a value of property OnProperty as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeOnProperty( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), ONPROPERTY, value);
	}
    /**
     * Removes a value of property OnProperty given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeOnProperty(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, ONPROPERTY, value);
	}
	
    /**
     * Removes a value of property OnProperty given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeOnProperty(Thing value) {
		Base.remove(this.model, this.getResource(), ONPROPERTY, value);
	}
  
    /**
     * Removes all values of property OnProperty     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllOnProperty( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, ONPROPERTY);
	}
	
    /**
     * Removes all values of property OnProperty	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllOnProperty() {
		Base.removeAll(this.model, this.getResource(), ONPROPERTY);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7f546c85 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasPropertyChainAxiom(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, PROPERTYCHAINAXIOM);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7f546c85 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasPropertyChainAxiom() {
		return Base.has(this.model, this.getResource(), PROPERTYCHAINAXIOM);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7f546c85 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasPropertyChainAxiom(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, PROPERTYCHAINAXIOM, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7f546c85 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasPropertyChainAxiom( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), PROPERTYCHAINAXIOM, value);
	}

     /**
     * Get all values of property PropertyChainAxiom as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPropertyChainAxiom_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, PROPERTYCHAINAXIOM);
	}
	
    /**
     * Get all values of property PropertyChainAxiom as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPropertyChainAxiom_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PROPERTYCHAINAXIOM, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property PropertyChainAxiom as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPropertyChainAxiom_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), PROPERTYCHAINAXIOM);
	}

    /**
     * Get all values of property PropertyChainAxiom as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPropertyChainAxiom_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), PROPERTYCHAINAXIOM, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property PropertyChainAxiom     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllPropertyChainAxiom(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, PROPERTYCHAINAXIOM, Thing.class);
	}
	
    /**
     * Get all values of property PropertyChainAxiom as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllPropertyChainAxiom_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PROPERTYCHAINAXIOM, Thing.class);
	}

    /**
     * Get all values of property PropertyChainAxiom     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllPropertyChainAxiom() {
		return Base.getAll(this.model, this.getResource(), PROPERTYCHAINAXIOM, Thing.class);
	}

    /**
     * Get all values of property PropertyChainAxiom as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllPropertyChainAxiom_as() {
		return Base.getAll_as(this.model, this.getResource(), PROPERTYCHAINAXIOM, Thing.class);
	}
 
    /**
     * Adds a value to property PropertyChainAxiom as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addPropertyChainAxiom( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, PROPERTYCHAINAXIOM, value);
	}
	
    /**
     * Adds a value to property PropertyChainAxiom as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addPropertyChainAxiom( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), PROPERTYCHAINAXIOM, value);
	}
    /**
     * Adds a value to property PropertyChainAxiom from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addPropertyChainAxiom(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, PROPERTYCHAINAXIOM, value);
	}
	
    /**
     * Adds a value to property PropertyChainAxiom from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addPropertyChainAxiom(Thing value) {
		Base.add(this.model, this.getResource(), PROPERTYCHAINAXIOM, value);
	}
  

    /**
     * Sets a value of property PropertyChainAxiom from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setPropertyChainAxiom( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, PROPERTYCHAINAXIOM, value);
	}
	
    /**
     * Sets a value of property PropertyChainAxiom from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setPropertyChainAxiom( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), PROPERTYCHAINAXIOM, value);
	}
    /**
     * Sets a value of property PropertyChainAxiom from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setPropertyChainAxiom(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, PROPERTYCHAINAXIOM, value);
	}
	
    /**
     * Sets a value of property PropertyChainAxiom from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setPropertyChainAxiom(Thing value) {
		Base.set(this.model, this.getResource(), PROPERTYCHAINAXIOM, value);
	}
  


    /**
     * Removes a value of property PropertyChainAxiom as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removePropertyChainAxiom( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, PROPERTYCHAINAXIOM, value);
	}
	
    /**
     * Removes a value of property PropertyChainAxiom as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removePropertyChainAxiom( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), PROPERTYCHAINAXIOM, value);
	}
    /**
     * Removes a value of property PropertyChainAxiom given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removePropertyChainAxiom(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, PROPERTYCHAINAXIOM, value);
	}
	
    /**
     * Removes a value of property PropertyChainAxiom given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removePropertyChainAxiom(Thing value) {
		Base.remove(this.model, this.getResource(), PROPERTYCHAINAXIOM, value);
	}
  
    /**
     * Removes all values of property PropertyChainAxiom     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllPropertyChainAxiom( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, PROPERTYCHAINAXIOM);
	}
	
    /**
     * Removes all values of property PropertyChainAxiom	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllPropertyChainAxiom() {
		Base.removeAll(this.model, this.getResource(), PROPERTYCHAINAXIOM);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6e4d4d5e has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSomeValuesFrom(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, SOMEVALUESFROM);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6e4d4d5e has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSomeValuesFrom() {
		return Base.has(this.model, this.getResource(), SOMEVALUESFROM);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6e4d4d5e has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSomeValuesFrom(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, SOMEVALUESFROM, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6e4d4d5e has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSomeValuesFrom( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), SOMEVALUESFROM, value);
	}

     /**
     * Get all values of property SomeValuesFrom as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSomeValuesFrom_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SOMEVALUESFROM);
	}
	
    /**
     * Get all values of property SomeValuesFrom as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSomeValuesFrom_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SOMEVALUESFROM, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property SomeValuesFrom as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSomeValuesFrom_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SOMEVALUESFROM);
	}

    /**
     * Get all values of property SomeValuesFrom as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSomeValuesFrom_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SOMEVALUESFROM, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property SomeValuesFrom     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllSomeValuesFrom(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, SOMEVALUESFROM, Thing.class);
	}
	
    /**
     * Get all values of property SomeValuesFrom as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllSomeValuesFrom_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SOMEVALUESFROM, Thing.class);
	}

    /**
     * Get all values of property SomeValuesFrom     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllSomeValuesFrom() {
		return Base.getAll(this.model, this.getResource(), SOMEVALUESFROM, Thing.class);
	}

    /**
     * Get all values of property SomeValuesFrom as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllSomeValuesFrom_as() {
		return Base.getAll_as(this.model, this.getResource(), SOMEVALUESFROM, Thing.class);
	}
 
    /**
     * Adds a value to property SomeValuesFrom as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSomeValuesFrom( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, SOMEVALUESFROM, value);
	}
	
    /**
     * Adds a value to property SomeValuesFrom as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSomeValuesFrom( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), SOMEVALUESFROM, value);
	}
    /**
     * Adds a value to property SomeValuesFrom from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSomeValuesFrom(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, SOMEVALUESFROM, value);
	}
	
    /**
     * Adds a value to property SomeValuesFrom from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSomeValuesFrom(Thing value) {
		Base.add(this.model, this.getResource(), SOMEVALUESFROM, value);
	}
  

    /**
     * Sets a value of property SomeValuesFrom from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSomeValuesFrom( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, SOMEVALUESFROM, value);
	}
	
    /**
     * Sets a value of property SomeValuesFrom from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSomeValuesFrom( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), SOMEVALUESFROM, value);
	}
    /**
     * Sets a value of property SomeValuesFrom from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSomeValuesFrom(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, SOMEVALUESFROM, value);
	}
	
    /**
     * Sets a value of property SomeValuesFrom from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSomeValuesFrom(Thing value) {
		Base.set(this.model, this.getResource(), SOMEVALUESFROM, value);
	}
  


    /**
     * Removes a value of property SomeValuesFrom as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSomeValuesFrom( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, SOMEVALUESFROM, value);
	}
	
    /**
     * Removes a value of property SomeValuesFrom as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSomeValuesFrom( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), SOMEVALUESFROM, value);
	}
    /**
     * Removes a value of property SomeValuesFrom given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSomeValuesFrom(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, SOMEVALUESFROM, value);
	}
	
    /**
     * Removes a value of property SomeValuesFrom given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSomeValuesFrom(Thing value) {
		Base.remove(this.model, this.getResource(), SOMEVALUESFROM, value);
	}
  
    /**
     * Removes all values of property SomeValuesFrom     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSomeValuesFrom( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, SOMEVALUESFROM);
	}
	
    /**
     * Removes all values of property SomeValuesFrom	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSomeValuesFrom() {
		Base.removeAll(this.model, this.getResource(), SOMEVALUESFROM);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3953c9c7 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasTitle(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, TITLE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3953c9c7 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasTitle() {
		return Base.has(this.model, this.getResource(), TITLE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3953c9c7 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasTitle(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, TITLE, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3953c9c7 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasTitle( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), TITLE, value);
	}

     /**
     * Get all values of property Title as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllTitle_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, TITLE);
	}
	
    /**
     * Get all values of property Title as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllTitle_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TITLE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Title as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllTitle_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), TITLE);
	}

    /**
     * Get all values of property Title as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllTitle_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), TITLE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Title     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllTitle(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, TITLE, Thing.class);
	}
	
    /**
     * Get all values of property Title as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllTitle_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TITLE, Thing.class);
	}

    /**
     * Get all values of property Title     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllTitle() {
		return Base.getAll(this.model, this.getResource(), TITLE, Thing.class);
	}

    /**
     * Get all values of property Title as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllTitle_as() {
		return Base.getAll_as(this.model, this.getResource(), TITLE, Thing.class);
	}
 
    /**
     * Adds a value to property Title as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addTitle( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, TITLE, value);
	}
	
    /**
     * Adds a value to property Title as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addTitle( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), TITLE, value);
	}
    /**
     * Adds a value to property Title from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addTitle(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, TITLE, value);
	}
	
    /**
     * Adds a value to property Title from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addTitle(Thing value) {
		Base.add(this.model, this.getResource(), TITLE, value);
	}
  

    /**
     * Sets a value of property Title from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setTitle( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, TITLE, value);
	}
	
    /**
     * Sets a value of property Title from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setTitle( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), TITLE, value);
	}
    /**
     * Sets a value of property Title from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setTitle(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, TITLE, value);
	}
	
    /**
     * Sets a value of property Title from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setTitle(Thing value) {
		Base.set(this.model, this.getResource(), TITLE, value);
	}
  


    /**
     * Removes a value of property Title as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeTitle( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, TITLE, value);
	}
	
    /**
     * Removes a value of property Title as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeTitle( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), TITLE, value);
	}
    /**
     * Removes a value of property Title given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeTitle(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, TITLE, value);
	}
	
    /**
     * Removes a value of property Title given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeTitle(Thing value) {
		Base.remove(this.model, this.getResource(), TITLE, value);
	}
  
    /**
     * Removes all values of property Title     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllTitle( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, TITLE);
	}
	
    /**
     * Removes all values of property Title	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllTitle() {
		Base.removeAll(this.model, this.getResource(), TITLE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7694837a has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasUnionOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, UNIONOF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7694837a has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasUnionOf() {
		return Base.has(this.model, this.getResource(), UNIONOF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7694837a has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasUnionOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, UNIONOF, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7694837a has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasUnionOf( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), UNIONOF, value);
	}

     /**
     * Get all values of property UnionOf as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllUnionOf_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, UNIONOF);
	}
	
    /**
     * Get all values of property UnionOf as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllUnionOf_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, UNIONOF, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property UnionOf as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllUnionOf_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), UNIONOF);
	}

    /**
     * Get all values of property UnionOf as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllUnionOf_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), UNIONOF, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property UnionOf     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllUnionOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, UNIONOF, Thing.class);
	}
	
    /**
     * Get all values of property UnionOf as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllUnionOf_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, UNIONOF, Thing.class);
	}

    /**
     * Get all values of property UnionOf     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllUnionOf() {
		return Base.getAll(this.model, this.getResource(), UNIONOF, Thing.class);
	}

    /**
     * Get all values of property UnionOf as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllUnionOf_as() {
		return Base.getAll_as(this.model, this.getResource(), UNIONOF, Thing.class);
	}
 
    /**
     * Adds a value to property UnionOf as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addUnionOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, UNIONOF, value);
	}
	
    /**
     * Adds a value to property UnionOf as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addUnionOf( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), UNIONOF, value);
	}
    /**
     * Adds a value to property UnionOf from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addUnionOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, UNIONOF, value);
	}
	
    /**
     * Adds a value to property UnionOf from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addUnionOf(Thing value) {
		Base.add(this.model, this.getResource(), UNIONOF, value);
	}
  

    /**
     * Sets a value of property UnionOf from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setUnionOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, UNIONOF, value);
	}
	
    /**
     * Sets a value of property UnionOf from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setUnionOf( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), UNIONOF, value);
	}
    /**
     * Sets a value of property UnionOf from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setUnionOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, UNIONOF, value);
	}
	
    /**
     * Sets a value of property UnionOf from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setUnionOf(Thing value) {
		Base.set(this.model, this.getResource(), UNIONOF, value);
	}
  


    /**
     * Removes a value of property UnionOf as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeUnionOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, UNIONOF, value);
	}
	
    /**
     * Removes a value of property UnionOf as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeUnionOf( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), UNIONOF, value);
	}
    /**
     * Removes a value of property UnionOf given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeUnionOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, UNIONOF, value);
	}
	
    /**
     * Removes a value of property UnionOf given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeUnionOf(Thing value) {
		Base.remove(this.model, this.getResource(), UNIONOF, value);
	}
  
    /**
     * Removes all values of property UnionOf     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllUnionOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, UNIONOF);
	}
	
    /**
     * Removes all values of property UnionOf	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllUnionOf() {
		Base.removeAll(this.model, this.getResource(), UNIONOF);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@c39a867 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasUsed(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, USED);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@c39a867 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasUsed() {
		return Base.has(this.model, this.getResource(), USED);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@c39a867 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasUsed(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, USED, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@c39a867 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasUsed( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), USED, value);
	}

     /**
     * Get all values of property Used as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllUsed_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, USED);
	}
	
    /**
     * Get all values of property Used as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllUsed_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, USED, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Used as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllUsed_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), USED);
	}

    /**
     * Get all values of property Used as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllUsed_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), USED, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Used     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllUsed(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, USED, Thing.class);
	}
	
    /**
     * Get all values of property Used as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllUsed_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, USED, Thing.class);
	}

    /**
     * Get all values of property Used     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllUsed() {
		return Base.getAll(this.model, this.getResource(), USED, Thing.class);
	}

    /**
     * Get all values of property Used as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllUsed_as() {
		return Base.getAll_as(this.model, this.getResource(), USED, Thing.class);
	}
 
    /**
     * Adds a value to property Used as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addUsed( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, USED, value);
	}
	
    /**
     * Adds a value to property Used as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addUsed( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), USED, value);
	}
    /**
     * Adds a value to property Used from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addUsed(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, USED, value);
	}
	
    /**
     * Adds a value to property Used from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addUsed(Thing value) {
		Base.add(this.model, this.getResource(), USED, value);
	}
  

    /**
     * Sets a value of property Used from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setUsed( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, USED, value);
	}
	
    /**
     * Sets a value of property Used from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setUsed( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), USED, value);
	}
    /**
     * Sets a value of property Used from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setUsed(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, USED, value);
	}
	
    /**
     * Sets a value of property Used from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setUsed(Thing value) {
		Base.set(this.model, this.getResource(), USED, value);
	}
  


    /**
     * Removes a value of property Used as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeUsed( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, USED, value);
	}
	
    /**
     * Removes a value of property Used as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeUsed( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), USED, value);
	}
    /**
     * Removes a value of property Used given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeUsed(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, USED, value);
	}
	
    /**
     * Removes a value of property Used given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeUsed(Thing value) {
		Base.remove(this.model, this.getResource(), USED, value);
	}
  
    /**
     * Removes all values of property Used     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllUsed( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, USED);
	}
	
    /**
     * Removes all values of property Used	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllUsed() {
		Base.removeAll(this.model, this.getResource(), USED);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@79f1e0e0 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasWasDerivedFrom(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, WASDERIVEDFROM);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@79f1e0e0 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasWasDerivedFrom() {
		return Base.has(this.model, this.getResource(), WASDERIVEDFROM);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@79f1e0e0 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasWasDerivedFrom(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, WASDERIVEDFROM, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@79f1e0e0 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasWasDerivedFrom( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), WASDERIVEDFROM, value);
	}

     /**
     * Get all values of property WasDerivedFrom as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllWasDerivedFrom_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, WASDERIVEDFROM);
	}
	
    /**
     * Get all values of property WasDerivedFrom as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllWasDerivedFrom_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, WASDERIVEDFROM, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property WasDerivedFrom as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllWasDerivedFrom_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), WASDERIVEDFROM);
	}

    /**
     * Get all values of property WasDerivedFrom as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllWasDerivedFrom_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), WASDERIVEDFROM, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property WasDerivedFrom     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllWasDerivedFrom(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, WASDERIVEDFROM, Thing.class);
	}
	
    /**
     * Get all values of property WasDerivedFrom as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllWasDerivedFrom_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, WASDERIVEDFROM, Thing.class);
	}

    /**
     * Get all values of property WasDerivedFrom     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllWasDerivedFrom() {
		return Base.getAll(this.model, this.getResource(), WASDERIVEDFROM, Thing.class);
	}

    /**
     * Get all values of property WasDerivedFrom as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllWasDerivedFrom_as() {
		return Base.getAll_as(this.model, this.getResource(), WASDERIVEDFROM, Thing.class);
	}
 
    /**
     * Adds a value to property WasDerivedFrom as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addWasDerivedFrom( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, WASDERIVEDFROM, value);
	}
	
    /**
     * Adds a value to property WasDerivedFrom as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addWasDerivedFrom( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), WASDERIVEDFROM, value);
	}
    /**
     * Adds a value to property WasDerivedFrom from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addWasDerivedFrom(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, WASDERIVEDFROM, value);
	}
	
    /**
     * Adds a value to property WasDerivedFrom from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addWasDerivedFrom(Thing value) {
		Base.add(this.model, this.getResource(), WASDERIVEDFROM, value);
	}
  

    /**
     * Sets a value of property WasDerivedFrom from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setWasDerivedFrom( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, WASDERIVEDFROM, value);
	}
	
    /**
     * Sets a value of property WasDerivedFrom from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setWasDerivedFrom( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), WASDERIVEDFROM, value);
	}
    /**
     * Sets a value of property WasDerivedFrom from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setWasDerivedFrom(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, WASDERIVEDFROM, value);
	}
	
    /**
     * Sets a value of property WasDerivedFrom from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setWasDerivedFrom(Thing value) {
		Base.set(this.model, this.getResource(), WASDERIVEDFROM, value);
	}
  


    /**
     * Removes a value of property WasDerivedFrom as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeWasDerivedFrom( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, WASDERIVEDFROM, value);
	}
	
    /**
     * Removes a value of property WasDerivedFrom as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeWasDerivedFrom( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), WASDERIVEDFROM, value);
	}
    /**
     * Removes a value of property WasDerivedFrom given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeWasDerivedFrom(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, WASDERIVEDFROM, value);
	}
	
    /**
     * Removes a value of property WasDerivedFrom given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeWasDerivedFrom(Thing value) {
		Base.remove(this.model, this.getResource(), WASDERIVEDFROM, value);
	}
  
    /**
     * Removes all values of property WasDerivedFrom     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllWasDerivedFrom( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, WASDERIVEDFROM);
	}
	
    /**
     * Removes all values of property WasDerivedFrom	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllWasDerivedFrom() {
		Base.removeAll(this.model, this.getResource(), WASDERIVEDFROM);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4eb09321 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasWasGeneratedBy(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, WASGENERATEDBY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4eb09321 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasWasGeneratedBy() {
		return Base.has(this.model, this.getResource(), WASGENERATEDBY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4eb09321 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasWasGeneratedBy(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, WASGENERATEDBY, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4eb09321 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasWasGeneratedBy( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), WASGENERATEDBY, value);
	}

     /**
     * Get all values of property WasGeneratedBy as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllWasGeneratedBy_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, WASGENERATEDBY);
	}
	
    /**
     * Get all values of property WasGeneratedBy as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllWasGeneratedBy_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, WASGENERATEDBY, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property WasGeneratedBy as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllWasGeneratedBy_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), WASGENERATEDBY);
	}

    /**
     * Get all values of property WasGeneratedBy as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllWasGeneratedBy_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), WASGENERATEDBY, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property WasGeneratedBy     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllWasGeneratedBy(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, WASGENERATEDBY, Thing.class);
	}
	
    /**
     * Get all values of property WasGeneratedBy as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllWasGeneratedBy_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, WASGENERATEDBY, Thing.class);
	}

    /**
     * Get all values of property WasGeneratedBy     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllWasGeneratedBy() {
		return Base.getAll(this.model, this.getResource(), WASGENERATEDBY, Thing.class);
	}

    /**
     * Get all values of property WasGeneratedBy as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllWasGeneratedBy_as() {
		return Base.getAll_as(this.model, this.getResource(), WASGENERATEDBY, Thing.class);
	}
 
    /**
     * Adds a value to property WasGeneratedBy as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addWasGeneratedBy( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, WASGENERATEDBY, value);
	}
	
    /**
     * Adds a value to property WasGeneratedBy as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addWasGeneratedBy( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), WASGENERATEDBY, value);
	}
    /**
     * Adds a value to property WasGeneratedBy from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addWasGeneratedBy(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, WASGENERATEDBY, value);
	}
	
    /**
     * Adds a value to property WasGeneratedBy from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addWasGeneratedBy(Thing value) {
		Base.add(this.model, this.getResource(), WASGENERATEDBY, value);
	}
  

    /**
     * Sets a value of property WasGeneratedBy from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setWasGeneratedBy( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, WASGENERATEDBY, value);
	}
	
    /**
     * Sets a value of property WasGeneratedBy from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setWasGeneratedBy( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), WASGENERATEDBY, value);
	}
    /**
     * Sets a value of property WasGeneratedBy from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setWasGeneratedBy(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, WASGENERATEDBY, value);
	}
	
    /**
     * Sets a value of property WasGeneratedBy from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setWasGeneratedBy(Thing value) {
		Base.set(this.model, this.getResource(), WASGENERATEDBY, value);
	}
  


    /**
     * Removes a value of property WasGeneratedBy as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeWasGeneratedBy( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, WASGENERATEDBY, value);
	}
	
    /**
     * Removes a value of property WasGeneratedBy as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeWasGeneratedBy( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), WASGENERATEDBY, value);
	}
    /**
     * Removes a value of property WasGeneratedBy given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeWasGeneratedBy(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, WASGENERATEDBY, value);
	}
	
    /**
     * Removes a value of property WasGeneratedBy given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeWasGeneratedBy(Thing value) {
		Base.remove(this.model, this.getResource(), WASGENERATEDBY, value);
	}
  
    /**
     * Removes all values of property WasGeneratedBy     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllWasGeneratedBy( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, WASGENERATEDBY);
	}
	
    /**
     * Removes all values of property WasGeneratedBy	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllWasGeneratedBy() {
		Base.removeAll(this.model, this.getResource(), WASGENERATEDBY);
	}
 }