/**
 * generated by http://RDFReactor.semweb4j.org ($Id: CodeGenerator.java 1765 2010-02-11 09:51:13Z max.at.xam.de $) on 2/21/12 8:19 AM
 */
package gov.nasa.jpl.cdp.provenance.opmo_es;

import org.ontoware.aifbcommons.collection.ClosableIterator;
import org.ontoware.rdf2go.exception.ModelRuntimeException;
import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.BlankNode;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdfreactor.runtime.Base;
import org.ontoware.rdfreactor.runtime.ReactorResult;

/**
 * This class manages access to these properties:
 * <ul>
 *   <li> CauseWasDerivedFrom </li>
 *   <li> EffectWasDerivedFrom </li>
 * </ul>
 *
 * This class was generated by <a href="http://RDFReactor.semweb4j.org">RDFReactor</a> on 2/21/12 8:19 AM
 */
public class WasDerivedFrom extends Edge {

    /** http://openprovenance.org/model/opmo#WasDerivedFrom */
	@SuppressWarnings("hiding")
	public static final URI RDFS_CLASS = new URIImpl("http://openprovenance.org/model/opmo#WasDerivedFrom", false);

    /** http://openprovenance.org/model/opmo#causeWasDerivedFrom */
	public static final URI CAUSEWASDERIVEDFROM = new URIImpl("http://openprovenance.org/model/opmo#causeWasDerivedFrom",false);

    /** http://openprovenance.org/model/opmo#effectWasDerivedFrom */
	public static final URI EFFECTWASDERIVEDFROM = new URIImpl("http://openprovenance.org/model/opmo#effectWasDerivedFrom",false);

    /** 
     * All property-URIs with this class as domain.
     * All properties of all super-classes are also available. 
     */
	@SuppressWarnings("hiding")
    public static final URI[] MANAGED_URIS = {
      new URIImpl("http://openprovenance.org/model/opmo#causeWasDerivedFrom",false),
      new URIImpl("http://openprovenance.org/model/opmo#effectWasDerivedFrom",false) 
    };


	// protected constructors needed for inheritance
	
	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.semweb4j.org
	 * @param classURI URI of RDFS class
	 * @param instanceIdentifier Resource that identifies this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c1] 
	 */
	protected WasDerivedFrom ( Model model, URI classURI, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, classURI, instanceIdentifier, write);
	}

	// public constructors

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param instanceIdentifier an RDF2Go Resource identifying this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c2] 
	 */
	public WasDerivedFrom ( Model model, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, RDFS_CLASS, instanceIdentifier, write);
	}


	/**
	 * Returns a Java wrapper over an RDF object, identified by a URI, given as a String.
	 * Creating two wrappers for the same URI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uriString a URI given as a String
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 * @throws ModelRuntimeException if URI syntax is wrong
	 *
	 * [Generated from RDFReactor template rule #c7] 
	 */
	public WasDerivedFrom ( Model model, String uriString, boolean write) throws ModelRuntimeException {
		super(model, RDFS_CLASS, new URIImpl(uriString,false), write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by a blank node.
	 * Creating two wrappers for the same blank node is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param bnode BlankNode of this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c8] 
	 */
	public WasDerivedFrom ( Model model, BlankNode bnode, boolean write ) {
		super(model, RDFS_CLASS, bnode, write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by 
	 * a randomly generated URI.
	 * Creating two wrappers results in different URIs.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c9] 
	 */
	public WasDerivedFrom ( Model model, boolean write ) {
		super(model, RDFS_CLASS, model.newRandomUniqueURI(), write);
	}

    ///////////////////////////////////////////////////////////////////
    // typing

	/**
	 * Return an existing instance of this class in the model. No statements are written.
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return an instance of WasDerivedFrom  or null if none existst
	 *
	 * [Generated from RDFReactor template rule #class0] 
	 */
	public static WasDerivedFrom  getInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getInstance(model, instanceResource, WasDerivedFrom.class);
	}

	/**
	 * Create a new instance of this class in the model. 
	 * That is, create the statement (instanceResource, RDF.type, http://openprovenance.org/model/opmo#WasDerivedFrom).
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class1] 
	 */
	public static void createInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.createInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return true if instanceResource is an instance of this class in the model
	 *
	 * [Generated from RDFReactor template rule #class2] 
	 */
	public static boolean hasInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.hasInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as RDF resources
	 *
	 * [Generated from RDFReactor template rule #class3] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInstances(Model model) {
		return Base.getAllInstances(model, RDFS_CLASS, org.ontoware.rdf2go.model.node.Resource.class);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as a ReactorResult,
	 * which can conveniently be converted to iterator, list or array.
	 *
	 * [Generated from RDFReactor template rule #class3-as] 
	 */
	public static ReactorResult<? extends WasDerivedFrom> getAllInstances_as(Model model) {
		return Base.getAllInstances_as(model, RDFS_CLASS, WasDerivedFrom.class );
	}

    /**
	 * Remove rdf:type WasDerivedFrom from this instance. Other triples are not affected.
	 * To delete more, use deleteAllProperties
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class4] 
	 */
	public static void deleteInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * Delete all (this, *, *), i.e. including rdf:type
	 * @param model an RDF2Go model
	 * @param resource
	 */
	public static void deleteAllProperties(Model model,	org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteAllProperties(model, instanceResource);
	}

    ///////////////////////////////////////////////////////////////////
    // property access methods

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'EffectWasDerivedFromInverse' to this WasDerivedFrom instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllEffectWasDerivedFromInverse_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Artifact.EFFECTWASDERIVEDFROMINVERSE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'EffectWasDerivedFromInverse' to this WasDerivedFrom instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllEffectWasDerivedFromInverse_Inverse() {
		return Base.getAll_Inverse(this.model, Artifact.EFFECTWASDERIVEDFROMINVERSE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'EffectWasDerivedFromInverse' to this WasDerivedFrom instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllEffectWasDerivedFromInverse_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Artifact.EFFECTWASDERIVEDFROMINVERSE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}



    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1a6ff5 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasCauseWasDerivedFrom(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, CAUSEWASDERIVEDFROM);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1a6ff5 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasCauseWasDerivedFrom() {
		return Base.has(this.model, this.getResource(), CAUSEWASDERIVEDFROM);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1a6ff5 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasCauseWasDerivedFrom(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, CAUSEWASDERIVEDFROM, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1a6ff5 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasCauseWasDerivedFrom( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), CAUSEWASDERIVEDFROM, value);
	}

     /**
     * Get all values of property CauseWasDerivedFrom as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllCauseWasDerivedFrom_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, CAUSEWASDERIVEDFROM);
	}
	
    /**
     * Get all values of property CauseWasDerivedFrom as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllCauseWasDerivedFrom_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CAUSEWASDERIVEDFROM, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property CauseWasDerivedFrom as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllCauseWasDerivedFrom_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), CAUSEWASDERIVEDFROM);
	}

    /**
     * Get all values of property CauseWasDerivedFrom as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllCauseWasDerivedFrom_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), CAUSEWASDERIVEDFROM, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property CauseWasDerivedFrom     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Artifact> getAllCauseWasDerivedFrom(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, CAUSEWASDERIVEDFROM, Artifact.class);
	}
	
    /**
     * Get all values of property CauseWasDerivedFrom as a ReactorResult of Artifact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Artifact> getAllCauseWasDerivedFrom_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CAUSEWASDERIVEDFROM, Artifact.class);
	}

    /**
     * Get all values of property CauseWasDerivedFrom     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Artifact> getAllCauseWasDerivedFrom() {
		return Base.getAll(this.model, this.getResource(), CAUSEWASDERIVEDFROM, Artifact.class);
	}

    /**
     * Get all values of property CauseWasDerivedFrom as a ReactorResult of Artifact 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Artifact> getAllCauseWasDerivedFrom_as() {
		return Base.getAll_as(this.model, this.getResource(), CAUSEWASDERIVEDFROM, Artifact.class);
	}
 
    /**
     * Adds a value to property CauseWasDerivedFrom as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addCauseWasDerivedFrom( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, CAUSEWASDERIVEDFROM, value);
	}
	
    /**
     * Adds a value to property CauseWasDerivedFrom as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addCauseWasDerivedFrom( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), CAUSEWASDERIVEDFROM, value);
	}
    /**
     * Adds a value to property CauseWasDerivedFrom from an instance of Artifact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addCauseWasDerivedFrom(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Artifact value) {
		Base.add(model, instanceResource, CAUSEWASDERIVEDFROM, value);
	}
	
    /**
     * Adds a value to property CauseWasDerivedFrom from an instance of Artifact 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addCauseWasDerivedFrom(Artifact value) {
		Base.add(this.model, this.getResource(), CAUSEWASDERIVEDFROM, value);
	}
  

    /**
     * Sets a value of property CauseWasDerivedFrom from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setCauseWasDerivedFrom( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, CAUSEWASDERIVEDFROM, value);
	}
	
    /**
     * Sets a value of property CauseWasDerivedFrom from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setCauseWasDerivedFrom( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), CAUSEWASDERIVEDFROM, value);
	}
    /**
     * Sets a value of property CauseWasDerivedFrom from an instance of Artifact 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setCauseWasDerivedFrom(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Artifact value) {
		Base.set(model, instanceResource, CAUSEWASDERIVEDFROM, value);
	}
	
    /**
     * Sets a value of property CauseWasDerivedFrom from an instance of Artifact 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setCauseWasDerivedFrom(Artifact value) {
		Base.set(this.model, this.getResource(), CAUSEWASDERIVEDFROM, value);
	}
  


    /**
     * Removes a value of property CauseWasDerivedFrom as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeCauseWasDerivedFrom( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, CAUSEWASDERIVEDFROM, value);
	}
	
    /**
     * Removes a value of property CauseWasDerivedFrom as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeCauseWasDerivedFrom( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), CAUSEWASDERIVEDFROM, value);
	}
    /**
     * Removes a value of property CauseWasDerivedFrom given as an instance of Artifact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeCauseWasDerivedFrom(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Artifact value) {
		Base.remove(model, instanceResource, CAUSEWASDERIVEDFROM, value);
	}
	
    /**
     * Removes a value of property CauseWasDerivedFrom given as an instance of Artifact 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeCauseWasDerivedFrom(Artifact value) {
		Base.remove(this.model, this.getResource(), CAUSEWASDERIVEDFROM, value);
	}
  
    /**
     * Removes all values of property CauseWasDerivedFrom     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllCauseWasDerivedFrom( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, CAUSEWASDERIVEDFROM);
	}
	
    /**
     * Removes all values of property CauseWasDerivedFrom	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllCauseWasDerivedFrom() {
		Base.removeAll(this.model, this.getResource(), CAUSEWASDERIVEDFROM);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@b01c5 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasEffectWasDerivedFrom(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EFFECTWASDERIVEDFROM);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@b01c5 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasEffectWasDerivedFrom() {
		return Base.has(this.model, this.getResource(), EFFECTWASDERIVEDFROM);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@b01c5 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasEffectWasDerivedFrom(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EFFECTWASDERIVEDFROM, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@b01c5 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasEffectWasDerivedFrom( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EFFECTWASDERIVEDFROM, value);
	}

     /**
     * Get all values of property EffectWasDerivedFrom as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllEffectWasDerivedFrom_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EFFECTWASDERIVEDFROM);
	}
	
    /**
     * Get all values of property EffectWasDerivedFrom as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllEffectWasDerivedFrom_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EFFECTWASDERIVEDFROM, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property EffectWasDerivedFrom as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllEffectWasDerivedFrom_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EFFECTWASDERIVEDFROM);
	}

    /**
     * Get all values of property EffectWasDerivedFrom as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllEffectWasDerivedFrom_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EFFECTWASDERIVEDFROM, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property EffectWasDerivedFrom     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Artifact> getAllEffectWasDerivedFrom(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EFFECTWASDERIVEDFROM, Artifact.class);
	}
	
    /**
     * Get all values of property EffectWasDerivedFrom as a ReactorResult of Artifact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Artifact> getAllEffectWasDerivedFrom_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EFFECTWASDERIVEDFROM, Artifact.class);
	}

    /**
     * Get all values of property EffectWasDerivedFrom     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Artifact> getAllEffectWasDerivedFrom() {
		return Base.getAll(this.model, this.getResource(), EFFECTWASDERIVEDFROM, Artifact.class);
	}

    /**
     * Get all values of property EffectWasDerivedFrom as a ReactorResult of Artifact 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Artifact> getAllEffectWasDerivedFrom_as() {
		return Base.getAll_as(this.model, this.getResource(), EFFECTWASDERIVEDFROM, Artifact.class);
	}
 
    /**
     * Adds a value to property EffectWasDerivedFrom as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addEffectWasDerivedFrom( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EFFECTWASDERIVEDFROM, value);
	}
	
    /**
     * Adds a value to property EffectWasDerivedFrom as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addEffectWasDerivedFrom( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EFFECTWASDERIVEDFROM, value);
	}
    /**
     * Adds a value to property EffectWasDerivedFrom from an instance of Artifact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addEffectWasDerivedFrom(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Artifact value) {
		Base.add(model, instanceResource, EFFECTWASDERIVEDFROM, value);
	}
	
    /**
     * Adds a value to property EffectWasDerivedFrom from an instance of Artifact 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addEffectWasDerivedFrom(Artifact value) {
		Base.add(this.model, this.getResource(), EFFECTWASDERIVEDFROM, value);
	}
  

    /**
     * Sets a value of property EffectWasDerivedFrom from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setEffectWasDerivedFrom( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EFFECTWASDERIVEDFROM, value);
	}
	
    /**
     * Sets a value of property EffectWasDerivedFrom from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setEffectWasDerivedFrom( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EFFECTWASDERIVEDFROM, value);
	}
    /**
     * Sets a value of property EffectWasDerivedFrom from an instance of Artifact 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setEffectWasDerivedFrom(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Artifact value) {
		Base.set(model, instanceResource, EFFECTWASDERIVEDFROM, value);
	}
	
    /**
     * Sets a value of property EffectWasDerivedFrom from an instance of Artifact 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setEffectWasDerivedFrom(Artifact value) {
		Base.set(this.model, this.getResource(), EFFECTWASDERIVEDFROM, value);
	}
  


    /**
     * Removes a value of property EffectWasDerivedFrom as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeEffectWasDerivedFrom( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EFFECTWASDERIVEDFROM, value);
	}
	
    /**
     * Removes a value of property EffectWasDerivedFrom as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeEffectWasDerivedFrom( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EFFECTWASDERIVEDFROM, value);
	}
    /**
     * Removes a value of property EffectWasDerivedFrom given as an instance of Artifact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeEffectWasDerivedFrom(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Artifact value) {
		Base.remove(model, instanceResource, EFFECTWASDERIVEDFROM, value);
	}
	
    /**
     * Removes a value of property EffectWasDerivedFrom given as an instance of Artifact 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeEffectWasDerivedFrom(Artifact value) {
		Base.remove(this.model, this.getResource(), EFFECTWASDERIVEDFROM, value);
	}
  
    /**
     * Removes all values of property EffectWasDerivedFrom     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllEffectWasDerivedFrom( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EFFECTWASDERIVEDFROM);
	}
	
    /**
     * Removes all values of property EffectWasDerivedFrom	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllEffectWasDerivedFrom() {
		Base.removeAll(this.model, this.getResource(), EFFECTWASDERIVEDFROM);
	}
 }